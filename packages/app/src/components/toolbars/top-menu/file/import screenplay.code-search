# Query: set
# ContextLines: 1

5756 results - 427 files

Angry Red Planet2025.fdx.trelby:
   370  .:Yep.
   371: >.They grab headsets, put them on, both smiling. Hold on
   372  >.screen, zoom in. Caption reads, "NBC News with Diane Lee,

   843  .:to be done, let's go.
   844: >.The Director begins walking towards a set of doors,
   845  >.Commander nods to Alex, she smiles, follows Director.

   980  >:But they're corporations, on the
   981: >:stock market, if they suffer a set
   982  >:back in space, stocks fall, people

  1037  >:We used our best stealth & cloaking
  1038: >:technology, moved assets into the
  1039  >:asteroid belt, while Mars was on

  1374  >:that will give you some time to
  1375: >:settle in, and get some grub, see
  1376  .:you then.

  1394  ..desk. Pan onto ceiling opposite desk, see monitoring device.
  1395: >.(Upon entering room, the closet & washroom is straight
  1396  >.ahead, enter the living space to the left, then turn right

  1405  >.bag, places on desk, picks up tablet sitting on desk,
  1406: >.touches screen, light on device comes on, then a set of
  1407  >.pictures of all her kids, appears on wall. She reaches out,

  1416  .\Int. Sid's cabin
  1417: >.She picks up small bag, places it in closet with other empty
  1418  >.luggage, looks around room, makes face, nods like she's

  1610  >:Once the mining equipment has been
  1611: >:deployed, you will set up the 3D
  1612  >:manufacturing units which will

  1727  .:That's exactly what it is.
  1728: >.The Commander then points to a large bulkhead, with a set of
  1729  >.doors at back of room. The doors are fairly heavy with some

  1925  >.holographic viewing screen. Then, when flight crew put on
  1926: >.headsets (glasses), each has a clear 360 degree holographic
  1927  >.view of ships surroundings. Entire bridge recessed under

  2335  >.Alex is walking from gym back to quarters, sees Professor
  2336: >.sitting in observation port, off of corridor, looks upset.
  2337  >.Port is located on the interior of the ship but has a large

  2435  >:I notices this cabin has more
  2436: .:closet space.
  2437  ..He looks around cabin, big smile.

  2507  ._SID V.O.
  2508: >:Engage forward thrust. Set angel of
  2509  .:thrust for artificial gravity.

  2698  >:Solar System. That's, of course,
  2699: >:where we're about to set up the
  2700  .:mining operation.

  2764  .\Int. General sun tzu - ultra room
  2765: >.Inside an officer hands out small headsets, larger than ones
  2766  >.used on bridge. They step onto an elevated black oval

  2775  >.can see Sun, including approaching flare, and stars. They
  2776: >.look at each other, they see no headsets, nor do they feel
  2777  >.them, the system completely fools the senses into believing

  3034  >:have fired sooner but the lasers
  3035: .:were set on safe for the landing.
  3036  ..Lt Tan looking at main display, looks horrified.

  3145  .\Int. General sun tzu - bridge
  3146: >.Bridge crew has an amazing view of battle, headsets enabling
  3147  >.them to see entire theatre plainly. Olympus Mons has taken

  3181  .\Int. General sun tzu - bridge
  3182: >.With headsets, it's like the bridge crew are standing on top
  3183  >.of, and are looking down at the stricken Jefferson, as it

  3982  .=Ext. Mars - valles marineris - birds eye - day
  3983: >.Three sets of missiles, spread several kilometers apart, go
  3984  >.screaming towards Screamers, here sound of the Screamers,

  4373  >.Then, a drones moves up beside Sid's pod, ships voice comes
  4374: ..in over Sid's headset.
  4375  ._SHIP v.o.

  4598  ./FADE TO:
  4599: .=Ext. General sun tzu - sunset
  4600  >.Shot of General Sun Tzu sitting on same bench it left from,

deploy.sh:
  7  
  8: echo "uploading assets.."
  9  rm -Rf node_modules/.cache

Dockerfile:
  25  
  26: # Set up a new user named "user" with user ID 1000
  27  RUN adduser --disabled-password --uid 1001 user

  31  
  32: # Set home to the user's home directory
  33  ENV  PATH=.local/bin:$PATH
  34  
  35: # Set the working directory to the user's home directory
  36  WORKDIR /app

  47  
  48: # Copy the current directory contents into the container at /app setting the owner to the user
  49  COPY --chown=user . /app

LICENSE.md:
  453    An "entity transaction" is a transaction transferring control of an
  454: organization, or substantially all assets of one, or subdividing an
  455  organization, or merging organizations.  If propagation of a covered

README.md:
   23  
   24: <a href="https://www.buymeacoffee.com/flngr" target="_blank"><img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me A Coffee" style="height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;" ></a>
   25  

   35  
   36: To this end I am also working on a Director's Mode, where you can just put the video in fullscreen, sit comfortably in your director's chair (or couch), shouting orders at your AI set assistant to produce your movie.
   37  

  109  
  110: You can run the following command to build the app, making sure all the types are consistent and properly set:
  111  

  137  
  138: If that doesn't work for you (issue with node-gyp, setuptools, distutils etc) you might have to run:
  139  
  140  ```bash
  141: python3 -m pip install --break-system-packages setuptools
  142  ```

  154  
  155: I have setup Prettier and ESLint, they use some basic rules (you can propose new rules if you want to)
  156  

.github\workflows\tests.yml:
  12      - uses: actions/checkout@v4
  13:     - uses: actions/setup-node@v4
  14        with:

  18          # cache-dependency-path: subdir/package-lock.json
  19:         # see https://github.com/actions/setup-node#caching-global-packages-data
  20     

  32        with:
  33:         # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
  34          path: |

packages\app\.env.example:
   5  
   6: # The following settings are only useful to change in the case you plan to deploy Clapper
   7  # to a custom server for your team.

  17  # This is useful to provide a nicer experience to teams (easier to handle billing and security)
  18: NEXT_PUBLIC_DISABLE_PROVIDER_CREDENTIALS_IN_USER_SETTINGS=false
  19  

packages\app\forge.config.js:
  87      /*
  88:     Only needed if asar is set to true
  89      {

packages\app\LICENSE.txt:
  453    An "entity transaction" is a transaction transferring control of an
  454: organization, or substantially all assets of one, or subdividing an
  455  organization, or merging organizations.  If propagation of a covered

packages\app\package.json:
   16      "dev": "bun run checks && next dev",
   17:     "build": "bun run prepare && bun run checks && rm -Rf out && next build && bun run build:copyassets",
   18:     "build:copyassets": "cp -R public .next/standalone/packages/app/public && cp -R .next/static .next/standalone/packages/app/.next/static",
   19      "prepare": "cp -R ../../node_modules/mediainfo.js/dist/MediaInfoModule.wasm public/wasm/",

  115      "react": "18.3.1",
  116:     "react-device-frameset": "1.3.4",
  117      "react-dnd": "16.0.1",

packages\app\playwright.config.ts:
  24    reporter: 'html',
  25:   /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  26    use: {

packages\app\public\datasets\baby-names-us-year-of-birth-full.csv:
      230  1880,John,F,46
      231: 1880,Rosetta,F,46
      232  1880,Verna,F,46

     1292  1880,Roger,M,25
     1293: 1880,Seth,M,25
     1294  1880,Glen,M,24

     2220  1881,Cordelia,F,49
     2221: 1881,Rosetta,F,49
     2222  1881,Wilhelmina,F,49

     3207  1881,Cecil,M,35
     3208: 1881,Seth,M,35
     3209  1881,Bruce,M,34

     4196  1882,Emilie,F,45
     4197: 1882,Rosetta,F,45
     4198  1882,Cassie,F,44

     4915  1882,Leda,F,5
     4916: 1882,Lisette,F,5
     4917  1882,Littie,F,5

     5275  1882,Burt,M,31
     5276: 1882,Seth,M,31
     5277  1882,Archibald,M,30

     6348  1883,Pearle,F,39
     6349: 1883,Rosetta,F,39
     6350  1883,Claire,F,38

     7446  1883,Lyman,M,26
     7447: 1883,Seth,M,26
     7448  1883,Clay,M,25

     8430  1884,Sudie,F,47
     8431: 1884,Rosetta,F,46
     8432  1884,Cassie,F,45

     9245  1884,Lillia,F,5
     9246: 1884,Lisette,F,5
     9247  1884,Littie,F,5

     9713  1884,Rollie,M,21
     9714: 1884,Seth,M,21
     9715  1884,Stewart,M,21

    10763  1885,Madeline,F,41
    10764: 1885,Rosetta,F,41
    10765  1885,Gracie,F,40

    11326  1885,Lillis,F,7
    11327: 1885,Lisette,F,7
    11328  1885,Litha,F,7

    11929  1885,Mathew,M,34
    11930: 1885,Seth,M,34
    11931  1885,Arnold,M,33

    13005  1886,Ivy,F,61
    13006: 1886,Rosetta,F,61
    13007  1886,Ophelia,F,60

    14386  1886,Raleigh,M,23
    14387: 1886,Seth,M,23
    14388  1886,Wayne,M,23

    15460  1887,Faye,F,42
    15461: 1887,Rosetta,F,42
    15462  1887,Anita,F,41

    16838  1887,Prince,M,18
    16839: 1887,Seth,M,18
    16840  1887,Smith,M,18

    17809  1888,Mabelle,F,61
    17810: 1888,Rosetta,F,61
    17811  1888,Dolly,F,60

    19318  1888,Pat,M,30
    19319: 1888,Seth,M,30
    19320  1888,Carlos,M,29

    20453  1889,Cassie,F,66
    20454: 1889,Rosetta,F,66
    20455  1889,Chloe,F,64

    21979  1889,Randolph,M,27
    21980: 1889,Seth,M,27
    21981  1889,Alton,M,26

    23073  1890,Faye,F,59
    23074: 1890,Rosetta,F,59
    23075  1890,Una,F,59

    24784  1890,Russel,M,15
    24785: 1890,Seth,M,15
    24786  1890,Smith,M,15

    25754  1891,Lessie,F,64
    25755: 1891,Rosetta,F,64
    25756  1891,Frankie,F,63

    27344  1891,Russel,M,22
    27345: 1891,Seth,M,22
    27346  1891,Taylor,M,22

    28417  1892,Oma,F,72
    28418: 1892,Rosetta,F,72
    28419  1892,Edythe,F,71

    30113  1892,Lyle,M,29
    30114: 1892,Seth,M,29
    30115  1892,Taylor,M,29

    31336  1893,Lona,F,73
    31337: 1893,Rosetta,F,73
    31338  1893,Janet,F,72

    33173  1893,Rupert,M,15
    33174: 1893,Seth,M,15
    33175  1893,Shirley,M,15

    34187  1894,Angelina,F,69
    34188: 1894,Rosetta,F,69
    34189  1894,Angeline,F,68

    36112  1894,Reid,M,14
    36113: 1894,Seth,M,14
    36114  1894,Shelby,M,14

    37108  1895,Orpha,F,85
    37109: 1895,Rosetta,F,84
    37110  1895,Eugenia,F,83

    39087  1895,Russel,M,18
    39088: 1895,Seth,M,18
    39089  1895,Wilford,M,18

    40173  1896,Eloise,F,77
    40174: 1896,Rosetta,F,77
    40175  1896,Alva,F,76

    41569  1896,Lisa,F,5
    41570: 1896,Lisetta,F,5
    41571  1896,Loie,F,5

    42382  1896,Saul,M,11
    42383: 1896,Seth,M,11
    42384  1896,Sigmund,M,11

    43283  1897,Merle,F,70
    43284: 1897,Rosetta,F,70
    43285  1897,Vada,F,70

    45187  1897,Roman,M,19
    45188: 1897,Seth,M,19
    45189  1897,Washington,M,19

    46317  1898,Merle,F,77
    46318: 1898,Rosetta,F,77
    46319  1898,Lyda,F,76

    47889  1898,Rosemarie,F,5
    47890: 1898,Rosetter,F,5
    47891  1898,Rotha,F,5

    48537  1898,Sammie,M,14
    48538: 1898,Seth,M,14
    48539  1898,Shafter,M,14

    49523  1899,Pearlie,F,97
    49524: 1899,Rosetta,F,97
    49525  1899,Angelina,F,96

    51719  1899,Sarah,M,11
    51720: 1899,Seth,M,11
    51721  1899,Sim,M,11

    52551  1900,Nona,F,132
    52552: 1900,Rosetta,F,132
    52553  1900,Zelma,F,131

    54932  1900,Rupert,M,27
    54933: 1900,Seth,M,27
    54934  1900,Travis,M,27

    56308  1901,Elsa,F,94
    56309: 1901,Rosetta,F,94
    56310  1901,Nola,F,93

    58468  1901,Ruth,M,15
    58469: 1901,Seth,M,15
    58470  1901,Teddy,M,15

    59466  1902,Lily,F,99
    59467: 1902,Rosetta,F,99
    59468  1902,Claudia,F,97

    61978  1902,Santos,M,10
    61979: 1902,Seth,M,10
    61980  1902,Sheldon,M,10

    62851  1903,Mina,F,86
    62852: 1903,Rosetta,F,86
    62853  1903,Alpha,F,85

    64215  1903,Librada,F,6
    64216: 1903,Lisette,F,6
    64217  1903,Lloyd,F,6

    65114  1903,Roman,M,18
    65115: 1903,Seth,M,18
    65116  1903,Shelby,M,18

    66218  1904,Lily,F,105
    66219: 1904,Rosetta,F,105
    66220  1904,Harriett,F,104

    68706  1904,Romeo,M,14
    68707: 1904,Seth,M,14
    68708  1904,Theron,M,14

    69750  1905,Oma,F,133
    69751: 1905,Rosetta,F,133
    69752  1905,Dessie,F,131

    71563  1905,Lisa,F,5
    71564: 1905,Lisette,F,5
    71565  1905,Lodema,F,5

    72284  1905,Rose,M,17
    72285: 1905,Seth,M,17
    72286  1905,Theadore,M,17

    73427  1906,Pearlie,F,118
    73428: 1906,Rosetta,F,118
    73429  1906,Lenore,F,117

    75918  1906,Orlando,M,17
    75919: 1906,Seth,M,17
    75920  1906,Sheldon,M,17

    77063  1907,Lou,F,124
    77064: 1907,Rosetta,F,124
    77065  1907,Zella,F,123

    78989  1907,Lillis,F,5
    78990: 1907,Lisette,F,5
    78991  1907,Lita,F,5

    79701  1907,Oren,M,20
    79702: 1907,Seth,M,20
    79703  1907,Sydney,M,20

    81022  1908,Rosella,F,119
    81023: 1908,Rosetta,F,119
    81024  1908,Christina,F,118

    83710  1908,Ruth,M,20
    83711: 1908,Seth,M,20
    83712  1908,Tracy,M,20

    85030  1909,Rhoda,F,136
    85031: 1909,Rosetta,F,133
    85032  1909,Connie,F,131

    87819  1909,Rose,M,23
    87820: 1909,Seth,M,23
    87821  1909,Verne,M,23

    89234  1910,Pearlie,F,176
    89235: 1910,Rosetta,F,176
    89236  1910,Helena,F,175

    92547  1910,Reynold,M,15
    92548: 1910,Seth,M,15
    92549  1910,Sheldon,M,15

    93868  1911,Maudie,F,176
    93869: 1911,Rosetta,F,176
    93870  1911,Dessie,F,175

    97125  1911,Rose,M,22
    97126: 1911,Seth,M,22
    97127  1911,Sherwood,M,22

    98732  1912,Corinne,F,240
    98733: 1912,Rosetta,F,240
    98734  1912,Lorena,F,238

   101030  1912,Romona,F,7
   101031: 1912,Rosetter,F,7
   101032  1912,Rosielee,F,7

   101260  1912,Lillye,F,6
   101261: 1912,Lisette,F,6
   101262  1912,Lodema,F,6

   101499  1912,Corona,F,5
   101500: 1912,Cosette,F,5
   101501  1912,Cozette,F,5

   102550  1912,Roberto,M,41
   102551: 1912,Seth,M,41
   102552  1912,Abel,M,40

   105107  1913,Imogene,F,227
   105108: 1913,Rosetta,F,227
   105109  1913,Maudie,F,226

   107685  1913,Corona,F,6
   107686: 1913,Cosette,F,6
   107687  1913,Cozette,F,6

   108336  1913,Murriel,F,5
   108337: 1913,Musette,F,5
   108338  1913,Myriam,F,5

   108404  1913,Roselma,F,5
   108405: 1913,Rosette,F,5
   108406  1913,Rosezell,F,5

   109032  1913,Rupert,M,66
   109033: 1913,Seth,M,66
   109034  1913,Merritt,M,65

   112074  1914,Priscilla,F,279
   112075: 1914,Rosetta,F,278
   112076  1914,Aline,F,277

   114527  1914,Lisbeth,F,8
   114528: 1914,Lisette,F,8
   114529  1914,Loa,F,8

   115466  1914,Charlee,F,5
   115467: 1914,Charlesetta,F,5
   115468  1914,Charlyne,F,5

   116582  1914,Santo,M,67
   116583: 1914,Seth,M,67
   116584  1914,Allie,M,66

   120065  1915,Loraine,F,296
   120066: 1915,Rosetta,F,293
   120067  1915,Tessie,F,292

   122291  1915,Cornell,F,11
   122292: 1915,Cosette,F,11
   122293  1915,Courtney,F,11

   122780  1915,Morris,F,9
   122781: 1915,Musette,F,9
   122782  1915,Nadene,F,9

   123100  1915,Roselie,F,8
   123101: 1915,Rosette,F,8
   123102  1915,Rozena,F,8

   123356  1915,Liona,F,7
   123357: 1915,Lisette,F,7
   123358  1915,Lolamae,F,7

   123404  1915,Murry,F,7
   123405: 1915,Musetta,F,7
   123406  1915,Myla,F,7

   124140  1915,Conrada,F,5
   124141: 1915,Consetta,F,5
   124142  1915,Consuela,F,5

   124579  1915,Senia,F,5
   124580: 1915,Setsuko,F,5
   124581  1915,Shelby,F,5

   125339  1915,Prince,M,80
   125340: 1915,Seth,M,80
   125341  1915,Arvid,M,79

   129411  1916,Bettie,F,339
   129412: 1916,Rosetta,F,339
   129413  1916,Katharine,F,336

   132075  1916,Rosanne,F,10
   132076: 1916,Rosette,F,10
   132077  1916,Rozalia,F,10

   132156  1916,Conception,F,9
   132157: 1916,Consetta,F,9
   132158  1916,Corena,F,9

   132806  1916,Johnetta,F,7
   132807: 1916,Josette,F,7
   132808  1916,Joycelyn,F,7

   133606  1916,Chancey,F,5
   133607: 1916,Charlesetta,F,5
   133608  1916,Charlotta,F,5

   134016  1916,Moyra,F,5
   134017: 1916,Musetta,F,5
   134018  1916,Myrt,F,5

   134879  1916,Jonas,M,84
   134880: 1916,Seth,M,84
   134881  1916,Sylvan,M,84

   138641  1916,Rosemond,M,5
   138642: 1916,Rosetta,M,5
   138643  1916,Rosie,M,5

   139098  1917,Gussie,F,364
   139099: 1917,Rosetta,F,362
   139100  1917,Christina,F,361

   141704  1917,Cornie,F,10
   141705: 1917,Cosette,F,10
   141706  1917,Dalia,F,10

   142085  1917,Robertha,F,9
   142086: 1917,Rosette,F,9
   142087  1917,Ross,F,9

   142428  1917,Rosaura,F,8
   142429: 1917,Rosetter,F,8
   142430  1917,Rosey,F,8

   142759  1917,Morris,F,7
   142760: 1917,Musette,F,7
   142761  1917,Myrth,F,7

   142803  1917,Senia,F,7
   142804: 1917,Setsuko,F,7
   142805  1917,Severina,F,7

   143982  1917,Rosezell,F,5
   143983: 1917,Rossetta,F,5
   143984  1917,Roxine,F,5

   144754  1917,Oran,M,81
   144755: 1917,Seth,M,81
   144756  1917,Carey,M,80

   149019  1918,Eliza,F,386
   149020: 1918,Rosetta,F,379
   149021  1918,Margery,F,378

   151186  1918,Saddie,F,14
   151187: 1918,Setsuko,F,14
   151188  1918,Suzanna,F,14

   152162  1918,Rosann,F,9
   152163: 1918,Rosetter,F,9
   152164  1918,Rosezella,F,9

   152249  1918,Chanie,F,8
   152250: 1918,Charlesetta,F,8
   152251  1918,Charley,F,8

   152260  1918,Consuela,F,8
   152261: 1918,Cosette,F,8
   152262  1918,Curlie,F,8

   152449  1918,Musa,F,8
   152450: 1918,Musette,F,8
   152451  1918,Myrel,F,8

   153893  1918,Jordis,F,5
   153894: 1918,Josette,F,5
   153895  1918,Juanda,F,5

   153968  1918,Lus,F,5
   153969: 1918,Lusetta,F,5
   153970  1918,Luta,F,5

   154150  1918,Rosilee,F,5
   154151: 1918,Rossetta,F,5
   154152  1918,Rotha,F,5

   154892  1918,Raphael,M,100
   154893: 1918,Seth,M,100
   154894  1918,Terry,M,100

   158990  1918,Servando,M,5
   158991: 1918,Setsuo,M,5
   158992  1918,Sholom,M,5

   159399  1919,Rhoda,F,420
   159400: 1919,Rosetta,F,418
   159401  1919,Loraine,F,414

   161629  1919,Cecila,F,13
   161630: 1919,Charlesetta,F,13
   161631  1919,Claude,F,13

   162282  1919,Sedonia,F,10
   162283: 1919,Setsuko,F,10
   162284  1919,Shirlie,F,10

   162350  1919,Clotile,F,9
   162351: 1919,Cosette,F,9
   162352  1919,Cosma,F,9

   162479  1919,Morna,F,9
   162480: 1919,Musette,F,9
   162481  1919,Myla,F,9

   163606  1919,Johnna,F,6
   163607: 1919,Josette,F,6
   163608  1919,Julius,F,6

   164056  1919,Coline,F,5
   164057: 1919,Consetta,F,5
   164058  1919,Coraine,F,5

   164261  1919,Josepine,F,5
   164262: 1919,Josetta,F,5
   164263  1919,Juna,F,5

   164312  1919,Liona,F,5
   164313: 1919,Lisetta,F,5
   164314  1919,Loberta,F,5

   164530  1919,Rosenda,F,5
   164531: 1919,Rosetter,F,5
   164532  1919,Roxine,F,5

   165321  1919,Sammy,M,86
   165322: 1919,Seth,M,86
   165323  1919,Cloyd,M,85

   169777  1920,Rhoda,F,421
   169778: 1920,Rosetta,F,418
   169779  1920,Concetta,F,414

   172525  1920,Salvatrice,F,11
   172526: 1920,Setsuko,F,11
   172527  1920,Shelley,F,11

   172736  1920,Monie,F,10
   172737: 1920,Musette,F,10
   172738  1920,Myldred,F,10

   172837  1920,Catherene,F,9
   172838: 1920,Charlesetta,F,9
   172839  1920,Charolette,F,9

   172846  1920,Cloa,F,9
   172847: 1920,Consetta,F,9
   172848  1920,Cordella,F,9

   172850  1920,Correne,F,9
   172851: 1920,Cosette,F,9
   172852  1920,Cuma,F,9

   174115  1920,Josephina,F,6
   174116: 1920,Josette,F,6
   174117  1920,Josey,F,6

   174158  1920,Lisbeth,F,6
   174159: 1920,Lisette,F,6
   174160  1920,Lore,F,6

   174260  1920,Murtis,F,6
   174261: 1920,Musetta,F,6
   174262  1920,Nancey,F,6

   175826  1920,Frankie,M,109
   175827: 1920,Seth,M,109
   175828  1920,Felipe,M,108

   180099  1920,Sergio,M,5
   180100: 1920,Settimio,M,5
   180101  1920,Severn,M,5

   180538  1921,Lenore,F,418
   180539: 1921,Rosetta,F,417
   180540  1921,Berniece,F,416

   183582  1921,Senora,F,10
   183583: 1921,Setsuko,F,10
   183584  1921,Sylvania,F,10

   183801  1921,Mosie,F,9
   183802: 1921,Musette,F,9
   183803  1921,Nanny,F,9

   184302  1921,Celie,F,7
   184303: 1921,Charlesetta,F,7
   184304  1921,Charlette,F,7

   184321  1921,Consepcion,F,7
   184322: 1921,Consetta,F,7
   184323  1921,Cosby,F,7
   184324: 1921,Cosette,F,7
   184325  1921,Cubie,F,7

   185945  1921,Roser,F,5
   185946: 1921,Rosette,F,5
   185947: 1921,Rosetter,F,5
   185948  1921,Roslie,F,5

   186691  1921,Rudy,M,109
   186692: 1921,Seth,M,109
   186693  1921,Taylor,M,109

   191380  1922,Joy,F,447
   191381: 1922,Rosetta,F,445
   191382  1922,Lenore,F,439

   194010  1922,Sedonia,F,12
   194011: 1922,Setsuko,F,12
   194012  1922,Severa,F,12

   194189  1922,Rosene,F,11
   194190: 1922,Rosette,F,11
   194191  1922,Rosy,F,11

   194486  1922,Casmira,F,9
   194487: 1922,Charlesetta,F,9
   194488  1922,Charlette,F,9

   194979  1922,Musa,F,8
   194980: 1922,Musette,F,8
   194981  1922,Myla,F,8

   195994  1922,Rosemae,F,6
   195995: 1922,Rosetter,F,6
   195996  1922,Rosmary,F,6

   196242  1922,Corris,F,5
   196243: 1922,Cosette,F,5
   196244  1922,Cozy,F,5

   197523  1922,Meredith,M,95
   197524: 1922,Seth,M,95
   197525  1922,Eldred,M,94

   202138  1923,Hannah,F,434
   202139: 1923,Rosetta,F,427
   202140  1923,Edythe,F,423

   204712  1923,Rosary,F,12
   204713: 1923,Rosette,F,12
   204714  1923,Rosy,F,12

   205155  1923,Seferina,F,10
   205156: 1923,Setsuko,F,10
   205157  1923,Severa,F,10

   205235  1923,Channie,F,9
   205236: 1923,Charlesetta,F,9
   205237  1923,Charmion,F,9

   205737  1923,Roselene,F,8
   205738: 1923,Rossetta,F,8
   205739  1923,Rotha,F,8

   205885  1923,Corona,F,7
   205886: 1923,Cosette,F,7
   205887  1923,Creta,F,7

   207412  1923,Rosemae,F,5
   207413: 1923,Rosetter,F,5
   207414  1923,Rosezell,F,5

   208228  1923,Raphael,M,94
   208229: 1923,Seth,M,94
   208230  1923,Taylor,M,94

   211831  1923,Angela,M,5
   211832: 1923,Aniseto,M,5
   211833  1923,Annibale,M,5

   212785  1924,Charlene,F,449
   212786: 1924,Rosetta,F,442
   212787  1924,Edythe,F,441

   215115  1924,Senora,F,14
   215116: 1924,Setsuko,F,14
   215117  1924,Severa,F,14

   215467  1924,Charlean,F,11
   215468: 1924,Charlesetta,F,11
   215469  1924,Cherrie,F,11

   216294  1924,Jacquelynn,F,8
   216295: 1924,Jamesetta,F,8
   216296  1924,Jeannett,F,8

   216303  1924,Joana,F,8
   216304: 1924,Josette,F,8
   216305  1924,Kansas,F,8

   216367  1924,Murrel,F,8
   216368: 1924,Musetta,F,8
   216369  1924,Myriam,F,8

   216411  1924,Roselie,F,8
   216412: 1924,Rosette,F,8
   216413  1924,Rubby,F,8

   217699  1924,Cornie,F,5
   217700: 1924,Cosette,F,5
   217701  1924,Cotha,F,5

   218105  1924,Molley,F,5
   218106: 1924,Mosetta,F,5
   218107  1924,Mosie,F,5

   218227  1924,Rosell,F,5
   218228: 1924,Rossetta,F,5
   218229  1924,Rozellia,F,5

   219096  1924,Rowland,M,83
   219097: 1924,Seth,M,83
   219098  1924,Theadore,M,83

   223655  1925,Margery,F,444
   223656: 1925,Rosetta,F,444
   223657  1925,Sybil,F,440

   225272  1925,Sachiko,F,21
   225273: 1925,Setsuko,F,21
   225274  1925,Simonne,F,21

   226758  1925,Cornell,F,9
   226759: 1925,Cosette,F,9
   226760  1925,Cozette,F,9

   227061  1925,Charla,F,8
   227062: 1925,Charlesetta,F,8
   227063  1925,Chiyeko,F,8

   228139  1925,Murle,F,6
   228140: 1925,Musette,F,6
   228141  1925,Myrth,F,6

   228694  1925,Jacquelynne,F,5
   228695: 1925,Jamesetta,F,5
   228696  1925,Jeanice,F,5

   228979  1925,Rosene,F,5
   228980: 1925,Rosette,F,5
   228981  1925,Rosezetta,F,5
   228982  1925,Rosilee,F,5
   228983: 1925,Rossetta,F,5
   228984  1925,Ruba,F,5

   229763  1925,Felton,M,96
   229764: 1925,Seth,M,96
   229765  1925,Daryl,M,95

   233327  1925,Angeline,M,5
   233328: 1925,Aniseto,M,5
   233329  1925,Annias,M,5

   234288  1926,Olivia,F,466
   234289: 1926,Rosetta,F,463
   234290  1926,Lenore,F,461

   236435  1926,Salvatrice,F,15
   236436: 1926,Setsuko,F,15
   236437  1926,Sherley,F,15

   237212  1926,Roselie,F,10
   237213: 1926,Rosette,F,10
   237214  1926,Rufus,F,10

   237370  1926,Izella,F,9
   237371: 1926,Jamesetta,F,9
   237372  1926,Jeanell,F,9

   237777  1926,Murlean,F,8
   237778: 1926,Musetta,F,8
   237779  1926,Nancey,F,8

   237919  1926,Charla,F,7
   237920: 1926,Charlesetta,F,7
   237921  1926,Charmie,F,7

   238544  1926,Jonelle,F,6
   238545: 1926,Josette,F,6
   238546  1926,Josey,F,6

   238960  1926,Connell,F,5
   238961: 1926,Consetta,F,5
   238962  1926,Corabel,F,5

   238967  1926,Corrina,F,5
   238968: 1926,Cosetta,F,5
   238969  1926,Cyntha,F,5

   239270  1926,Lindell,F,5
   239271: 1926,Lisette,F,5
   239272  1926,Lodean,F,5

   239368  1926,Musa,F,5
   239369: 1926,Musette,F,5
   239370  1926,Myla,F,5

   240308  1926,Rayford,M,82
   240309: 1926,Seth,M,82
   240310  1926,Winfield,M,82

   244751  1927,Nannie,F,459
   244752: 1927,Rosetta,F,459
   244753  1927,Rhoda,F,455

   247115  1927,Samella,F,13
   247116: 1927,Setsuko,F,13
   247117  1927,Shelley,F,13

   248365  1927,Cecila,F,7
   248366: 1927,Charlesetta,F,7
   248367  1927,Chelsea,F,7

   249928  1927,Roser,F,5
   249929: 1927,Rossetta,F,5
   249930  1927,Roxane,F,5

   250850  1927,Reynaldo,M,68
   250851: 1927,Seth,M,68
   250852  1927,Williams,M,68

   254170  1927,Rosemarie,M,6
   254171: 1927,Rosetta,M,6
   254172  1927,Royston,M,6

   255170  1928,Sybil,F,419
   255171: 1928,Rosetta,F,417
   255172  1928,Lenore,F,415

   256127  1928,Robin,F,36
   256128: 1928,Setsuko,F,36
   256129  1928,Stanley,F,36

   257819  1928,Charlena,F,10
   257820: 1928,Charlesetta,F,10
   257821  1928,Charmian,F,10

   258244  1928,Roselind,F,9
   258245: 1928,Rosette,F,9
   258246  1928,Roxana,F,9

   258440  1928,Josephina,F,8
   258441: 1928,Josette,F,8
   258442  1928,Julaine,F,8

   258971  1928,Rosene,F,7
   258972: 1928,Rosetter,F,7
   258973  1928,Rubell,F,7

   259698  1928,Conchetta,F,5
   259699: 1928,Consetta,F,5
   259700  1928,Constancia,F,5

   259952  1928,Linna,F,5
   259953: 1928,Lisette,F,5
   259954  1928,Litha,F,5

   260172  1928,Senia,F,5
   260173: 1928,Seta,F,5
   260174  1928,Seymour,F,5

   261029  1928,Reynold,M,74
   261030: 1928,Seth,M,74
   261031  1928,Waymon,M,74

   265321  1929,Lupe,F,427
   265322: 1929,Rosetta,F,422
   265323  1929,Elnora,F,415

   266637  1929,Reather,F,24
   266638: 1929,Setsuko,F,24
   266639  1929,Sharlene,F,24

   267603  1929,Cathryne,F,12
   267604: 1929,Charlesetta,F,12
   267605  1929,Charlette,F,12

   267713  1929,Rosary,F,12
   267714: 1929,Rosette,F,12
   267715  1929,Rudy,F,12

   269324  1929,Joey,F,6
   269325: 1929,Josette,F,6
   269326  1929,Julieta,F,6

   269432  1929,Murry,F,6
   269433: 1929,Musetta,F,6
   269434  1929,Myrene,F,6

   271088  1929,Ruby,M,64
   271089: 1929,Seth,M,64
   271090  1929,Theadore,M,64

   275140  1930,Robert,F,425
   275141: 1930,Rosetta,F,421
   275142  1930,James,F,419

   276681  1930,Reina,F,20
   276682: 1930,Setsuko,F,20
   276683  1930,Theodore,F,20

   278428  1930,Rosenda,F,8
   278429: 1930,Rosette,F,8
   278430  1930,Rovena,F,8

   279108  1930,Josephene,F,6
   279109: 1930,Josette,F,6
   279110  1930,Joylene,F,6

   279476  1930,Celsa,F,5
   279477: 1930,Charlesetta,F,5
   279478  1930,Charmayne,F,5

   279708  1930,Jonette,F,5
   279709: 1930,Josetta,F,5
   279710  1930,Joslyn,F,5

   280972  1930,Pierce,M,55
   280973: 1930,Seth,M,55
   280974  1930,Beryl,M,54

   284939  1931,Neva,F,369
   284940: 1931,Rosetta,F,369
   284941  1931,Carmela,F,363

   286279  1931,Russell,F,22
   286280: 1931,Setsuko,F,22
   286281  1931,Sharron,F,22

   287271  1931,Joana,F,11
   287272: 1931,Josette,F,11
   287273  1931,Juanice,F,11

   288704  1931,Jalaine,F,6
   288705: 1931,Jamesetta,F,6
   288706  1931,Janene,F,6

   289468  1931,Rosalinda,F,5
   289469: 1931,Rosette,F,5
   289470  1931,Rosezetta,F,5

   290436  1931,Parker,M,56
   290437: 1931,Seth,M,56
   290438  1931,Val,M,56

   293811  1931,Rosalie,M,5
   293812: 1931,Rosetta,M,5
   293813  1931,Rozell,M,5

   294218  1932,Olivia,F,399
   294219: 1932,Rosetta,F,399
   294220  1932,Elnora,F,398

   295711  1932,Sallyann,F,20
   295712: 1932,Setsuko,F,20
   295713  1932,Tennie,F,20

   296702  1932,Rolande,F,11
   296703: 1932,Rosette,F,11
   296704  1932,Roxana,F,11

   297219  1932,Carrine,F,8
   297220: 1932,Charlesetta,F,8
   297221  1932,Charlyn,F,8

   297540  1932,Columbia,F,7
   297541: 1932,Cosette,F,7
   297542  1932,Creasie,F,7

   297643  1932,Joen,F,7
   297644: 1932,Josette,F,7
   297645  1932,Julaine,F,7

   297888  1932,Connee,F,6
   297889: 1932,Consetta,F,6
   297890  1932,Constancia,F,6

   298030  1932,Jacquelynne,F,6
   298031: 1932,Jamesetta,F,6
   298032  1932,Janeane,F,6

   298178  1932,Murtis,F,6
   298179: 1932,Musette,F,6
   298180  1932,Myron,F,6

   299784  1932,Rosario,M,66
   299785: 1932,Seth,M,66
   299786  1932,Chauncey,M,65

   303195  1932,Ronaldo,M,5
   303196: 1932,Rosetta,M,5
   303197  1932,Rosevell,M,5

   303600  1933,Olive,F,387
   303601: 1933,Rosetta,F,382
   303602  1933,Goldie,F,380

   305544  1933,Samella,F,14
   305545: 1933,Setsuko,F,14
   305546  1933,Theresia,F,14

   305569  1933,Carnell,F,13
   305570: 1933,Charlesetta,F,13
   305571  1933,Christie,F,13

   307818  1933,Joselyn,F,5
   307819: 1933,Josette,F,5
   307820  1933,Joyzelle,F,5

   308868  1933,Rubin,M,70
   308869: 1933,Seth,M,70
   308870  1933,Valentine,M,70

   312605  1934,Arline,F,408
   312606: 1934,Rosetta,F,400
   312607  1934,Helene,F,397

   314002  1934,Carlyn,F,20
   314003: 1934,Charlesetta,F,20
   314004  1934,Cindy,F,20

   314371  1934,Senora,F,16
   314372: 1934,Setsuko,F,16
   314373  1934,Solveig,F,16

   316444  1934,Monty,F,6
   316445: 1934,Mosetta,F,6
   316446  1934,Myrline,F,6

   316509  1934,Roselea,F,6
   316510: 1934,Rosette,F,6
   316511: 1934,Rossetta,F,6
   316512  1934,Rozelle,F,6

   317994  1934,Lawerence,M,71
   317995: 1934,Seth,M,71
   317996  1934,Walker,M,71

   320187  1934,Rosemary,M,8
   320188: 1934,Rosetta,M,8
   320189  1934,Rowe,M,8

   321744  1935,Lou,F,521
   321745: 1935,Rosetta,F,516
   321746  1935,Ora,F,502

   323412  1935,Cecily,F,17
   323413: 1935,Charlesetta,F,17
   323414  1935,Cherrie,F,17

   323670  1935,Sena,F,15
   323671: 1935,Setsuko,F,15
   323672  1935,Sharyn,F,15

   324250  1935,Correne,F,10
   324251: 1935,Cosette,F,10
   324252  1935,Davida,F,10

   324599  1935,Rosana,F,9
   324600: 1935,Rosette,F,9
   324601  1935,Rosey,F,9

   325986  1935,Jacquita,F,5
   325987: 1935,Jamesetta,F,5
   325988  1935,Jaye,F,5

   327208  1935,Myles,M,56
   327209: 1935,Seth,M,56
   327210  1935,Winfield,M,56

   330781  1936,Lou,F,506
   330782: 1936,Rosetta,F,502
   330783  1936,Freda,F,495

   332561  1936,Celina,F,15
   332562: 1936,Charlesetta,F,15
   332563  1936,Claude,F,15

   333337  1936,Santina,F,10
   333338: 1936,Setsuko,F,10
   333339  1936,Sherril,F,10

   334051  1936,Joselyn,F,7
   334052: 1936,Josette,F,7
   334053  1936,Josphine,F,7

   334598  1936,Ross,F,6
   334599: 1936,Rossetta,F,6
   334600  1936,Rozelia,F,6

   335008  1936,Jackquline,F,5
   335009: 1936,Jamesetta,F,5
   335010  1936,Janas,F,5

   336215  1936,Jonas,M,52
   336216: 1936,Seth,M,52
   336217  1936,Edd,M,51

   338845  1936,Rondle,M,6
   338846: 1936,Rosetta,M,6
   338847  1936,Roxie,M,6

   339684  1937,Imogene,F,492
   339685: 1937,Rosetta,F,485
   339686  1937,Cecelia,F,474

   341045  1937,Charla,F,22
   341046: 1937,Charlesetta,F,22
   341047  1937,Cleola,F,22

   342915  1937,Corlene,F,7
   342916: 1937,Cosette,F,7
   342917  1937,Cresencia,F,7

   343018  1937,Jonette,F,7
   343019: 1937,Josetta,F,7
   343020  1937,Joyceann,F,7

   343583  1937,Rosenda,F,6
   343584: 1937,Rosette,F,6
   343585  1937,Rosezetta,F,6

   343600  1937,Selvia,F,6
   343601: 1937,Setsuko,F,6
   343602  1937,Sharion,F,6

   345129  1937,Romeo,M,60
   345130: 1937,Seth,M,60
   345131  1937,Theadore,M,60

   346967  1937,Rosaire,M,9
   346968: 1937,Rosetta,M,9
   346969  1937,Rosie,M,9

   348627  1938,Cecelia,F,514
   348628: 1938,Rosetta,F,511
   348629  1938,Jimmie,F,509

   349428  1938,Jocelyn,F,44
   349429: 1938,Josette,F,44
   349430  1938,Juliann,F,44

   350057  1938,Belen,F,21
   350058: 1938,Charlesetta,F,21
   350059  1938,Claudene,F,21

   350622  1938,Hollis,F,14
   350623: 1938,Jamesetta,F,14
   350624  1938,Joanie,F,14

   351761  1938,Roselia,F,8
   351762: 1938,Rosette,F,8
   351763  1938,Rosezella,F,8

   352138  1938,Rosey,F,7
   352139: 1938,Rossetta,F,7
   352140  1938,Rosy,F,7

   352424  1938,Josepha,F,6
   352425: 1938,Josetta,F,6
   352426  1938,Joyceann,F,6

   352623  1938,Seretha,F,6
   352624: 1938,Setsuko,F,6
   352625  1938,Shaaron,F,6

   353227  1938,Roselynn,F,5
   353228: 1938,Rosettia,F,5
   353229  1938,Rosilyn,F,5

   354102  1938,Margaret,M,65
   354103: 1938,Seth,M,65
   354104  1938,Damon,M,64

   356220  1938,Andrea,M,7
   356221: 1938,Aniseto,M,7
   356222  1938,Ardith,M,7

   357662  1939,Lila,F,482
   357663: 1939,Rosetta,F,479
   357664  1939,Lee,F,477

   358395  1939,Jettie,F,49
   358396: 1939,Josette,F,49
   358397  1939,Katrina,F,49

   359512  1939,Caron,F,15
   359513: 1939,Charlesetta,F,15
   359514  1939,Claretha,F,15

   360965  1939,Izella,F,7
   360966: 1939,Jamesetta,F,7
   360967  1939,Janas,F,7

   360982  1939,Josephina,F,7
   360983: 1939,Josetta,F,7
   360984  1939,Jude,F,7

   361541  1939,Rosalin,F,6
   361542: 1939,Rosette,F,6
   361543  1939,Rosezella,F,6

   361752  1939,Corliss,F,5
   361753: 1939,Cosette,F,5
   361754  1939,Cris,F,5

   362120  1939,Moses,F,5
   362121: 1939,Mosetta,F,5
   362122  1939,Moya,F,5

   362124  1939,Murrell,F,5
   362125: 1939,Musette,F,5
   362126  1939,Nann,F,5

   363110  1939,Ronal,M,61
   363111: 1939,Seth,M,61
   363112  1939,Willian,M,61

   366589  1940,Deborah,F,469
   366590: 1940,Rosetta,F,464
   366591  1940,Glenna,F,463

   367937  1940,Ardyth,F,23
   367938: 1940,Charlesetta,F,23
   367939  1940,Claretha,F,23

   368297  1940,Jimmye,F,17
   368298: 1940,Josette,F,17
   368299  1940,Juan,F,17

   368781  1940,Jacquetta,F,12
   368782: 1940,Jamesetta,F,12
   368783  1940,Jerelene,F,12

   370501  1940,Montie,F,6
   370502: 1940,Mosetta,F,6
   370503  1940,Murry,F,6

   371036  1940,Lise,F,5
   371037: 1940,Lisette,F,5
   371038  1940,Llewellyn,F,5

   372159  1940,Randell,M,57
   372160: 1940,Seth,M,57
   372161  1940,Waldo,M,57

   375570  1941,Polly,F,435
   375571: 1941,Rosetta,F,435
   375572  1941,Nettie,F,434

   376382  1941,Helaine,F,44
   376383: 1941,Josette,F,44
   376384  1941,Linnea,F,44

   376872  1941,Carolynne,F,24
   376873: 1941,Charlesetta,F,24
   376874  1941,Classie,F,24

   378188  1941,Jacquetta,F,10
   378189: 1941,Jamesetta,F,10
   378190  1941,Jeaneen,F,10

   378460  1941,Rosaura,F,9
   378461: 1941,Rosette,F,9
   378462  1941,Rosine,F,9

   380238  1941,Selvia,F,5
   380239: 1941,Setsuko,F,5
   380240  1941,Shane,F,5

   381086  1941,Pierre,M,70
   381087: 1941,Seth,M,70
   381088  1941,Arlan,M,69

   384655  1942,Margo,F,487
   384656: 1942,Rosetta,F,487
   384657  1942,Rochelle,F,486

   385421  1942,Johnny,F,53
   385422: 1942,Josette,F,53
   385423  1942,Julianna,F,53

   385938  1942,Celine,F,27
   385939: 1942,Charlesetta,F,27
   385940  1942,Cheryle,F,27

   387640  1942,Jacqulin,F,9
   387641: 1942,Jamesetta,F,9
   387642  1942,Janella,F,9

   387671  1942,Lin,F,9
   387672: 1942,Lisette,F,9
   387673  1942,Llewellyn,F,9

   389311  1942,Josephina,F,5
   389312: 1942,Josetta,F,5
   389313  1942,Joyice,F,5

   389494  1942,Mose,F,5
   389495: 1942,Musette,F,5
   389496  1942,Myria,F,5

   390432  1942,Jacky,M,82
   390433: 1942,Seth,M,82
   390434  1942,Winford,M,82

   394106  1943,Margo,F,441
   394107: 1943,Rosetta,F,441
   394108  1943,Winifred,F,438

   395610  1943,Carlyon,F,22
   395611: 1943,Charlesetta,F,22
   395612  1943,Claris,F,22

   395691  1943,Jone,F,21
   395692: 1943,Josette,F,21
   395693  1943,Leonia,F,21

   396061  1943,Irine,F,16
   396062: 1943,Jamesetta,F,16
   396063  1943,Jannet,F,16

   396593  1943,Rosana,F,12
   396594: 1943,Rosette,F,12
   396595  1943,Roxane,F,12

   396935  1943,Liana,F,10
   396936: 1943,Lisette,F,10
   396937  1943,Lissa,F,10

   397228  1943,Stanlee,F,9
   397229: 1943,Susette,F,9
   397230  1943,Sybile,F,9

   397325  1943,Coretta,F,8
   397326: 1943,Cosette,F,8
   397327  1943,Dara,F,8

   397410  1943,Josephina,F,8
   397411: 1943,Josetta,F,8
   397412  1943,Joslyn,F,8

   399834  1943,Regis,M,84
   399835: 1943,Seth,M,84
   399836  1943,Taylor,M,84

   403480  1944,Amelia,F,475
   403481: 1944,Rosetta,F,475
   403482  1944,Muriel,F,472

   404647  1944,Josefa,F,31
   404648: 1944,Josette,F,31
   404649  1944,Kenna,F,31

   404752  1944,Bettylou,F,27
   404753: 1944,Charlesetta,F,27
   404754  1944,Charyl,F,27

   405623  1944,Jacqualyn,F,14
   405624: 1944,Jamesetta,F,14
   405625  1944,Jearlean,F,14

   406805  1944,Rosebud,F,8
   406806: 1944,Rosette,F,8
   406807  1944,Rosey,F,8

   407667  1944,Sarina,F,6
   407668: 1944,Setsuko,F,6
   407669  1944,Shan,F,6

   407692  1944,Susane,F,6
   407693: 1944,Susette,F,6
   407694  1944,Tani,F,6

   409206  1944,Rollin,M,64
   409207: 1944,Seth,M,64
   409208  1944,Donovan,M,63

   412672  1945,Gay,F,394
   412673: 1945,Rosetta,F,394
   412674  1945,Jimmie,F,390

   413606  1945,Carylon,F,39
   413607: 1945,Charlesetta,F,39
   413608  1945,Charlette,F,39

   414045  1945,Joel,F,24
   414046: 1945,Josette,F,24
   414047  1945,Kae,F,24

   415141  1945,Jacqulin,F,11
   415142: 1945,Jamesetta,F,11
   415143  1945,Jamey,F,11

   415512  1945,Correne,F,9
   415513: 1945,Cosette,F,9
   415514  1945,Cozette,F,9

   415586  1945,Jonny,F,9
   415587: 1945,Josetta,F,9
   415588  1945,Juanell,F,9

   415875  1945,Linnette,F,8
   415876: 1945,Lisette,F,8
   415877  1945,Lissie,F,8

   416776  1945,Roselene,F,6
   416777: 1945,Rosette,F,6
   416778  1945,Rosezetta,F,6

   417471  1945,Senie,F,5
   417472: 1945,Setsuko,F,5
   417473  1945,Sharell,F,5

   418266  1945,Rayford,M,77
   418267: 1945,Seth,M,77
   418268  1945,Bart,M,76

   421704  1946,April,F,459
   421705: 1946,Rosetta,F,458
   421706  1946,Lynette,F,457

   422735  1946,Josefa,F,40
   422736: 1946,Josette,F,40
   422737  1946,Leone,F,40

   422907  1946,Suanne,F,33
   422908: 1946,Susette,F,33
   422909  1946,Velvet,F,33

   423082  1946,Carolynne,F,27
   423083: 1946,Charlesetta,F,27
   423084  1946,Claretha,F,27

   424458  1946,Jacklin,F,11
   424459: 1946,Jamesetta,F,11
   424460  1946,Janina,F,11

   424488  1946,Lise,F,11
   424489: 1946,Lisette,F,11
   424490  1946,Lonita,F,11

   424617  1946,Corita,F,10
   424618: 1946,Cosette,F,10
   424619  1946,Cozette,F,10

   424883  1946,Jonatha,F,9
   424884: 1946,Josetta,F,9
   424885  1946,Judeth,F,9

   427721  1946,Lyman,M,90
   427722: 1946,Seth,M,90
   427723  1946,Carrol,M,89

   431404  1947,Melanie,F,520
   431405: 1947,Rosetta,F,518
   431406  1947,Candy,F,515

   432217  1947,Hortencia,F,60
   432218: 1947,Josette,F,60
   432219  1947,Louann,F,60

   432664  1947,Bonna,F,35
   432665: 1947,Charlesetta,F,35
   432666  1947,Cristine,F,35

   432992  1947,Sonjia,F,26
   432993: 1947,Susette,F,26
   432994  1947,Vanita,F,26

   434018  1947,Jacky,F,13
   434019: 1947,Jamesetta,F,13
   434020  1947,Janee,F,13

   434548  1947,Corlis,F,10
   434549: 1947,Cosette,F,10
   434550  1947,Coy,F,10

   435250  1947,Linden,F,8
   435251: 1947,Lisette,F,8
   435252  1947,Loetta,F,8

   435601  1947,Joretta,F,7
   435602: 1947,Josetta,F,7
   435603  1947,Jovanna,F,7

   437027  1947,Rosenda,F,5
   437028: 1947,Rosette,F,5
   437029  1947,Roshell,F,5

   437879  1947,Les,M,91
   437880: 1947,Seth,M,91
   437881  1947,Columbus,M,90

   441748  1948,Patti,F,579
   441749: 1948,Rosetta,F,578
   441750  1948,Tina,F,578

   442637  1948,Jann,F,56
   442638: 1948,Josette,F,56
   442639  1948,Karyl,F,56

   443028  1948,Cary,F,34
   443029: 1948,Charlesetta,F,34
   443030  1948,Coreen,F,34

   443833  1948,Suann,F,18
   443834: 1948,Susette,F,18
   443835  1948,Teddie,F,18

   443963  1948,Jacquetta,F,16
   443964: 1948,Jamesetta,F,16
   443965  1948,Jannis,F,16

   444077  1948,Lera,F,15
   444078: 1948,Lisette,F,15
   444079  1948,Loann,F,15

   444369  1948,Rina,F,13
   444370: 1948,Rosette,F,13
   444371  1948,Rosey,F,13

   445465  1948,Josepha,F,8
   445466: 1948,Josetta,F,8
   445467  1948,Joya,F,8

   446199  1948,Corrina,F,6
   446200: 1948,Cosette,F,6
   446201  1948,Cozy,F,6

   447109  1948,Louan,F,5
   447110: 1948,Louisette,F,5
   447111  1948,Loula,F,5

   447205  1948,Mitzy,F,5
   447206: 1948,Mosetta,F,5
   447207  1948,Moya,F,5

   448141  1948,Nicky,M,99
   448142: 1948,Seth,M,99
   448143  1948,Mckinley,M,98

   451992  1949,Claudette,F,552
   451993: 1949,Rosetta,F,550
   451994  1949,Erma,F,547

   452874  1949,Joseph,F,56
   452875: 1949,Josette,F,56
   452876  1949,Karyl,F,56

   453549  1949,Catheryn,F,26
   453550: 1949,Charlesetta,F,26
   453551  1949,Charlsie,F,26

   453574  1949,Sherrel,F,26
   453575: 1949,Susette,F,26
   453576  1949,Tommy,F,26

   454219  1949,Jama,F,16
   454220: 1949,Jamesetta,F,16
   454221  1949,Janean,F,16

   454414  1949,Corrinne,F,14
   454415: 1949,Cosette,F,14
   454416  1949,Curley,F,14

   455709  1949,Jolane,F,8
   455710: 1949,Josetta,F,8
   455711  1949,Josiephine,F,8

   455744  1949,Linnell,F,8
   455745: 1949,Lisette,F,8
   455746  1949,Littie,F,8

   456245  1949,Roseline,F,7
   456246: 1949,Rosette,F,7
   456247  1949,Rosezetta,F,7

   456740  1949,Mora,F,6
   456741: 1949,Mosetta,F,6
   456742  1949,Murray,F,6

   457047  1949,Corraine,F,5
   457048: 1949,Cosetta,F,5
   457049  1949,Cressie,F,5

   458293  1949,Brett,M,140
   458294: 1949,Seth,M,140
   458295  1949,Eduardo,M,139

   462282  1950,Amelia,F,483
   462283: 1950,Rosetta,F,483
   462284  1950,Gay,F,482

   463342  1950,Jennette,F,42
   463343: 1950,Josette,F,42
   463344  1950,Lanita,F,42

   463712  1950,Renay,F,29
   463713: 1950,Susette,F,29
   463714  1950,Tamera,F,29

   463845  1950,Chana,F,25
   463846: 1950,Charlesetta,F,25
   463847  1950,Darlena,F,25

   463947  1950,Jackqueline,F,23
   463948: 1950,Jamesetta,F,23
   463949  1950,Jerline,F,23

   464542  1950,Lilli,F,16
   464543: 1950,Lisette,F,16
   464544  1950,Lyndal,F,16

   464891  1950,Johanne,F,13
   464892: 1950,Josetta,F,13
   464893  1950,Judee,F,13

   466180  1950,Roselinda,F,8
   466181: 1950,Rosette,F,8
   466182  1950,Rosey,F,8

   467037  1950,Monia,F,6
   467038: 1950,Mosetta,F,6
   467039  1950,Murlean,F,6

   467373  1950,Cornell,F,5
   467374: 1950,Cosette,F,5
   467375  1950,Cottie,F,5

   468630  1950,Santiago,M,132
   468631: 1950,Seth,M,132
   468632  1950,Winfred,M,132

   472618  1951,Fannie,F,453
   472619: 1951,Rosetta,F,449
   472620  1951,Henrietta,F,446

   473502  1951,Charity,F,54
   473503: 1951,Josette,F,54
   473504  1951,Karyl,F,54

   473838  1951,Sueann,F,36
   473839: 1951,Susette,F,36
   473840  1951,Tania,F,36

   474125  1951,Carolin,F,27
   474126: 1951,Charlesetta,F,27
   474127  1951,Danita,F,27

   474578  1951,Jacolyn,F,19
   474579: 1951,Jamesetta,F,19
   474580  1951,Jannice,F,19

   474907  1951,Rikki,F,16
   474908: 1951,Rosette,F,16
   474909  1951,Senora,F,16

   474991  1951,Linder,F,15
   474992: 1951,Lisette,F,15
   474993  1951,Lovetta,F,15

   475549  1951,Corinna,F,11
   475550: 1951,Cosette,F,11
   475551  1951,Coy,F,11

   477348  1951,Jonny,F,6
   477349: 1951,Josetta,F,6
   477350  1951,Joya,F,6

   478208  1951,Moreen,F,5
   478209: 1951,Mosetta,F,5
   478210  1951,Murray,F,5
   478211: 1951,Musette,F,5
   478212  1951,Muzette,F,5

   479096  1951,Gearld,M,118
   479097: 1951,Seth,M,118
   479098  1951,Stevan,M,118

   483090  1952,Kristin,F,439
   483091: 1952,Rosetta,F,435
   483092  1952,Jeannine,F,434

   484038  1952,Eloisa,F,52
   484039: 1952,Josette,F,52
   484040  1952,Kelley,F,52

   484165  1952,Charlean,F,43
   484166: 1952,Charlesetta,F,43
   484167  1952,Charmayne,F,43

   484227  1952,Penney,F,40
   484228: 1952,Susette,F,40
   484229  1952,Tressa,F,40

   485429  1952,Lindell,F,16
   485430: 1952,Lisette,F,16
   485431  1952,Loise,F,16

   485469  1952,Rosaura,F,16
   485470: 1952,Rosette,F,16
   485471  1952,Salina,F,16

   485629  1952,Cornell,F,14
   485630: 1952,Cosette,F,14
   485631  1952,Cozette,F,14

   485667  1952,Jade,F,14
   485668: 1952,Jamesetta,F,14
   485669  1952,Jayna,F,14

   486150  1952,Josephina,F,11
   486151: 1952,Josetta,F,11
   486152  1952,Jossie,F,11

   489705  1952,Quentin,M,131
   489706: 1952,Seth,M,129
   489707  1952,Arlen,M,128

   492846  1952,Ance,M,5
   492847: 1952,Aniseto,M,5
   492848  1952,Annette,M,5

   493781  1953,Christie,F,407
   493782: 1953,Rosetta,F,407
   493783  1953,Robbie,F,406

   494540  1953,Felice,F,66
   494541: 1953,Josette,F,66
   494542  1953,Leatha,F,66

   495001  1953,Celina,F,36
   495002: 1953,Charlesetta,F,36
   495003  1953,Dalene,F,36

   495168  1953,Stacia,F,31
   495169: 1953,Susette,F,31
   495170  1953,Suzie,F,31

   495680  1953,Leroy,F,21
   495681: 1953,Lisette,F,21
   495682  1953,Lorain,F,21

   495881  1953,Corene,F,18
   495882: 1953,Cosette,F,18
   495883  1953,Deane,F,18

   496348  1953,Jalene,F,14
   496349: 1953,Jamesetta,F,14
   496350  1953,Janeice,F,14

   497523  1953,Rosary,F,9
   497524: 1953,Rosette,F,9
   497525  1953,Rosslyn,F,9

   497738  1953,Josepha,F,8
   497739: 1953,Josetta,F,8
   497740  1953,Joycie,F,8

   500379  1953,Damon,M,175
   500380: 1953,Seth,M,174
   500381  1953,Thurman,M,174

   504631  1954,Roxann,F,381
   504632: 1954,Rosetta,F,379
   504633  1954,Colette,F,378

   505427  1954,Dori,F,63
   505428: 1954,Josette,F,63
   505429  1954,Lonna,F,63

   505779  1954,Sherre,F,41
   505780: 1954,Susette,F,41
   505781  1954,Vernetta,F,41

   506145  1954,Lin,F,29
   506146: 1954,Lisette,F,29
   506147  1954,Liz,F,29

   506259  1954,Charissa,F,26
   506260: 1954,Charlesetta,F,26
   506261  1954,Christena,F,26

   506632  1954,Colene,F,20
   506633: 1954,Cosette,F,20
   506634  1954,Creola,F,20

   507394  1954,Jacky,F,13
   507395: 1954,Jamesetta,F,13
   507396  1954,Janece,F,13

   508617  1954,Joscelyn,F,8
   508618: 1954,Josetta,F,8
   508619  1954,Joycelynn,F,8

   508750  1954,Rosemond,F,8
   508751: 1954,Rosette,F,8
   508752  1954,Rosilyn,F,8

   510523  1954,Morris,F,5
   510524: 1954,Mosetta,F,5
   510525  1954,Mry,F,5

   511279  1954,Reynaldo,M,219
   511280: 1954,Seth,M,218
   511281  1954,Dannie,M,217

   514622  1954,Anacleto,M,5
   514623: 1954,Aniseto,M,5
   514624  1954,Anjel,M,5

   515625  1955,Lila,F,355
   515626: 1955,Rosetta,F,355
   515627  1955,Kaye,F,347

   516469  1955,Jeane,F,58
   516470: 1955,Josette,F,58
   516471  1955,Juli,F,58

   516784  1955,Casandra,F,39
   516785: 1955,Charlesetta,F,39
   516786  1955,Cristi,F,39

   517338  1955,Leeanne,F,25
   517339: 1955,Lisette,F,25
   517340  1955,Magda,F,25

   517472  1955,Siri,F,23
   517473: 1955,Susette,F,23
   517474  1955,Tama,F,23

   517719  1955,Gwynn,F,19
   517720: 1955,Jamesetta,F,19
   517721  1955,Janina,F,19

   517958  1955,Rory,F,17
   517959: 1955,Rosette,F,17
   517960  1955,Roylene,F,17

   518386  1955,Coretta,F,13
   518387: 1955,Cosette,F,13
   518388  1955,Cozetta,F,13

   519350  1955,Joreen,F,9
   519351: 1955,Josetta,F,9
   519352  1955,Joyann,F,9

   520791  1955,Mollye,F,6
   520792: 1955,Mosetta,F,6
   520793  1955,Murriel,F,6

   522371  1955,Abel,M,215
   522372: 1955,Seth,M,215
   522373  1955,Loyd,M,212

   526733  1956,Sondra,F,384
   526734: 1956,Rosetta,F,383
   526735  1956,Lea,F,382

   527609  1956,Ivory,F,59
   527610: 1956,Josette,F,59
   527611  1956,Karren,F,59

   527759  1956,Rozanne,F,51
   527760: 1956,Susette,F,51
   527761  1956,Wendie,F,51

   528139  1956,Jonie,F,33
   528140: 1956,Lisette,F,33
   528141  1956,Lupita,F,33

   528367  1956,Charlean,F,27
   528368: 1956,Charlesetta,F,27
   528369  1956,Christiane,F,27

   529115  1956,Griselda,F,17
   529116: 1956,Jamesetta,F,17
   529117  1956,Jannine,F,17

   529625  1956,Coralie,F,13
   529626: 1956,Cosette,F,13
   529627  1956,Cynithia,F,13

   530366  1956,Rosalita,F,10
   530367: 1956,Rosette,F,10
   530368  1956,Rue,F,10

   530790  1956,Cornella,F,8
   530791: 1956,Cosetta,F,8
   530792  1956,Cyntha,F,8

   531424  1956,Mora,F,7
   531425: 1956,Mosetta,F,7
   531426  1956,Murray,F,7

   531840  1956,Jori,F,6
   531841: 1956,Josetta,F,6
   531842  1956,Jossie,F,6

   531912  1956,Linnet,F,6
   531913: 1956,Lissette,F,6
   531914  1956,Littie,F,6

   532968  1956,Rosmarie,F,5
   532969: 1956,Rossetta,F,5
   532970  1956,Rossie,F,5

   533629  1956,Bryant,M,247
   533630: 1956,Seth,M,247
   533631  1956,Stan,M,246

   538137  1957,Daphne,F,313
   538138: 1957,Rosetta,F,313
   538139  1957,Sharlene,F,312

   539076  1957,Johnny,F,52
   539077: 1957,Josette,F,52
   539078  1957,Lanell,F,52

   539458  1957,Shawnee,F,35
   539459: 1957,Susette,F,35
   539460  1957,Teresita,F,35

   539633  1957,Letty,F,29
   539634: 1957,Lisette,F,29
   539635  1957,Lizette,F,29

   539662  1957,Bess,F,28
   539663: 1957,Charlesetta,F,28
   539664  1957,Charlyn,F,28

   540033  1957,Hortense,F,22
   540034: 1957,Jamesetta,F,22
   540035  1957,Jannett,F,22

   540772  1957,Clarita,F,14
   540773: 1957,Cosette,F,14
   540774  1957,Cynitha,F,14

   540808  1957,Joli,F,14
   540809: 1957,Josetta,F,14
   540810  1957,Jyl,F,14

   542071  1957,Roseline,F,9
   542072: 1957,Rosette,F,9
   542073  1957,Rosi,F,9

   542193  1957,Cornell,F,8
   542194: 1957,Cosetta,F,8
   542195  1957,Crissie,F,8

   545092  1957,Damon,M,261
   545093: 1957,Seth,M,260
   545094  1957,Christophe,M,259

   549707  1958,Kerri,F,312
   549708: 1958,Rosetta,F,312
   549709  1958,Danita,F,311

   550421  1958,Imogene,F,71
   550422: 1958,Josette,F,71
   550423  1958,Monika,F,71

   550824  1958,Keith,F,42
   550825: 1958,Lisette,F,42
   550826  1958,Lizette,F,42

   551272  1958,Suann,F,29
   551273: 1958,Susette,F,29
   551274  1958,Twilla,F,29

   551486  1958,Cecil,F,24
   551487: 1958,Charlesetta,F,24
   551488  1958,Christin,F,24

   552060  1958,Inger,F,17
   552061: 1958,Jamesetta,F,17
   552062  1958,Jamye,F,17

   552276  1958,Conny,F,15
   552277: 1958,Cosette,F,15
   552278  1958,Cristal,F,15

   552352  1958,Ronetta,F,15
   552353: 1958,Rosette,F,15
   552354  1958,Rosiland,F,15

   552628  1958,Lindia,F,13
   552629: 1958,Lissette,F,13
   552630  1958,Loray,F,13

   556621  1958,Dino,M,315
   556622: 1958,Seth,M,315
   556623  1958,Dirk,M,314

   561241  1959,Krista,F,302
   561242: 1959,Rosetta,F,302
   561243  1959,Melodie,F,301

   562103  1959,Iona,F,57
   562104: 1959,Josette,F,57
   562105  1959,Karren,F,57

   562354  1959,Candyce,F,43
   562355: 1959,Charlesetta,F,43
   562356  1959,Darlena,F,43

   562519  1959,Lavina,F,37
   562520: 1959,Lisette,F,37
   562521  1959,Lupita,F,37

   562961  1959,Shona,F,26
   562962: 1959,Susette,F,26
   562963  1959,Susy,F,26

   563476  1959,Jamee,F,18
   563477: 1959,Jamesetta,F,18
   563478  1959,Janan,F,18

   564262  1959,Rosaleen,F,13
   564263: 1959,Rosette,F,13
   564264  1959,Rozetta,F,13

   564759  1959,Correen,F,10
   564760: 1959,Cosette,F,10
   564761  1959,Dacia,F,10

   565165  1959,Lilla,F,9
   565166: 1959,Lissette,F,9
   565167  1959,Loanne,F,9

   566555  1959,Joretha,F,6
   566556: 1959,Josetta,F,6
   566557  1959,Judene,F,6

   567546  1959,Marsella,F,5
   567547: 1959,Marsetta,F,5
   567548  1959,Marsia,F,5

   568343  1959,Toby,M,294
   568344: 1959,Seth,M,292
   568345  1959,Stacy,M,290

   573019  1960,Leisa,F,298
   573020: 1960,Rosetta,F,298
   573021  1960,Blanca,F,297

   573898  1960,Jenni,F,58
   573899: 1960,Josette,F,58
   573900  1960,Lorine,F,58

   574205  1960,Lilian,F,42
   574206: 1960,Lisette,F,42
   574207  1960,Maryalice,F,42

   574436  1960,Camelia,F,33
   574437: 1960,Charlesetta,F,33
   574438  1960,Cherise,F,33

   575167  1960,Steve,F,21
   575168: 1960,Susette,F,21
   575169  1960,Tandy,F,21

   575231  1960,Linnette,F,20
   575232: 1960,Lissette,F,20
   575233  1960,Lorra,F,20

   576101  1960,Rori,F,13
   576102: 1960,Rosette,F,13
   576103  1960,Roxan,F,13

   576235  1960,Jamee,F,12
   576236: 1960,Jamesetta,F,12
   576237  1960,Janeane,F,12

   577048  1960,Johnsie,F,9
   577049: 1960,Josetta,F,9
   577050  1960,Kaaren,F,9

   578977  1960,Corona,F,5
   578978: 1960,Cosetta,F,5
   578979  1960,Cristen,F,5

   580219  1960,Julio,M,343
   580220: 1960,Seth,M,343
   580221  1960,Russ,M,342

   584997  1961,Patrica,F,270
   584998: 1961,Rosetta,F,269
   584999  1961,Gigi,F,268

   585786  1961,Larry,F,63
   585787: 1961,Lisette,F,63
   585788  1961,Nilsa,F,63

   585933  1961,Isabella,F,53
   585934: 1961,Josette,F,53
   585935  1961,Kary,F,53

   586735  1961,Celinda,F,26
   586736: 1961,Charlesetta,F,26
   586737  1961,Christena,F,26

   586842  1961,Suann,F,25
   586843: 1961,Susette,F,25
   586844  1961,Toniann,F,25

   586971  1961,Roselle,F,23
   586972: 1961,Rosette,F,23
   586973  1961,Sallyann,F,23

   587255  1961,Jamee,F,19
   587256: 1961,Jamesetta,F,19
   587257  1961,Janee,F,19

   588190  1961,Conception,F,12
   588191: 1961,Cosette,F,12
   588192  1961,Cozette,F,12

   588776  1961,Linde,F,10
   588777: 1961,Lissette,F,10
   588778  1961,Loa,F,10

   588972  1961,Concha,F,9
   588973: 1961,Consetta,F,9
   588974  1961,Cordia,F,9

   589434  1961,Jorja,F,8
   589435: 1961,Josetta,F,8
   589436  1961,Kacy,F,8

   591526  1961,Lynthia,F,5
   591527: 1961,Lysette,F,5
   591528  1961,Mabeline,F,5

   592346  1961,Ervin,M,328
   592347: 1961,Seth,M,328
   592348  1961,Ellis,M,327

   597252  1962,Kate,F,218
   597253: 1962,Rosetta,F,218
   597254  1962,Sharlene,F,218

   598003  1962,Jay,F,59
   598004: 1962,Josette,F,59
   598005  1962,Lura,F,59

   598055  1962,Keith,F,56
   598056: 1962,Lisette,F,56
   598057  1962,Natalia,F,56

   598587  1962,Camelia,F,33
   598588: 1962,Charlesetta,F,33
   598589  1962,Charyl,F,33

   598857  1962,Shellia,F,28
   598858: 1962,Susette,F,28
   598859  1962,Taunya,F,28

   599244  1962,Jamee,F,21
   599245: 1962,Jamesetta,F,21
   599246  1962,Jeanice,F,21

   599330  1962,Lisanne,F,20
   599331: 1962,Lissette,F,20
   599332  1962,Lorey,F,20

   600599  1962,Concha,F,11
   600600: 1962,Cosette,F,11
   600601  1962,Cristela,F,11

   601241  1962,Joletta,F,9
   601242: 1962,Josetta,F,9
   601243  1962,Joylynn,F,9

   602523  1962,Colena,F,6
   602524: 1962,Consetta,F,6
   602525  1962,Constancia,F,6

   602976  1962,Rosemaria,F,6
   602977: 1962,Rosette,F,6
   602978  1962,Roslin,F,6

   604581  1962,Alphonso,M,318
   604582: 1962,Seth,M,316
   604583  1962,Oliver,M,314

   609464  1963,Kate,F,210
   609465: 1963,Rosetta,F,210
   609466  1963,Tana,F,210

   610096  1963,Linnea,F,69
   610097: 1963,Lisette,F,69
   610098  1963,Sandee,F,69

   610197  1963,Jaimie,F,60
   610198: 1963,Josette,F,60
   610199  1963,Kathaleen,F,60

   610921  1963,Soraya,F,31
   610922: 1963,Susette,F,31
   610923  1963,Tamarah,F,31

   611311  1963,Candida,F,23
   611312: 1963,Charlesetta,F,23
   611313  1963,Charyl,F,23

   611673  1963,Lanora,F,19
   611674: 1963,Lissette,F,19
   611675  1963,Loleta,F,19

   611760  1963,Hettie,F,18
   611761: 1963,Jamesetta,F,18
   611762  1963,Jeanell,F,18

   612416  1963,Correne,F,13
   612417: 1963,Cosette,F,13
   612418  1963,Cynda,F,13

   613237  1963,Roselia,F,10
   613238: 1963,Rosette,F,10
   613239  1963,Roslin,F,10

   614930  1963,Josepha,F,6
   614931: 1963,Josetta,F,6
   614932  1963,Jossie,F,6

   615537  1963,Coryn,F,5
   615538: 1963,Cosetta,F,5
   615539  1963,Crystle,F,5

   616877  1963,Al,M,293
   616878: 1963,Seth,M,292
   616879  1963,Dewey,M,291

   621698  1964,Lesia,F,238
   621699: 1964,Rosetta,F,238
   621700  1964,Valorie,F,238

   622310  1964,Leatha,F,76
   622311: 1964,Lisette,F,76
   622312  1964,Lu,F,76

   622795  1964,Jolyn,F,44
   622796: 1964,Josette,F,44
   622797  1964,Larry,F,44

   622872  1964,Shandra,F,42
   622873: 1964,Susette,F,42
   622874  1964,Tonette,F,42

   623422  1964,Leshia,F,27
   623423: 1964,Lissette,F,27
   623424  1964,Marcela,F,27

   623645  1964,Celinda,F,23
   623646: 1964,Charlesetta,F,23
   623647  1964,Charmane,F,23

   624074  1964,Jade,F,18
   624075: 1964,Jamesetta,F,18
   624076  1964,Janee,F,18

   624518  1964,Rosena,F,15
   624519: 1964,Rosette,F,15
   624520  1964,Rosia,F,15

   625512  1964,Joli,F,10
   625513: 1964,Josetta,F,10
   625514  1964,Jude,F,10

   625722  1964,Cosandra,F,9
   625723: 1964,Cosette,F,9
   625724  1964,Cristela,F,9

   627972  1964,Corraine,F,5
   627973: 1964,Cosetta,F,5
   627974  1964,Costella,F,5

   628382  1964,Lisandra,F,5
   628383: 1964,Lisetta,F,5
   628384  1964,Litha,F,5

   629266  1964,Horace,M,349
   629267: 1964,Seth,M,347
   629268  1964,Bryon,M,345

   634123  1965,Pamala,F,202
   634124: 1965,Rosetta,F,202
   634125  1965,Graciela,F,201

   634640  1965,Gregory,F,79
   634641: 1965,Lisette,F,79
   634642  1965,Nedra,F,79

   634881  1965,Joetta,F,58
   634882: 1965,Josette,F,58
   634883  1965,Kira,F,58

   635118  1965,Sunday,F,45
   635119: 1965,Susette,F,45
   635120  1965,Thersa,F,45

   636145  1965,Letricia,F,21
   636146: 1965,Lissette,F,21
   636147  1965,Loralyn,F,21

   636623  1965,Gwendlyn,F,16
   636624: 1965,Jamesetta,F,16
   636625  1965,Jeania,F,16

   637407  1965,Channa,F,11
   637408: 1965,Charlesetta,F,11
   637409  1965,Chequita,F,11

   637765  1965,Jorja,F,10
   637766: 1965,Josetta,F,10
   637767  1965,Joylyn,F,10

   638620  1965,Roseline,F,8
   638621: 1965,Rosette,F,8
   638622  1965,Roslind,F,8

   640556  1965,Lynora,F,5
   640557: 1965,Lysette,F,5
   640558  1965,Machella,F,5

   641394  1965,Gerardo,M,325
   641395: 1965,Seth,M,325
   641396  1965,Lowell,M,323

   646022  1966,Sonji,F,225
   646023: 1966,Rosetta,F,224
   646024  1966,Whitney,F,224

   646325  1966,Josefina,F,117
   646326: 1966,Lisette,F,117
   646327  1966,Zelda,F,117

   646995  1966,Lessie,F,49
   646996: 1966,Lissette,F,49
   646997  1966,Lorine,F,49

   647009  1966,Goldie,F,48
   647010: 1966,Josette,F,48
   647011  1966,Louella,F,48

   647048  1966,Selene,F,46
   647049: 1966,Susette,F,46
   647050  1966,Taryn,F,46

   648547  1966,Chantell,F,16
   648548: 1966,Charlesetta,F,16
   648549  1966,Chelle,F,16

   648580  1966,Jamee,F,16
   648581: 1966,Jamesetta,F,16
   648582  1966,Jeanelle,F,16

   650563  1966,Roselle,F,8
   650564: 1966,Rosette,F,8
   650565  1966,Roshanda,F,8

   650941  1966,Lisaanne,F,7
   650942: 1966,Lissete,F,7
   650943  1966,Lolisa,F,7

   652571  1966,Lynore,F,5
   652572: 1966,Lysette,F,5
   652573  1966,Madelyne,F,5

   653406  1966,Lamont,M,345
   653407: 1966,Seth,M,342
   653408  1966,Leland,M,338

   658214  1967,Renita,F,202
   658215: 1967,Rosetta,F,202
   658216  1967,Alberta,F,200

   658259  1967,Jeana,F,183
   658260: 1967,Josette,F,182
   658261  1967,Aida,F,181

   658271  1967,Brandi,F,175
   658272: 1967,Lissette,F,175
   658273  1967,Mattie,F,175

   658304  1967,Juliana,F,163
   658305: 1967,Lisette,F,163
   658306  1967,Camilla,F,162

   659036  1967,Scarlet,F,56
   659037: 1967,Susette,F,56
   659038  1967,Alycia,F,55

   660533  1967,Irena,F,18
   660534: 1967,Jamesetta,F,18
   660535  1967,Jeanice,F,18

   660633  1967,Celinda,F,17
   660634: 1967,Charlesetta,F,17
   660635  1967,Charman,F,17

   660836  1967,Roben,F,16
   660837: 1967,Rosette,F,16
   660838  1967,Rosilyn,F,16

   662018  1967,Lynnda,F,10
   662019: 1967,Lysette,F,10
   662020  1967,Lyssa,F,10

   662208  1967,Corrinne,F,9
   662209: 1967,Cosette,F,9
   662210  1967,Cynthie,F,9

   662701  1967,Jolanta,F,8
   662702: 1967,Josetta,F,8
   662703  1967,Joylynn,F,8

   663306  1967,Linna,F,7
   663307: 1967,Lissete,F,7
   663308  1967,Liticia,F,7

   663988  1967,Lilyan,F,6
   663989: 1967,Liset,F,6
   663990  1967,Lizet,F,6

   664898  1967,Lisaanne,F,5
   664899: 1967,Lisset,F,5
   664900: 1967,Lissett,F,5
   664901  1967,Lissie,F,5

   664941  1967,Lysandra,F,5
   664942: 1967,Lyssette,F,5
   664943  1967,Mack,F,5

   665139  1967,Roshon,F,5
   665140: 1967,Rossetta,F,5
   665141  1967,Rosy,F,5

   665168  1967,Serra,F,5
   665169: 1967,Seta,F,5
   665170: 1967,Seth,F,5
   665171  1967,Shaela,F,5

   665760  1967,Isaac,M,395
   665761: 1967,Seth,M,395
   665762  1967,Willard,M,395

   670351  1968,Gena,F,502
   670352: 1968,Josette,F,502
   670353  1968,Kimberlee,F,502

   670598  1968,Aileen,F,210
   670599: 1968,Lissette,F,210
   670600  1968,Leisa,F,209

   670659  1968,Juliet,F,182
   670660: 1968,Lisette,F,182
   670661  1968,Tawana,F,182

   670711  1968,Nellie,F,165
   670712: 1968,Rosetta,F,165
   670713  1968,Kecia,F,164

   671632  1968,Summer,F,48
   671633: 1968,Susette,F,48
   671634  1968,Terrell,F,48

   672312  1968,Jon,F,27
   672313: 1968,Josetta,F,27
   672314  1968,Jovita,F,27

   673314  1968,Jerrilyn,F,16
   673315: 1968,Jossette,F,16
   673316  1968,Julian,F,16

   673358  1968,Ronnetta,F,16
   673359: 1968,Rosette,F,16
   673360  1968,Salli,F,16

   673566  1968,Char,F,14
   673567: 1968,Charlesetta,F,14
   673568  1968,Cherene,F,14

   673617  1968,Jennifier,F,14
   673618: 1968,Josett,F,14
   673619  1968,Kacy,F,14

   673753  1968,Consandra,F,13
   673754: 1968,Cosette,F,13
   673755  1968,Cybele,F,13

   674237  1968,Ivone,F,11
   674238: 1968,Jamesetta,F,11
   674239  1968,Jamia,F,11

   674305  1968,Lynnett,F,11
   674306: 1968,Lysette,F,11
   674307  1968,Magnolia,F,11

   674919  1968,Lisann,F,9
   674920: 1968,Lisset,F,9
   674921  1968,Loletha,F,9

   675883  1968,Lesbia,F,7
   675884: 1968,Lesette,F,7
   675885  1968,Leshia,F,7

   676487  1968,Joeanne,F,6
   676488: 1968,Joesette,F,6
   676489  1968,Joesphine,F,6

   676597  1968,Lisaanne,F,6
   676598: 1968,Lissett,F,6
   676599  1968,Liticia,F,6

   677427  1968,Josepha,F,5
   677428: 1968,Joset,F,5
   677429  1968,Joshua,F,5

   678457  1968,Claude,M,530
   678458: 1968,Seth,M,526
   678459  1968,Clint,M,524

   683437  1969,Patsy,F,295
   683438: 1969,Josette,F,294
   683439  1969,Lorri,F,294

   683550  1969,Cecelia,F,209
   683551: 1969,Lissette,F,209
   683552  1969,Lucia,F,208

   683566  1969,Holli,F,201
   683567: 1969,Lisette,F,201
   683568  1969,Sheree,F,201

   683602  1969,Dale,F,188
   683603: 1969,Rosetta,F,188
   683604  1969,Myrna,F,187

   685437  1969,Subrina,F,27
   685438: 1969,Susette,F,27
   685439  1969,Sylvie,F,27

   686002  1969,Josephina,F,19
   686003: 1969,Josetta,F,19
   686004  1969,Julian,F,19

   686342  1969,Charlean,F,16
   686343: 1969,Charlesetta,F,16
   686344  1969,Cherl,F,16

   687178  1969,Ligia,F,12
   687179: 1969,Lissett,F,12
   687180  1969,Loletha,F,12

   687749  1969,Lin,F,10
   687750: 1969,Liset,F,10
   687751  1969,Loida,F,10

   687830  1969,Rosalin,F,10
   687831: 1969,Rosette,F,10
   687832  1969,Roslin,F,10

   689074  1969,Jodilynn,F,7
   689075: 1969,Joesette,F,7
   689076  1969,Johnda,F,7

   689185  1969,Lisel,F,7
   689186: 1969,Lissete,F,7
   689187  1969,Lizann,F,7

   689198  1969,Lynora,F,7
   689199: 1969,Lysette,F,7
   689200  1969,Macey,F,7

   689809  1969,Jamal,F,6
   689810: 1969,Jamesetta,F,6
   689811  1969,Jamesina,F,6

   689853  1969,Joselle,F,6
   689854: 1969,Jossette,F,6
   689855  1969,Joycelynn,F,6

   689948  1969,Lindee,F,6
   689949: 1969,Lisset,F,6
   689950  1969,Lititia,F,6

   690534  1969,Corrinna,F,5
   690535: 1969,Cosette,F,5
   690536  1969,Creola,F,5

   691886  1969,Colin,M,583
   691887: 1969,Seth,M,582
   691888  1969,Ben,M,581

   697199  1970,Geneva,F,297
   697200: 1970,Josette,F,297
   697201  1970,Polly,F,297

   697308  1970,Johnna,F,224
   697309: 1970,Lisette,F,224
   697310  1970,Kisha,F,222

   697316  1970,Christopher,F,218
   697317: 1970,Lissette,F,218
   697318  1970,Lolita,F,218

   697483  1970,Monika,F,152
   697484: 1970,Rosetta,F,152
   697485  1970,Tanja,F,152

   699000  1970,Shiloh,F,32
   699001: 1970,Susette,F,32
   699002  1970,Tandy,F,32

   700054  1970,Cecila,F,18
   700055: 1970,Charlesetta,F,18
   700056  1970,Charlotta,F,18

   700101  1970,Josephina,F,18
   700102: 1970,Josetta,F,18
   700103  1970,Kacie,F,18

   700503  1970,Correna,F,15
   700504: 1970,Cosette,F,15
   700505  1970,Cyndy,F,15

   700604  1970,Ronell,F,15
   700605: 1970,Rosette,F,15
   700606  1970,Roshunda,F,15

   700996  1970,Linn,F,13
   700997: 1970,Lissett,F,13
   700998  1970,Lorelle,F,13

   701254  1970,Lisandra,F,12
   701255: 1970,Lisset,F,12
   701256  1970,Lonnette,F,12

   701870  1970,Luwana,F,10
   701871: 1970,Lysette,F,10
   701872  1970,Macie,F,10

   702641  1970,Joslin,F,8
   702642: 1970,Jossette,F,8
   702643  1970,Jovanna,F,8

   703205  1970,Jakki,F,7
   703206: 1970,Jamesetta,F,7
   703207  1970,Janai,F,7

   704184  1970,Linnet,F,6
   704185: 1970,Lisett,F,6
   704186  1970,Litisha,F,6

   705161  1970,Joselle,F,5
   705162: 1970,Josett,F,5
   705163  1970,Joslynn,F,5

   705344  1970,Lisl,F,5
   705345: 1970,Lissete,F,5
   705346  1970,Lizza,F,5

   706225  1970,Clint,M,806
   706226: 1970,Seth,M,794
   706227  1970,Grant,M,784

   712085  1971,Janeen,F,219
   712086: 1971,Josette,F,219
   712087  1971,Lillie,F,219

   712173  1971,Lenore,F,186
   712174: 1971,Lisette,F,186
   712175  1971,Lolita,F,186

   712183  1971,Lola,F,180
   712184: 1971,Lissette,F,179
   712185  1971,Sharonda,F,179

   712288  1971,Marybeth,F,148
   712289: 1971,Rosetta,F,148
   712290  1971,Adriane,F,147

   714358  1971,Charisma,F,23
   714359: 1971,Charlesetta,F,23
   714360  1971,Charon,F,23

   714534  1971,Sonjia,F,22
   714535: 1971,Susette,F,22
   714536  1971,Suzzanne,F,22

   714804  1971,Joselyn,F,19
   714805: 1971,Josetta,F,19
   714806  1971,Justin,F,19

   715467  1971,Rebel,F,15
   715468: 1971,Rosette,F,15
   715469  1971,Roxy,F,15

   715822  1971,Lisia,F,13
   715823: 1971,Lissett,F,13
   715824  1971,Liticia,F,13

   716096  1971,Luciana,F,12
   716097: 1971,Lysette,F,12
   716098  1971,Lyssa,F,12

   716720  1971,Lilla,F,10
   716721: 1971,Lisset,F,10
   716722  1971,Litisha,F,10

   718397  1971,Leondra,F,7
   718398: 1971,Lesette,F,7
   718399  1971,Leshun,F,7

   718404  1971,Linnell,F,7
   718405: 1971,Liset,F,7
   718406  1971,Lisle,F,7
   718407: 1971,Lissete,F,7
   718408  1971,Lizanne,F,7

   719163  1971,Jory,F,6
   719164: 1971,Josett,F,6
   719165  1971,Joslin,F,6

   720197  1971,Jamell,F,5
   720198: 1971,Jamesetta,F,5
   720199  1971,Jamica,F,5

   720240  1971,Joei,F,5
   720241: 1971,Joesette,F,5
   720242  1971,Joesphine,F,5

   720411  1971,Lisbet,F,5
   720412: 1971,Lisett,F,5
   720413  1971,Loise,F,5

   721294  1971,Johnnie,M,783
   721295: 1971,Seth,M,781
   721296  1971,Allan,M,780

   727461  1972,Darci,F,175
   727462: 1972,Josette,F,175
   727463  1972,Mechelle,F,175

   727466  1972,Eunice,F,174
   727467: 1972,Lissette,F,174
   727468  1972,Missy,F,174

   727507  1972,Karri,F,161
   727508: 1972,Lisette,F,161
   727509  1972,Danna,F,160

   727531  1972,Rosario,F,153
   727532: 1972,Rosetta,F,153
   727533  1972,Keena,F,152

   729890  1972,Jenney,F,20
   729891: 1972,Josetta,F,20
   729892  1972,Karna,F,20

   730202  1972,Stephnie,F,18
   730203: 1972,Susette,F,18
   730204  1972,Taira,F,18

   730688  1972,Lindi,F,15
   730689: 1972,Lissett,F,15
   730690  1972,Lizzette,F,15

   730796  1972,Channel,F,14
   730797: 1972,Charlesetta,F,14
   730798  1972,Chasidy,F,14

   731651  1972,Lyndee,F,11
   731652: 1972,Lysette,F,11
   731653  1972,Machell,F,11

   732240  1972,Corretta,F,9
   732241: 1972,Cosette,F,9
   732242  1972,Cotrina,F,9

   732851  1972,Jamese,F,8
   732852: 1972,Jamesetta,F,8
   732853  1972,Jamilyn,F,8

   732966  1972,Linelle,F,8
   732967: 1972,Lissete,F,8
   732968  1972,Liticia,F,8

   733525  1972,Joscelyn,F,7
   733526: 1972,Josett,F,7
   733527  1972,Joshlyn,F,7

   733778  1972,Rosalin,F,7
   733779: 1972,Rosette,F,7
   733780  1972,Rosey,F,7

   733797  1972,Serenity,F,7
   733798: 1972,Seth,F,7
   733799  1972,Shahla,F,7

   734468  1972,Lisaanne,F,6
   734469: 1972,Liset,F,6
   734470  1972,Logan,F,6

   735698  1972,Lis,F,5
   735699: 1972,Lisset,F,5
   735700  1972,Litonia,F,5

   736585  1972,Kelvin,M,883
   736586: 1972,Seth,M,869
   736587  1972,Vernon,M,865

   742901  1973,Corinna,F,162
   742902: 1973,Josette,F,162
   742903  1973,Kia,F,162

   742947  1973,Corrie,F,151
   742948: 1973,Lissette,F,151
   742949  1973,Nichol,F,151

   742952  1973,Jasmine,F,150
   742953: 1973,Lisette,F,150
   742954  1973,Racheal,F,150

   743093  1973,Kyra,F,119
   743094: 1973,Rosetta,F,119
   743095  1973,Sherie,F,119

   745631  1973,Jon,F,18
   745632: 1973,Josetta,F,18
   745633  1973,Karalee,F,18

   746091  1973,Chanin,F,15
   746092: 1973,Charlesetta,F,15
   746093  1973,Charlotta,F,15

   746584  1973,Lida,F,13
   746585: 1973,Lissett,F,13
   746586  1973,Liv,F,13

   748038  1973,Rosalynn,F,9
   748039: 1973,Rosette,F,9
   748040  1973,Rosha,F,9

   748384  1973,Jalynn,F,8
   748385: 1973,Jamesetta,F,8
   748386  1973,Jammi,F,8

   748668  1973,Suprena,F,8
   748669: 1973,Susette,F,8
   748670  1973,Tabby,F,8

   749183  1973,Lilla,F,7
   749184: 1973,Liset,F,7
   749185  1973,Lisia,F,7

   749698  1973,Corrinna,F,6
   749699: 1973,Cosette,F,6
   749700  1973,Courtnay,F,6

   750067  1973,Lisbet,F,6
   750068: 1973,Lisett,F,6
   750069: 1973,Lisset,F,6
   750070  1973,Little,F,6

   751258  1973,Lisl,F,5
   751259: 1973,Lissete,F,5
   751260  1973,Lizzy,F,5

   751288  1973,Lyra,F,5
   751289: 1973,Lysette,F,5
   751290  1973,Lytonia,F,5

   752091  1973,Earl,M,1157
   752092: 1973,Seth,M,1138
   752093  1973,Zachary,M,1137

   758662  1974,Lesa,F,144
   758663: 1974,Lissette,F,144
   758664  1974,Nicki,F,144

   758746  1974,Evette,F,126
   758747: 1974,Lisette,F,126
   758748  1974,Ryan,F,126

   758774  1974,Ayanna,F,120
   758775: 1974,Josette,F,120
   758776  1974,Libby,F,120

   758823  1974,Nicola,F,113
   758824: 1974,Rosetta,F,113
   758825  1974,Starla,F,113

   762958  1974,Leyda,F,11
   762959: 1974,Lissett,F,11
   762960  1974,Lizandra,F,11

   763171  1974,Charlee,F,10
   763172: 1974,Charlesetta,F,10
   763173  1974,Charlet,F,10

   763291  1974,Johari,F,10
   763292: 1974,Josetta,F,10
   763293  1974,Jull,F,10

   763353  1974,Lindsy,F,10
   763354: 1974,Lisset,F,10
   763355  1974,Lititia,F,10

   763364  1974,Lynley,F,10
   763365: 1974,Lysette,F,10
   763366  1974,Machele,F,10

   763486  1974,Sulma,F,10
   763487: 1974,Susette,F,10
   763488  1974,Suzi,F,10

   764490  1974,Ronny,F,8
   764491: 1974,Rosette,F,8
   764492  1974,Roshon,F,8

   764510  1974,Sequoia,F,8
   764511: 1974,Seth,F,8
   764512  1974,Shalyn,F,8

   764932  1974,Jameelah,F,7
   764933: 1974,Jamesetta,F,7
   764934  1974,Jamille,F,7

   767322  1974,Lisbet,F,5
   767323: 1974,Lisett,F,5
   767324  1974,Lisia,F,5

   768179  1974,Jerome,M,1417
   768180: 1974,Seth,M,1411
   768181  1974,Alex,M,1388

   774704  1975,Kenyatta,F,217
   774705: 1975,Lissette,F,217
   774706  1975,Chiquita,F,216

   774857  1975,Georgette,F,159
   774858: 1975,Lisette,F,159
   774859  1975,Penelope,F,159

   775212  1975,Rayna,F,97
   775213: 1975,Rosetta,F,97
   775214  1975,Stefani,F,97

   775219  1975,Felica,F,96
   775220: 1975,Josette,F,96
   775221  1975,Lakeysha,F,96

   778911  1975,Charidy,F,12
   778912: 1975,Charlesetta,F,12
   778913  1975,Charmane,F,12

   779111  1975,Selinda,F,12
   779112: 1975,Seth,F,12
   779113  1975,Shakema,F,12

   779469  1975,Sundee,F,11
   779470: 1975,Susette,F,11
   779471  1975,Suzzette,F,11

   779698  1975,Jamala,F,10
   779699: 1975,Jamesetta,F,10
   779700  1975,Jamil,F,10

   780881  1975,Lynnann,F,8
   780882: 1975,Lysette,F,8
   780883  1975,Machele,F,8

   781502  1975,Jorene,F,7
   781503: 1975,Josetta,F,7
   781504  1975,Joshlyn,F,7

   781770  1975,Roselinda,F,7
   781771: 1975,Rosette,F,7
   781772  1975,Rufina,F,7

   782591  1975,Lequisha,F,6
   782592: 1975,Lessette,F,6
   782593  1975,Letica,F,6

   782610  1975,Linzy,F,6
   782611: 1975,Lisset,F,6
   782612: 1975,Lissete,F,6
   782613  1975,Lizanne,F,6

   783370  1975,Cosandra,F,5
   783371: 1975,Cosette,F,5
   783372  1975,Cossandra,F,5

   783905  1975,Linnae,F,5
   783906: 1975,Liset,F,5
   783907  1975,Lislie,F,5
   783908: 1975,Lissett,F,5
   783909  1975,Lititia,F,5

   784753  1975,Ricky,M,1915
   784754: 1975,Seth,M,1868
   784755  1975,Lee,M,1861

   791830  1976,Laquita,F,151
   791831: 1976,Lissette,F,151
   791832  1976,Natalia,F,151

   791851  1976,Kira,F,146
   791852: 1976,Lisette,F,146
   791853  1976,Rebeca,F,146

   792144  1976,Elva,F,95
   792145: 1976,Josette,F,95
   792146  1976,Joshua,F,95

   792205  1976,Laverne,F,89
   792206: 1976,Rosetta,F,89
   792207  1976,Shawnee,F,89

   795731  1976,Lexi,F,13
   795732: 1976,Lissett,F,13
   795733  1976,Lore,F,13

   796780  1976,Linn,F,10
   796781: 1976,Lisset,F,10
   796782  1976,Logan,F,10

   796786  1976,Lynett,F,10
   796787: 1976,Lysette,F,10
   796788  1976,Madalyn,F,10

   796923  1976,Summar,F,10
   796924: 1976,Susette,F,10
   796925  1976,Taesha,F,10

   797214  1976,Jonita,F,9
   797215: 1976,Josetta,F,9
   797216  1976,Josha,F,9

   797424  1976,Selia,F,9
   797425: 1976,Seth,F,9
   797426  1976,Shaconda,F,9

   797656  1976,Chantina,F,8
   797657: 1976,Charlesetta,F,8
   797658  1976,Charli,F,8

   798701  1976,Lis,F,7
   798702: 1976,Liset,F,7
   798703  1976,Lizzet,F,7

   799472  1976,Jamaca,F,6
   799473: 1976,Jamesetta,F,6
   799474  1976,Jamieann,F,6

   801091  1976,Lira,F,5
   801092: 1976,Liseth,F,5
   801093: 1976,Lisett,F,5
   801094: 1976,Lissete,F,5
   801095  1976,Liticia,F,5

   801437  1976,Rosene,F,5
   801438: 1976,Rosette,F,5
   801439  1976,Rosey,F,5

   801977  1976,Walter,M,2102
   801978: 1976,Seth,M,2100
   801979  1976,Jesus,M,2039

   809046  1977,Noemi,F,222
   809047: 1977,Lisette,F,220
   809048  1977,Rosalinda,F,220

   809331  1977,Imelda,F,138
   809332: 1977,Lissette,F,138
   809333  1977,Sharla,F,138

   809569  1977,Jewel,F,99
   809570: 1977,Josette,F,99
   809571  1977,Lorna,F,99

   809767  1977,Nakesha,F,79
   809768: 1977,Rosetta,F,79
   809769  1977,Saundra,F,79

   811387  1977,Lesly,F,26
   811388: 1977,Liset,F,26
   811389  1977,Lorien,F,26

   811893  1977,Latrell,F,21
   811894: 1977,Lissett,F,21
   811895  1977,Lizet,F,21

   812678  1977,Lavita,F,16
   812679: 1977,Lisset,F,16
   812680  1977,Mahala,F,16

   812727  1977,Sera,F,16
   812728: 1977,Seth,F,16
   812729  1977,Shakena,F,16

   813199  1977,Rondi,F,14
   813200: 1977,Rosette,F,14
   813201  1977,Rossana,F,14

   813436  1977,Lisaann,F,13
   813437: 1977,Lisett,F,13
   813438  1977,Litisha,F,13

   815313  1977,Charlese,F,8
   815314: 1977,Charlesetta,F,8
   815315  1977,Charmian,F,8

   816366  1977,Linley,F,7
   816367: 1977,Liseth,F,7
   816368  1977,Lisia,F,7

   817207  1977,Jamell,F,6
   817208: 1977,Jamesetta,F,6
   817209  1977,Jamesia,F,6

   817495  1977,Lynsie,F,6
   817496: 1977,Lysette,F,6
   817497  1977,Maci,F,6

   818263  1977,Corryn,F,5
   818264: 1977,Cosette,F,5
   818265  1977,Cressida,F,5

   819255  1977,Seresa,F,5
   819256: 1977,Seta,F,5
   819257  1977,Shabana,F,5

   819414  1977,Suri,F,5
   819415: 1977,Susette,F,5
   819416  1977,Sussan,F,5

   819783  1977,Jon,M,2288
   819784: 1977,Seth,M,2287
   819785  1977,Shannon,M,2285

   827239  1978,Mellissa,F,218
   827240: 1978,Lisette,F,217
   827241  1978,Justine,F,216

   827575  1978,Katheryn,F,126
   827576: 1978,Lissette,F,126
   827577  1978,Shani,F,126

   827893  1978,Jeni,F,85
   827894: 1978,Josette,F,85
   827895  1978,Nakita,F,85

   828046  1978,Robbin,F,73
   828047: 1978,Rosetta,F,73
   828048  1978,Sophie,F,73

   830511  1978,Layne,F,18
   830512: 1978,Liset,F,18
   830513  1978,Liv,F,18

   830730  1978,Sera,F,17
   830731: 1978,Seth,F,17
   830732  1978,Shakena,F,17

   831329  1978,Liesl,F,14
   831330: 1978,Lisset,F,14
   831331  1978,Lucas,F,14

   831487  1978,Chakita,F,13
   831488: 1978,Charlesetta,F,13
   831489  1978,Charlynn,F,13

   832304  1978,Linde,F,11
   832305: 1978,Lissett,F,11
   832306  1978,Loralie,F,11

   832386  1978,Ronya,F,11
   832387: 1978,Rosette,F,11
   832388  1978,Rubina,F,11

   833121  1978,Joeanna,F,9
   833122: 1978,Josetta,F,9
   833123  1978,Jovon,F,9

   833214  1978,Lysa,F,9
   833215: 1978,Lysette,F,9
   833216  1978,Machele,F,9

   833713  1978,Jamekia,F,8
   833714: 1978,Jamesetta,F,8
   833715  1978,Jamina,F,8

   834653  1978,Lisanne,F,7
   834654: 1978,Liseth,F,7
   834655: 1978,Lissete,F,7
   834656  1978,Litasha,F,7

   835713  1978,Lisbet,F,6
   835714: 1978,Lisett,F,6
   835715  1978,Lislie,F,6

   836092  1978,Suprina,F,6
   836093: 1978,Susette,F,6
   836094  1978,Suzane,F,6

   836570  1978,Corryn,F,5
   836571: 1978,Cosette,F,5
   836572  1978,Courtnye,F,5

   838083  1978,Kristopher,M,2523
   838084: 1978,Seth,M,2503
   838085  1978,Vincent,M,2503

   842650  1978,Dorrell,M,7
   842651: 1978,Dorsett,M,7
   842652  1978,Dougals,M,7

   845709  1979,Josefina,F,148
   845710: 1979,Lisette,F,148
   845711  1979,Shanita,F,148

   845819  1979,Khalilah,F,127
   845820: 1979,Lissette,F,127
   845821  1979,Loren,F,127

   846150  1979,Jonelle,F,87
   846151: 1979,Josette,F,87
   846152  1979,Lakenya,F,87

   846291  1979,Natashia,F,75
   846292: 1979,Rosetta,F,75
   846293  1979,Tory,F,75

   849302  1979,Roselynn,F,16
   849303: 1979,Rosette,F,16
   849304  1979,Rossana,F,16

   849312  1979,Sera,F,16
   849313: 1979,Seth,F,16
   849314  1979,Shaila,F,16

   849706  1979,Liisa,F,14
   849707: 1979,Liset,F,14
   849708  1979,Loan,F,14

   849883  1979,Collen,F,13
   849884: 1979,Cosette,F,13
   849885  1979,Cristalle,F,13

   850012  1979,Lynsie,F,13
   850013: 1979,Lysette,F,13
   850014  1979,Makayla,F,13

   850997  1979,Charelle,F,10
   850998: 1979,Charlesetta,F,10
   850999  1979,Charlisa,F,10

   851208  1979,Linsy,F,10
   851209: 1979,Liseth,F,10
   851210  1979,Lore,F,10

   851790  1979,Lisaann,F,9
   851791: 1979,Lisett,F,9
   851792  1979,Loreen,F,9

   853140  1979,Josepha,F,7
   853141: 1979,Josetta,F,7
   853142  1979,Joshlyn,F,7

   854371  1979,Lis,F,6
   854372: 1979,Lissett,F,6
   854373  1979,Lizaida,F,6

   855891  1979,Lislie,F,5
   855892: 1979,Lisset,F,5
   855893  1979,Lissie,F,5

   856055  1979,Morganne,F,5
   856056: 1979,Musette,F,5
   856057  1979,Myca,F,5

   856800  1979,Carl,M,2900
   856801: 1979,Seth,M,2840
   856802  1979,Luis,M,2756

   861682  1979,Dornell,M,7
   861683: 1979,Dorsett,M,7
   861684  1979,Dory,M,7

   864708  1980,Laci,F,160
   864709: 1980,Lisette,F,160
   864710  1980,Tai,F,160

   864740  1980,Kay,F,153
   864741: 1980,Lissette,F,153
   864742  1980,Rashida,F,153

   865283  1980,Mckenzie,F,79
   865284: 1980,Rosetta,F,79
   865285  1980,Shoshana,F,79

   865521  1980,Fiona,F,63
   865522: 1980,Josette,F,63
   865523  1980,Laila,F,63

   866495  1980,Lashauna,F,34
   866496: 1980,Liset,F,34
   866497  1980,Lizzette,F,34

   867701  1980,Letoya,F,20
   867702: 1980,Lisset,F,20
   867703  1980,Lorelle,F,20

   867998  1980,Letecia,F,18
   867999: 1980,Lisett,F,18
   868000  1980,Loreen,F,18

   868465  1980,Sejal,F,16
   868466: 1980,Seth,F,16
   868467  1980,Shaindy,F,16

   868642  1980,Lin,F,15
   868643: 1980,Liseth,F,15
   868644  1980,Llesenia,F,15

   869988  1980,Roselia,F,11
   869989: 1980,Rosette,F,11
   869990  1980,Rossana,F,11

   870336  1980,Linnette,F,10
   870337: 1980,Lissett,F,10
   870338  1980,Little,F,10

   870344  1980,Luna,F,10
   870345: 1980,Lysette,F,10
   870346  1980,Maci,F,10

   871837  1980,Suprina,F,8
   871838: 1980,Susette,F,8
   871839  1980,Syble,F,8

   872159  1980,Eleshia,F,7
   872160: 1980,Eliset,F,7
   872161  1980,Elizabethann,F,7

   872294  1980,Jone,F,7
   872295: 1980,Josetta,F,7
   872296  1980,Jowana,F,7

   873030  1980,Charelle,F,6
   873031: 1980,Charlesetta,F,6
   873032  1980,Charlissa,F,6

   873296  1980,Jamellah,F,6
   873297: 1980,Jamesetta,F,6
   873298  1980,Jamicia,F,6

   873543  1980,Lishia,F,6
   873544: 1980,Lissete,F,6
   873545  1980,Lissie,F,6

   874483  1980,Cosandra,F,5
   874484: 1980,Cosette,F,5
   874485  1980,Cotina,F,5

   876022  1980,Lucas,M,3085
   876023: 1980,Seth,M,3050
   876024  1980,Billy,M,2991

   884058  1981,Alexia,F,183
   884059: 1981,Lisette,F,183
   884060  1981,Pearl,F,183

   884201  1981,Chimere,F,147
   884202: 1981,Lissette,F,147
   884203  1981,Regan,F,147

   884709  1981,Rosalba,F,81
   884710: 1981,Rosetta,F,81
   884711  1981,Shalanda,F,81

   885038  1981,Jacob,F,60
   885039: 1981,Josette,F,60
   885040  1981,Kanika,F,60

   885975  1981,Ruthie,F,33
   885976: 1981,Seth,F,33
   885977  1981,Shaneika,F,33

   886600  1981,Lezlie,F,25
   886601: 1981,Liset,F,25
   886602  1981,Lizett,F,25

   887843  1981,Lisanne,F,16
   887844: 1981,Lisset,F,16
   887845  1981,Lita,F,16

   888656  1981,Lynzie,F,13
   888657: 1981,Lysette,F,13
   888658  1981,Ma,F,13

   888835  1981,Corynn,F,12
   888836: 1981,Cosette,F,12
   888837  1981,Courteney,F,12

   889336  1981,Lida,F,11
   889337: 1981,Liseth,F,11
   889338: 1981,Lisett,F,11
   889339  1981,Loran,F,11

   889742  1981,Jonae,F,10
   889743: 1981,Josetta,F,10
   889744  1981,Joslynn,F,10

   889814  1981,Levon,F,10
   889815: 1981,Lissett,F,10
   889816  1981,Livier,F,10

   889905  1981,Rosena,F,10
   889906: 1981,Rosette,F,10
   889907  1981,Roshanna,F,10

   891020  1981,Linley,F,8
   891021: 1981,Lissete,F,8
   891022  1981,Lluvia,F,8

   891459  1981,Charidy,F,7
   891460: 1981,Charlesetta,F,7
   891461  1981,Charlisa,F,7

   891648  1981,Jamelah,F,7
   891649: 1981,Jamesetta,F,7
   891650  1981,Jameshia,F,7

   893321  1981,Seretha,F,6
   893322: 1981,Setareh,F,6
   893323  1981,Shabnam,F,6

   894561  1981,Linzey,F,5
   894562: 1981,Lisseth,F,5
   894563  1981,Lizelle,F,5

   895157  1981,Surina,F,5
   895158: 1981,Susette,F,5
   895159  1981,Suzzanna,F,5

   895489  1981,Curtis,M,3193
   895490: 1981,Seth,M,3137
   895491  1981,Tyler,M,3121

   901936  1981,Dorothy,M,5
   901937: 1981,Dorsett,M,5
   901938  1981,Dougals,M,5

   903625  1982,Perla,F,158
   903626: 1982,Lisette,F,157
   903627  1982,Rae,F,157

   903773  1982,Lindsy,F,129
   903774: 1982,Lissette,F,129
   903775  1982,Louisa,F,129

   904182  1982,Phoebe,F,80
   904183: 1982,Rosetta,F,80
   904184  1982,Roslyn,F,80

   904421  1982,Jayna,F,64
   904422: 1982,Josette,F,64
   904423  1982,Keara,F,64

   906681  1982,Seanna,F,20
   906682: 1982,Seth,F,20
   906683  1982,Shakeema,F,20

   907307  1982,Lida,F,16
   907308: 1982,Liset,F,16
   907309: 1982,Lissett,F,16
   907310  1982,Lita,F,16

   907512  1982,Linzy,F,15
   907513: 1982,Lisett,F,15
   907514  1982,London,F,15

   908435  1982,Lyna,F,12
   908436: 1982,Lysette,F,12
   908437  1982,Marah,F,12

   909107  1982,Chantille,F,10
   909108: 1982,Charlesetta,F,10
   909109  1982,Charlina,F,10

   909324  1982,Lisaann,F,10
   909325: 1982,Lisset,F,10
   909326  1982,Lorean,F,10

   909807  1982,Josanna,F,9
   909808: 1982,Josetta,F,9
   909809  1982,Joyann,F,9

   911445  1982,Lis,F,7
   911446: 1982,Liseth,F,7
   911447  1982,Lizzet,F,7

   911637  1982,Rosena,F,7
   911638: 1982,Rosette,F,7
   911639  1982,Roshan,F,7

   913012  1982,Sulay,F,6
   913013: 1982,Sunset,F,6
   913014  1982,Supriya,F,6

   913480  1982,Conchita,F,5
   913481: 1982,Consetta,F,5
   913482  1982,Constantine,F,5

   913486  1982,Cortina,F,5
   913487: 1982,Cosette,F,5
   913488  1982,Cotie,F,5

   914751  1982,Suong,F,5
   914752: 1982,Susette,F,5
   914753  1982,Suzzanna,F,5

   915102  1982,Jerry,M,2941
   915103: 1982,Seth,M,2911
   915104  1982,Vincent,M,2864

   923355  1983,Anya,F,145
   923356: 1983,Lisette,F,145
   923357  1983,Kevin,F,144

   923515  1983,Kelsie,F,115
   923516: 1983,Lissette,F,115
   923517  1983,Louisa,F,115

   924105  1983,Risa,F,62
   924106: 1983,Rosetta,F,62
   924107  1983,Tesha,F,62

   924331  1983,January,F,52
   924332: 1983,Josette,F,52
   924333  1983,Jovanna,F,52

   926746  1983,Lili,F,17
   926747: 1983,Liset,F,17
   926748  1983,Lorianne,F,17

   926949  1983,Lynsay,F,16
   926950: 1983,Lysette,F,16
   926951  1983,Madelin,F,16

   927003  1983,Sergio,F,16
   927004: 1983,Seth,F,16
   927005  1983,Shakeitha,F,16

   927675  1983,Lise,F,13
   927676: 1983,Lissett,F,13
   927677  1983,Lita,F,13

   928010  1983,Leonna,F,12
   928011: 1983,Lisset,F,12
   928012  1983,Lorenda,F,12

   928648  1983,Chantilly,F,10
   928649: 1983,Charlesetta,F,10
   928650  1983,Charlynn,F,10

   928839  1983,Linzy,F,10
   928840: 1983,Liseth,F,10
   928841  1983,Londa,F,10

   928947  1983,Ronnette,F,10
   928948: 1983,Rosette,F,10
   928949  1983,Rosy,F,10

   929309  1983,Jonika,F,9
   929310: 1983,Josetta,F,9
   929311  1983,Joshlyn,F,9

   930072  1983,Linsy,F,8
   930073: 1983,Lisett,F,8
   930074  1983,Livier,F,8

   930562  1983,Corynne,F,7
   930563: 1983,Cosette,F,7
   930564  1983,Courney,F,7

   931830  1983,Jamei,F,6
   931831: 1983,Jamesetta,F,6
   931832  1983,Jamyra,F,6

   934519  1983,Vincent,M,2894
   934520: 1983,Seth,M,2854
   934521  1983,Curtis,M,2847

   942660  1984,Kirstin,F,166
   942661: 1984,Lissette,F,166
   942662  1984,Marion,F,165

   942725  1984,Damaris,F,149
   942726: 1984,Lisette,F,149
   942727  1984,Magdalena,F,149

   943552  1984,Hattie,F,60
   943553: 1984,Josette,F,60
   943554  1984,Karisa,F,60

   943798  1984,Nanci,F,50
   943799: 1984,Rosetta,F,50
   943800  1984,Shae,F,50

   945715  1984,Serene,F,20
   945716: 1984,Seth,F,20
   945717  1984,Shalynn,F,20

   945850  1984,Linzy,F,19
   945851: 1984,Liset,F,19
   945852  1984,Lou,F,19

   946382  1984,Lekeshia,F,16
   946383: 1984,Lisset,F,16
   946384  1984,Loida,F,16

   947150  1984,Linzie,F,13
   947151: 1984,Lissete,F,13
   947152  1984,Lory,F,13

   947870  1984,Lise,F,11
   947871: 1984,Lissett,F,11
   947872  1984,Litisha,F,11

   947878  1984,Luna,F,11
   947879: 1984,Lysette,F,11
   947880  1984,Ma,F,11

   948887  1984,Lisbet,F,9
   948888: 1984,Liseth,F,9
   948889: 1984,Lisett,F,9
   948890  1984,Lorean,F,9

   949724  1984,Roseana,F,8
   949725: 1984,Rosette,F,8
   949726  1984,Royal,F,8

   950095  1984,Corry,F,7
   950096: 1984,Cosette,F,7
   950097  1984,Courtnei,F,7

   952787  1984,Jamellah,F,5
   952788: 1984,Jamesetta,F,5
   952789  1984,Jamiemarie,F,5

   954023  1984,Evan,M,2937
   954024: 1984,Seth,M,2914
   954025  1984,Randy,M,2906

   960731  1984,Joseangel,M,5
   960732: 1984,Joseth,M,5
   960733  1984,Josian,M,5

   962081  1985,Emilee,F,198
   962082: 1985,Lissette,F,198
   962083  1985,Sheryl,F,198

   962183  1985,Jo,F,171
   962184: 1985,Lisette,F,171
   962185  1985,Magan,F,171

   963075  1985,Jenica,F,62
   963076: 1985,Josette,F,62
   963077  1985,Karena,F,62

   963224  1985,Rosalba,F,56
   963225: 1985,Rosetta,F,56
   963226  1985,Samira,F,56

   964463  1985,Ligia,F,28
   964464: 1985,Liset,F,28
   964465  1985,Lotoya,F,28

   965469  1985,Leslieann,F,19
   965470: 1985,Lisset,F,19
   965471  1985,Louis,F,19

   965510  1985,Saran,F,19
   965511: 1985,Seth,F,19
   965512  1985,Shakeema,F,19

   966023  1985,Lynzee,F,16
   966024: 1985,Lysette,F,16
   966025  1985,Maddie,F,16

   966795  1985,Lise,F,13
   966796: 1985,Lissett,F,13
   966797  1985,Lizandra,F,13

   967133  1985,Linna,F,12
   967134: 1985,Lisett,F,12
   967135: 1985,Lissete,F,12
   967136  1985,Lorenzo,F,12

   967791  1985,Chardai,F,10
   967792: 1985,Charlesetta,F,10
   967793  1985,Chayla,F,10

   967987  1985,Lessa,F,10
   967988: 1985,Liseth,F,10
   967989  1985,Lizzet,F,10

   971101  1985,Josefine,F,6
   971102: 1985,Josetta,F,6
   971103  1985,Josi,F,6

   971295  1985,Lesbia,F,6
   971296: 1985,Lesette,F,6
   971297  1985,Leshawn,F,6

   971315  1985,Lislie,F,6
   971316: 1985,Lisseth,F,6
   971317  1985,Litany,F,6

   971630  1985,Serrita,F,6
   971631: 1985,Setareh,F,6
   971632  1985,Seville,F,6

   971766  1985,Susane,F,6
   971767: 1985,Susette,F,6
   971768  1985,Sybrina,F,6

   973858  1985,Dennis,M,2842
   973859: 1985,Seth,M,2822
   973860  1985,Trevor,M,2821

   982170  1986,Jerrica,F,199
   982171: 1986,Lissette,F,199
   982172  1986,Malinda,F,199

   982265  1986,Crista,F,171
   982266: 1986,Lisette,F,171
   982267  1986,Antionette,F,170

   983166  1986,Randa,F,62
   983167: 1986,Rosetta,F,62
   983168  1986,Shantia,F,62

   983646  1986,Joellen,F,44
   983647: 1986,Josette,F,44
   983648  1986,Julienne,F,44

   983698  1986,Lesa,F,43
   983699: 1986,Liset,F,43
   983700  1986,Meisha,F,43

   984835  1986,Lequita,F,25
   984836: 1986,Lisset,F,25
   984837  1986,Lorianne,F,25

   985297  1986,Loran,F,21
   985298: 1986,Lysette,F,21
   985299  1986,Maricruz,F,21

   985328  1986,Season,F,21
   985329: 1986,Seth,F,21
   985330  1986,Shakema,F,21

   985787  1986,Lilah,F,18
   985788: 1986,Lissett,F,18
   985789  1986,Lita,F,18

   986432  1986,Linnette,F,15
   986433: 1986,Lisseth,F,15
   986434  1986,Lorenzo,F,15

   986668  1986,Linna,F,14
   986669: 1986,Liseth,F,14
   986670: 1986,Lisett,F,14
   986671  1986,Lorine,F,14

   987814  1986,Roselynn,F,11
   987815: 1986,Rosette,F,11
   987816  1986,Rowan,F,11

   988234  1986,Liat,F,10
   988235: 1986,Lissete,F,10
   988236  1986,Loida,F,10

   991278  1986,Gisell,F,6
   991279: 1986,Gisette,F,6
   991280  1986,Gissell,F,6

   991927  1986,Seretha,F,6
   991928: 1986,Seteria,F,6
   991929  1986,Shabre,F,6

   992056  1986,Sundra,F,6
   992057: 1986,Susette,F,6
   992058  1986,Swan,F,6

   992529  1986,Charleigh,F,5
   992530: 1986,Charlesetta,F,5
   992531  1986,Charletha,F,5

   992623  1986,Cosandra,F,5
   992624: 1986,Cosette,F,5
   992625  1986,Coti,F,5

   992867  1986,Gissela,F,5
   992868: 1986,Gissette,F,5
   992869  1986,Glennis,F,5

   993028  1986,Josei,F,5
   993029: 1986,Josetta,F,5
   993030  1986,Jossalyn,F,5

   994248  1986,Wesley,M,3040
   994249: 1986,Seth,M,2978
   994250  1986,Trevor,M,2978

  1001033  1986,Charity,M,5
  1001034: 1986,Chaseton,M,5
  1001035  1986,Chasity,M,5

  1001164  1986,Doroteo,M,5
  1001165: 1986,Dorsett,M,5
  1001166  1986,Dory,M,5

  1001534  1986,Lindel,M,5
  1001535: 1986,Lissette,M,5
  1001536  1986,Lizandro,M,5

  1002844  1987,Kirstin,F,196
  1002845: 1987,Lissette,F,196
  1002846  1987,Mariel,F,196

  1002901  1987,Karly,F,179
  1002902: 1987,Lisette,F,179
  1002903  1987,Marian,F,179

  1003633  1987,Randee,F,74
  1003634: 1987,Rosetta,F,74
  1003635  1987,Sequoia,F,74

  1004846  1987,Jerry,F,34
  1004847: 1987,Josette,F,34
  1004848  1987,Ka,F,34

  1005110  1987,Lan,F,30
  1005111: 1987,Liset,F,30
  1005112  1987,Lura,F,30

  1005556  1987,Lisandra,F,25
  1005557: 1987,Lisset,F,25
  1005558: 1987,Lissett,F,25
  1005559  1987,Lyn,F,25

  1006761  1987,Lysandra,F,17
  1006762: 1987,Lysette,F,17
  1006763  1987,Maciel,F,17

  1007440  1987,Linley,F,14
  1007441: 1987,Liseth,F,14
  1007442  1987,Lita,F,14

  1007527  1987,Seaira,F,14
  1007528: 1987,Seth,F,14
  1007529  1987,Shabnam,F,14

  1008148  1987,Linnette,F,12
  1008149: 1987,Lisett,F,12
  1008150: 1987,Lissete,F,12
  1008151  1987,Loree,F,12

  1008985  1987,Jory,F,10
  1008986: 1987,Josetta,F,10
  1008987  1987,Josi,F,10

  1009082  1987,Lisbet,F,10
  1009083: 1987,Lisseth,F,10
  1009084  1987,Llesenia,F,10

  1010538  1987,Rodnesha,F,8
  1010539: 1987,Rosette,F,8
  1010540  1987,Rossy,F,8

  1010904  1987,Chantha,F,7
  1010905: 1987,Charlesetta,F,7
  1010906  1987,Charlotta,F,7

  1014344  1987,Lessa,F,5
  1014345: 1987,Lessette,F,5
  1014346  1987,Letara,F,5

  1014986  1987,Susanah,F,5
  1014987: 1987,Susette,F,5
  1014988  1987,Suzane,F,5

  1015316  1987,Craig,M,3363
  1015317: 1987,Seth,M,3338
  1015318  1987,Christian,M,3322

  1020803  1987,Charvis,M,7
  1020804: 1987,Chaseton,M,7
  1020805  1987,Chaun,M,7

  1024268  1988,Laquita,F,196
  1024269: 1988,Lissette,F,196
  1024270  1988,Malinda,F,196

  1024397  1988,Davina,F,159
  1024398: 1988,Lisette,F,159
  1024399  1988,Shanda,F,159

  1024946  1988,Mark,F,84
  1024947: 1988,Rosetta,F,84
  1024948  1988,Shala,F,84

  1025937  1988,Joel,F,42
  1025938: 1988,Josette,F,42
  1025939  1988,Joycelyn,F,42

  1026143  1988,Lindsie,F,38
  1026144: 1988,Lisset,F,38
  1026145  1988,Mandee,F,38

  1027341  1988,Lindi,F,23
  1027342: 1988,Lissett,F,23
  1027343  1988,Lorelei,F,23

  1027474  1988,Lesha,F,22
  1027475: 1988,Lisett,F,22
  1027476  1988,Livia,F,22

  1027994  1988,See,F,19
  1027995: 1988,Seth,F,19
  1027996  1988,Shacora,F,19

  1028573  1988,Linnette,F,16
  1028574: 1988,Liset,F,16
  1028575  1988,Loan,F,16

  1029489  1988,Linden,F,13
  1029490: 1988,Lisseth,F,13
  1029491  1988,Litisha,F,13

  1030285  1988,Lise,F,11
  1030286: 1988,Lissete,F,11
  1030287  1988,Lizandra,F,11

  1030823  1988,Lilli,F,10
  1030824: 1988,Liseth,F,10
  1030825  1988,Lizzett,F,10

  1030834  1988,Lyra,F,10
  1030835: 1988,Lysette,F,10
  1030836  1988,Madelene,F,10

  1030921  1988,Roniesha,F,10
  1030922: 1988,Rosette,F,10
  1030923  1988,Rowan,F,10

  1031917  1988,Cortne,F,8
  1031918: 1988,Cosette,F,8
  1031919  1988,Cosima,F,8

  1033072  1988,Jordane,F,7
  1033073: 1988,Josetta,F,7
  1033074  1988,Joshlynn,F,7

  1035499  1988,Chariti,F,5
  1035500: 1988,Charlesetta,F,5
  1035501  1988,Charlet,F,5

  1036332  1988,Leonarda,F,5
  1036333: 1988,Lesette,F,5
  1036334  1988,Leshae,F,5

  1036819  1988,Sesily,F,5
  1036820: 1988,Seteria,F,5
  1036821  1988,Shabreka,F,5

  1037339  1988,Victor,M,3621
  1037340: 1988,Seth,M,3490
  1037341  1988,Taylor,M,3488

  1043795  1988,Chapman,M,6
  1043796: 1988,Chaseton,M,6
  1043797  1988,Chau,M,6

  1046502  1989,Kyle,F,254
  1046503: 1989,Lissette,F,254
  1046504  1989,Roxanna,F,254

  1046661  1989,Latosha,F,194
  1046662: 1989,Lisette,F,194
  1046663  1989,Salina,F,194

  1047579  1989,Liz,F,72
  1047580: 1989,Rosetta,F,72
  1047581  1989,Sarita,F,72

  1048048  1989,Jennah,F,51
  1048049: 1989,Josette,F,51
  1048050  1989,Keonna,F,51

  1048328  1989,Lasha,F,44
  1048329: 1989,Liset,F,44
  1048330  1989,Maegen,F,44

  1048958  1989,Linley,F,33
  1048959: 1989,Lisset,F,33
  1048960  1989,Lucila,F,33

  1050043  1989,Lashara,F,22
  1050044: 1989,Liseth,F,22
  1050045  1989,Luisana,F,22

  1050701  1989,Linden,F,18
  1050702: 1989,Lisseth,F,18
  1050703  1989,Luci,F,18
  1050704  1989,Lysa,F,18
  1050705: 1989,Lysette,F,18
  1050706  1989,Mairead,F,18

  1050912  1989,Linzey,F,17
  1050913: 1989,Lisett,F,17
  1050914  1989,Loralee,F,17

  1051442  1989,Lisabeth,F,15
  1051443: 1989,Lissete,F,15
  1051444: 1989,Lissett,F,15
  1051445  1989,Lyna,F,15

  1052800  1989,Cornisha,F,11
  1052801: 1989,Cosette,F,11
  1052802  1989,Courntey,F,11

  1053084  1989,Sendy,F,11
  1053085: 1989,Seth,F,11
  1053086  1989,Shaakira,F,11

  1054068  1989,Jomarie,F,9
  1054069: 1989,Josetta,F,9
  1054070  1989,Joshalyn,F,9

  1054987  1989,Lisaann,F,8
  1054988: 1989,Lisete,F,8
  1054989  1989,Livier,F,8

  1056810  1989,Charina,F,6
  1056811: 1989,Charlesetta,F,6
  1056812  1989,Charlesha,F,6

  1057411  1989,Lera,F,6
  1057412: 1989,Lesette,F,6
  1057413  1989,Leshonda,F,6

  1058800  1989,Gissele,F,5
  1058801: 1989,Gissette,F,5
  1058802  1989,Glendalee,F,5

  1058909  1989,Jamelyn,F,5
  1058910: 1989,Jamesetta,F,5
  1058911  1989,Jamiee,F,5

  1060371  1989,Mitchell,M,3645
  1060372: 1989,Seth,M,3633
  1060373  1989,Erik,M,3628

  1067366  1989,Charon,M,6
  1067367: 1989,Chaseton,M,6
  1067368  1989,Chasse,M,6

  1070401  1990,Lakeshia,F,214
  1070402: 1990,Lissette,F,214
  1070403  1990,Richelle,F,214

  1070448  1990,Shari,F,201
  1070449: 1990,Lisette,F,200
  1070450  1990,Candy,F,199

  1071727  1990,Ronni,F,58
  1071728: 1990,Rosetta,F,58
  1071729  1990,Sallie,F,58

  1071887  1990,Josalyn,F,52
  1071888: 1990,Josette,F,52
  1071889  1990,Kaysha,F,52

  1072764  1990,Lauri,F,34
  1072765: 1990,Lisset,F,34
  1072766  1990,Lluvia,F,34

  1072827  1990,Lili,F,33
  1072828: 1990,Liset,F,33
  1072829  1990,Lorissa,F,33

  1073361  1990,Leonela,F,27
  1073362: 1990,Liseth,F,27
  1073363  1990,Lisha,F,27

  1073680  1990,Linzie,F,24
  1073681: 1990,Lisett,F,24
  1073682: 1990,Lissett,F,24
  1073683  1990,Lizbet,F,24

  1074475  1990,Linsay,F,19
  1074476: 1990,Lisseth,F,19
  1074477  1990,Lonnie,F,19

  1074689  1990,Lisbet,F,18
  1074690: 1990,Lissete,F,18
  1074691  1990,Loree,F,18

  1074697  1990,Lynnae,F,18
  1074698: 1990,Lysette,F,18
  1074699  1990,Malky,F,18

  1076047  1990,Cornesha,F,13
  1076048: 1990,Cosette,F,13
  1076049  1990,Coutney,F,13

  1077242  1990,Roseline,F,11
  1077243: 1990,Rosette,F,11
  1077244  1990,Roslynn,F,11

  1077261  1990,Sequoyah,F,11
  1077262: 1990,Seth,F,11
  1077263  1990,Shabreka,F,11

  1079903  1990,Charlean,F,7
  1079904: 1990,Charlesetta,F,7
  1079905  1990,Charlesia,F,7

  1082265  1990,Surena,F,6
  1082266: 1990,Susette,F,6
  1082267  1990,Suzzette,F,6

  1083440  1990,Joselyne,F,5
  1083441: 1990,Josetta,F,5
  1083442  1990,Joshlin,F,5
  1083443: 1990,Jossette,F,5
  1083444  1990,Jovannie,F,5

  1084568  1990,Tempess,F,5
  1084569: 1990,Tempsett,F,5
  1084570  1990,Tendria,F,5

  1084838  1990,Miguel,M,3693
  1084839: 1990,Seth,M,3560
  1084840  1990,Douglas,M,3544

  1093045  1990,Charvez,M,5
  1093046: 1990,Chaseton,M,5
  1093047  1990,Chawn,M,5

  1095172  1991,Jesica,F,199
  1095173: 1991,Lissette,F,199
  1095174  1991,Lynsey,F,199

  1095226  1991,Lia,F,185
  1095227: 1991,Lisette,F,185
  1095228  1991,Hailee,F,184

  1095618  1991,Jazzmine,F,115
  1095619: 1991,Josette,F,115
  1095620  1991,Keyana,F,115

  1097088  1991,Rashelle,F,41
  1097089: 1991,Rosetta,F,41
  1097090  1991,Salma,F,41

  1097285  1991,Letisha,F,37
  1097286: 1991,Lisset,F,37
  1097287  1991,Lucila,F,37

  1097477  1991,Lili,F,34
  1097478: 1991,Liset,F,34
  1097479  1991,Lucie,F,34

  1097957  1991,Cherisse,F,28
  1097958: 1991,Cosette,F,28
  1097959  1991,Dashia,F,28

  1098637  1991,Luci,F,23
  1098638: 1991,Lysette,F,23
  1098639  1991,Madonna,F,23

  1098805  1991,Linden,F,22
  1098806: 1991,Liseth,F,22
  1098807  1991,Lyna,F,22

  1099133  1991,Lindzy,F,20
  1099134: 1991,Lisett,F,20
  1099135  1991,Lisha,F,20
  1099136: 1991,Lissete,F,20
  1099137  1991,Lizzet,F,20

  1099321  1991,Lian,F,19
  1099322: 1991,Lissett,F,19
  1099323  1991,Lorinda,F,19

  1100109  1991,Serafina,F,16
  1100110: 1991,Seth,F,16
  1100111  1991,Shabria,F,16

  1101040  1991,Liandra,F,13
  1101041: 1991,Lisseth,F,13
  1101042  1991,Lorraina,F,13

  1103703  1991,Chari,F,8
  1103704: 1991,Charlesetta,F,8
  1103705  1991,Charniece,F,8

  1105003  1991,Josalynn,F,7
  1105004: 1991,Josetta,F,7
  1105005  1991,Josha,F,7

  1105578  1991,Surina,F,7
  1105579: 1991,Susette,F,7
  1105580  1991,Susi,F,7

  1106153  1991,Elisandra,F,6
  1106154: 1991,Eliset,F,6
  1106155  1991,Elishah,F,6

  1106623  1991,Lera,F,6
  1106624: 1991,Lesette,F,6
  1106625  1991,Leslieanne,F,6

  1106663  1991,Lynzy,F,6
  1106664: 1991,Lyssette,F,6
  1106665  1991,Macaela,F,6

  1108121  1991,Giovanny,F,5
  1108122: 1991,Gissette,F,5
  1108123  1991,Giulianna,F,5

  1108346  1991,Joshlynn,F,5
  1108347: 1991,Jossette,F,5
  1108348  1991,Josslyn,F,5

  1109151  1991,Seslie,F,5
  1109152: 1991,Setareh,F,5
  1109153  1991,Shabrina,F,5

  1109776  1991,Phillip,M,3848
  1109777: 1991,Seth,M,3806
  1109778  1991,Joel,M,3759

  1120143  1992,Iliana,F,244
  1120144: 1992,Lisette,F,244
  1120145  1992,Adrianne,F,243

  1120427  1992,Jazmyn,F,163
  1120428: 1992,Lissette,F,163
  1120429  1992,Brigitte,F,162

  1121410  1992,Jenee,F,65
  1121411: 1992,Josette,F,65
  1121412  1992,Jovana,F,65

  1121631  1992,Porcha,F,57
  1121632: 1992,Rosetta,F,57
  1121633  1992,Shamari,F,57

  1123057  1992,Lilibeth,F,29
  1123058: 1992,Lisset,F,29
  1123059  1992,Loran,F,29

  1123355  1992,Lindsi,F,26
  1123356: 1992,Liset,F,26
  1123357  1992,Loriann,F,26
  1123358  1992,Lyla,F,26
  1123359: 1992,Lysette,F,26
  1123360  1992,Macee,F,26

  1123640  1992,Lavonda,F,24
  1123641: 1992,Lisett,F,24
  1123642  1992,Lizzet,F,24

  1124045  1992,Claudine,F,21
  1124046: 1992,Cosette,F,21
  1124047  1992,Courtlyn,F,21

  1124711  1992,Lida,F,18
  1124712: 1992,Liseth,F,18
  1124713  1992,Lovely,F,18

  1126289  1992,Serria,F,13
  1126290: 1992,Seth,F,13
  1126291  1992,Shady,F,13

  1126637  1992,Lilybeth,F,12
  1126638: 1992,Lissett,F,12
  1126639  1992,Lizandra,F,12

  1127136  1992,Lexa,F,11
  1127137: 1992,Lissete,F,11
  1127138: 1992,Lisseth,F,11
  1127139  1992,Lizvette,F,11

  1127244  1992,Roniqua,F,11
  1127245: 1992,Rosette,F,11
  1127246  1992,Roslynn,F,11

  1127512  1992,Charleigh,F,10
  1127513: 1992,Charlesetta,F,10
  1127514  1992,Chasady,F,10

  1129216  1992,Joscelyne,F,8
  1129217: 1992,Josetta,F,8
  1129218  1992,Josseline,F,8

  1130512  1992,Lynzy,F,7
  1130513: 1992,Lyssette,F,7
  1130514  1992,Machaela,F,7

  1133260  1992,Elisama,F,5
  1133261: 1992,Eliset,F,5
  1133262  1992,Elita,F,5

  1134425  1992,Sequoyia,F,5
  1134426: 1992,Setareh,F,5
  1134427  1992,Severa,F,5

  1135024  1992,Luke,M,4064
  1135025: 1992,Seth,M,3911
  1135026  1992,George,M,3892

  1142496  1992,Charon,M,6
  1142497: 1992,Chaseton,M,6
  1142498  1992,Chau,M,6

  1145843  1993,Denisse,F,164
  1145844: 1993,Lisette,F,164
  1145845  1993,Maci,F,164

  1145896  1993,Linsey,F,154
  1145897: 1993,Lissette,F,154
  1145898  1993,Malika,F,154

  1147187  1993,Rosalia,F,52
  1147188: 1993,Rosetta,F,52
  1147189  1993,Shaquanna,F,52

  1147209  1993,Jenee,F,51
  1147210: 1993,Josette,F,51
  1147211  1993,Josselyn,F,51

  1148000  1993,Lasha,F,35
  1148001: 1993,Lisset,F,35
  1148002  1993,Macee,F,35

  1148382  1993,Leora,F,30
  1148383: 1993,Liset,F,30
  1148384  1993,Lynzie,F,30

  1149028  1993,Clancy,F,24
  1149029: 1993,Cosette,F,24
  1149030  1993,Damara,F,24

  1150092  1993,Lili,F,18
  1150093: 1993,Lisett,F,18
  1150094  1993,Lovely,F,18
  1150095: 1993,Lysette,F,18
  1150096  1993,Mariaguadalupe,F,18

  1150568  1993,Linzi,F,16
  1150569: 1993,Liseth,F,16
  1150570: 1993,Lisseth,F,16
  1150571: 1993,Lissett,F,16
  1150572  1993,Lizzet,F,16

  1151294  1993,Serria,F,14
  1151295: 1993,Seth,F,14
  1151296  1993,Shaakira,F,14

  1152048  1993,Lisabeth,F,12
  1152049: 1993,Lissete,F,12
  1152050  1993,Lizmarie,F,12

  1156807  1993,Charlesa,F,6
  1156808: 1993,Charlesetta,F,6
  1156809  1993,Charlesha,F,6

  1157245  1993,Jorgina,F,6
  1157246: 1993,Josetta,F,6
  1157247  1993,Jourden,F,6

  1160632  1993,Ethan,M,4160
  1160633: 1993,Seth,M,4060
  1160634  1993,Cory,M,3996

  1166369  1993,Charvis,M,9
  1166370: 1993,Chaseton,M,9
  1166371  1993,Chaun,M,9

  1167722  1993,Josemiguel,M,7
  1167723: 1993,Joseth,M,7
  1167724  1993,Josiel,M,7

  1171651  1994,Dominque,F,196
  1171652: 1994,Lissette,F,196
  1171653  1994,Tanesha,F,196

  1171752  1994,Lakeisha,F,174
  1171753: 1994,Lisette,F,174
  1171754  1994,Baylee,F,173

  1172791  1994,Johannah,F,66
  1172792: 1994,Josette,F,66
  1172793  1994,Kathlyn,F,66

  1173278  1994,Polly,F,49
  1173279: 1994,Rosetta,F,49
  1173280  1994,Shalynn,F,49

  1174044  1994,Lili,F,34
  1174045: 1994,Liset,F,34
  1174046  1994,Lucila,F,34

  1174552  1994,Laurissa,F,28
  1174553: 1994,Lisset,F,28
  1174554  1994,Maisha,F,28

  1175029  1994,Liyah,F,24
  1175030: 1994,Lysette,F,24
  1175031  1994,Maressa,F,24

  1175154  1994,Lexxus,F,23
  1175155: 1994,Lissett,F,23
  1175156  1994,Lorrin,F,23

  1175326  1994,Lilianna,F,22
  1175327: 1994,Liseth,F,22
  1175328  1994,Lizbet,F,22

  1175763  1994,Cornisha,F,19
  1175764: 1994,Cosette,F,19
  1175765  1994,Criselda,F,19

  1176292  1994,Lilli,F,17
  1176293: 1994,Lisett,F,17
  1176294  1994,Loraine,F,17

  1179219  1994,Lise,F,10
  1179220: 1994,Lissete,F,10
  1179221  1994,Lizzett,F,10

  1180826  1994,Lissandra,F,8
  1180827: 1994,Lisseth,F,8
  1180828  1994,Liv,F,8

  1181765  1994,Josefine,F,7
  1181766: 1994,Josetta,F,7
  1181767  1994,Joslynne,F,7

  1182238  1994,Serria,F,7
  1182239: 1994,Seth,F,7
  1182240  1994,Shabana,F,7

  1183193  1994,Josselyne,F,6
  1183194: 1994,Jossette,F,6
  1183195  1994,Joua,F,6

  1184994  1994,Jamerica,F,5
  1184995: 1994,Jamesetta,F,5
  1184996  1994,Jameson,F,5

  1185487  1994,Lyrica,F,5
  1185488: 1994,Lyssette,F,5
  1185489  1994,Mac,F,5

  1186172  1994,Sundra,F,5
  1186173: 1994,Sunset,F,5
  1186174  1994,Surayyah,F,5

  1186545  1994,Ethan,M,4165
  1186546: 1994,Seth,M,4133
  1186547  1994,Luke,M,4094

  1195983  1994,Josephthomas,M,5
  1195984: 1994,Joseth,M,5
  1195985  1994,Joshual,M,5

  1196447  1994,Serafim,M,5
  1196448: 1994,Seton,M,5
  1196449  1994,Seung,M,5

  1197716  1995,Vanesa,F,183
  1197717: 1995,Lissette,F,182
  1197718  1995,Leeann,F,181

  1197760  1995,Madyson,F,170
  1197761: 1995,Lisette,F,169
  1197762  1995,Stefani,F,169

  1199229  1995,Jacinta,F,50
  1199230: 1995,Josette,F,50
  1199231  1995,Justyce,F,50

  1199768  1995,Rilee,F,38
  1199769: 1995,Rosetta,F,38
  1199770  1995,Seana,F,38

  1200385  1995,Corine,F,29
  1200386: 1995,Cosette,F,29
  1200387  1995,Dajanae,F,29

  1200434  1995,Leighanne,F,29
  1200435: 1995,Lisset,F,29
  1200436  1995,Marcelle,F,29

  1200745  1995,Lyla,F,26
  1200746: 1995,Lysette,F,26
  1200747  1995,Madilynn,F,26

  1201839  1995,Lindsi,F,19
  1201840: 1995,Liset,F,19
  1201841  1995,Lizzie,F,19

  1202287  1995,Lilli,F,17
  1202288: 1995,Lissett,F,17
  1202289  1995,Love,F,17

  1203172  1995,Lindsee,F,14
  1203173: 1995,Lisett,F,14
  1203174  1995,Lonna,F,14

  1203571  1995,Linsay,F,13
  1203572: 1995,Liseth,F,13
  1203573  1995,Lizandra,F,13

  1204027  1995,Lisha,F,12
  1204028: 1995,Lissete,F,12
  1204029  1995,Lorrin,F,12

  1204545  1995,Linzey,F,11
  1204546: 1995,Lisseth,F,11
  1204547  1995,Loida,F,11

  1207024  1995,Seryna,F,8
  1207025: 1995,Seth,F,8
  1207026  1995,Sevana,F,8

  1211935  1995,Rosene,F,5
  1211936: 1995,Rosette,F,5
  1211937  1995,Roshaun,F,5

  1212003  1995,Sesilia,F,5
  1212004: 1995,Setareh,F,5
  1212005: 1995,Seton,F,5
  1212006  1995,Shaana,F,5

  1212158  1995,Susann,F,5
  1212159: 1995,Suset,F,5
  1212160  1995,Swathi,F,5

  1212550  1995,Chase,M,3917
  1212551: 1995,Seth,M,3912
  1212552  1995,Adrian,M,3910

  1220408  1995,Chao,M,6
  1220409: 1995,Chaseton,M,6
  1220410  1995,Chasten,M,6

  1221994  1995,Josephus,M,5
  1221995: 1995,Joseth,M,5
  1221996  1995,Josie,M,5

  1223789  1996,Katheryn,F,187
  1223790: 1996,Lisette,F,187
  1223791  1996,Brea,F,186

  1223840  1996,Latasha,F,175
  1223841: 1996,Lissette,F,175
  1223842  1996,Pearl,F,175

  1225018  1996,Hayli,F,60
  1225019: 1996,Josette,F,60
  1225020  1996,Kaitlan,F,60

  1226022  1996,Cassi,F,36
  1226023: 1996,Cosette,F,36
  1226024  1996,Dajanae,F,36

  1226178  1996,Lynne,F,34
  1226179: 1996,Lysette,F,34
  1226180  1996,Mackinzie,F,34

  1226270  1996,Rivky,F,33
  1226271: 1996,Rosetta,F,33
  1226272  1996,Sanjana,F,33

  1226377  1996,Linzy,F,31
  1226378: 1996,Lisset,F,31
  1226379  1996,Madelynne,F,31

  1226784  1996,Letitia,F,27
  1226785: 1996,Liset,F,27
  1226786  1996,Lizett,F,27

  1228726  1996,Linzi,F,16
  1228727: 1996,Liseth,F,16
  1228728  1996,Lonnie,F,16

  1229022  1996,Liesel,F,15
  1229023: 1996,Lisseth,F,15
  1229024  1996,Loraine,F,15

  1229456  1996,Selin,F,14
  1229457: 1996,Seth,F,14
  1229458  1996,Shabree,F,14

  1231334  1996,Lilyanne,F,10
  1231335: 1996,Lissett,F,10
  1231336  1996,Liya,F,10

  1232264  1996,Suhey,F,9
  1232265: 1996,Suset,F,9
  1232266  1996,Suzett,F,9

  1233140  1996,Seriah,F,8
  1233141: 1996,Setareh,F,8
  1233142  1996,Sevana,F,8

  1233219  1996,Supriya,F,8
  1233220: 1996,Susette,F,8
  1233221  1996,Suzann,F,8

  1234064  1996,Lisabeth,F,7
  1234065: 1996,Lisett,F,7
  1234066: 1996,Lissete,F,7
  1234067  1996,Livier,F,7

  1238772  1996,Angel,M,3912
  1238773: 1996,Seth,M,3886
  1238774  1996,Mason,M,3880

  1244730  1996,Channon,M,9
  1244731: 1996,Chaseton,M,9
  1244732  1996,Chay,M,9

  1247503  1996,Seiya,M,6
  1247504: 1996,Sethe,M,6
  1247505  1996,Sevag,M,6

  1249947  1997,Christiana,F,286
  1249948: 1997,Lisette,F,286
  1249949  1997,Nataly,F,285

  1250343  1997,Keira,F,164
  1250344: 1997,Lissette,F,164
  1250345  1997,Lizeth,F,164

  1251342  1997,Jenessa,F,65
  1251343: 1997,Josette,F,65
  1251344  1997,Kailah,F,65

  1251773  1997,Kya,F,50
  1251774: 1997,Lisset,F,50
  1251775  1997,Mahala,F,50

  1252581  1997,Charisse,F,34
  1252582: 1997,Cosette,F,34
  1252583  1997,Courtni,F,34

  1252873  1997,Layna,F,31
  1252874: 1997,Lysette,F,31
  1252875  1997,Majesty,F,31

  1253180  1997,Reghan,F,28
  1253181: 1997,Rosetta,F,28
  1253182  1997,Rosita,F,28

  1254526  1997,Lillia,F,19
  1254527: 1997,Lisseth,F,19
  1254528  1997,Lorianne,F,19

  1255243  1997,Lenae,F,16
  1255244: 1997,Liseth,F,16
  1255245: 1997,Lissete,F,16
  1255246  1997,Lizandra,F,16

  1256308  1997,Lindi,F,13
  1256309: 1997,Lissett,F,13
  1256310  1997,Lizmarie,F,13

  1257297  1997,Linzey,F,11
  1257298: 1997,Liset,F,11
  1257299  1997,Lita,F,11

  1257953  1997,Liora,F,10
  1257954: 1997,Lisett,F,10
  1257955  1997,Loida,F,10

  1259432  1997,Josilynn,F,8
  1259433: 1997,Jossette,F,8
  1259434  1997,Jourdin,F,8

  1259789  1997,Rosangelica,F,8
  1259790: 1997,Rosette,F,8
  1259791  1997,Roshanda,F,8

  1259821  1997,Senora,F,8
  1259822: 1997,Seth,F,8
  1259823  1997,Shabrea,F,8

  1261614  1997,Cortlynn,F,6
  1261615: 1997,Cossette,F,6
  1261616  1997,Coty,F,6

  1262238  1997,Leonila,F,6
  1262239: 1997,Lesette,F,6
  1262240  1997,Leshea,F,6

  1262708  1997,Surina,F,6
  1262709: 1997,Susette,F,6
  1262710  1997,Suzett,F,6

  1263346  1997,Charlese,F,5
  1263347: 1997,Charlesetta,F,5
  1263348  1997,Charlesia,F,5

  1263974  1997,Joscelyne,F,5
  1263975: 1997,Josetta,F,5
  1263976  1997,Joshanae,F,5

  1264871  1997,Serrena,F,5
  1264872: 1997,Seta,F,5
  1264873  1997,Sevina,F,5

  1265454  1997,Mitchell,M,4067
  1265455: 1997,Seth,M,4042
  1265456  1997,Lucas,M,4031

  1274849  1997,Chardarius,M,5
  1274850: 1997,Chaseton,M,5
  1274851  1997,Chatham,M,5

  1275899  1997,Sergi,M,5
  1275900: 1997,Set,M,5
  1275901  1997,Seung,M,5

  1277185  1998,Keeley,F,195
  1277186: 1998,Lisette,F,195
  1277187  1998,Luisa,F,195

  1277281  1998,Jackie,F,173
  1277282: 1998,Lissette,F,173
  1277283  1998,Symone,F,173

  1278590  1998,Rochel,F,58
  1278591: 1998,Rosetta,F,58
  1278592  1998,Tavia,F,58

  1278641  1998,Joni,F,56
  1278642: 1998,Josette,F,56
  1278643  1998,Khalia,F,56

  1279254  1998,Lakisha,F,41
  1279255: 1998,Lisset,F,41
  1279256  1998,Mallori,F,41

  1279294  1998,Carlene,F,40
  1279295: 1998,Cosette,F,40
  1279296  1998,Darrien,F,40

  1280049  1998,Lissa,F,30
  1280050: 1998,Lysette,F,30
  1280051  1998,Majesty,F,30

  1280895  1998,Linzi,F,23
  1280896: 1998,Liseth,F,23
  1280897  1998,Liyah,F,23

  1281435  1998,Lian,F,20
  1281436: 1998,Liset,F,20
  1281437  1998,Lupe,F,20

  1281655  1998,Lindsie,F,19
  1281656: 1998,Lisseth,F,19
  1281657  1998,Logann,F,19

  1283097  1998,Linden,F,14
  1283098: 1998,Lissett,F,14
  1283099  1998,Loghan,F,14

  1283986  1998,Linsay,F,12
  1283987: 1998,Lisett,F,12
  1283988: 1998,Lissete,F,12
  1283989  1998,Lizandra,F,12

  1285058  1998,Josceline,F,10
  1285059: 1998,Jossette,F,10
  1285060  1998,Josslyn,F,10

  1286839  1998,Larena,F,8
  1286840: 1998,Lasette,F,8
  1286841  1998,Lashondra,F,8

  1288967  1998,Corvette,F,6
  1288968: 1998,Cossette,F,6
  1288969  1998,Cresencia,F,6

  1289961  1998,Sesilia,F,6
  1289962: 1998,Seth,F,6
  1289963  1998,Shabre,F,6

  1291719  1998,Lynsi,F,5
  1291720: 1998,Lyssette,F,5
  1291721  1998,Maaike,F,5

  1292849  1998,Kenneth,M,4587
  1292850: 1998,Seth,M,4585
  1292851  1998,Dalton,M,4563

  1298289  1998,Chanson,M,11
  1298290: 1998,Chaseton,M,11
  1298291  1998,Chawn,M,11

  1303774  1998,Seren,M,5
  1303775: 1998,Sethan,M,5
  1303776  1998,Seung,M,5

  1304676  1999,Drew,F,395
  1304677: 1999,Lisette,F,395
  1304678  1999,Celine,F,394

  1305019  1999,Kaycee,F,216
  1305020: 1999,Lissette,F,216
  1305021  1999,Aliya,F,215

  1305970  1999,Leyla,F,83
  1305971: 1999,Liset,F,83
  1305972  1999,Melia,F,83

  1306049  1999,Lindy,F,79
  1306050: 1999,Lisset,F,79
  1306051  1999,Magali,F,79

  1306574  1999,Joie,F,57
  1306575: 1999,Josette,F,57
  1306576  1999,Kacee,F,57

  1306705  1999,Azariah,F,53
  1306706: 1999,Cosette,F,53
  1306707  1999,Elli,F,53

  1307144  1999,Leslee,F,43
  1307145: 1999,Liseth,F,43
  1307146  1999,Mackenzy,F,43

  1308088  1999,Lisandra,F,29
  1308089: 1999,Lissete,F,29
  1308090  1999,Loni,F,29

  1308212  1999,Lilyan,F,28
  1308213: 1999,Lisseth,F,28
  1308214: 1999,Lissett,F,28
  1308215  1999,Lorissa,F,28

  1308229  1999,Raylynn,F,28
  1308230: 1999,Rosetta,F,28
  1308231  1999,Sahana,F,28

  1308310  1999,Lianne,F,27
  1308311: 1999,Lisett,F,27
  1308312  1999,Lizzet,F,27

  1308730  1999,Lindsie,F,24
  1308731: 1999,Lysette,F,24
  1308732  1999,Magdalen,F,24

  1314515  1999,Aurelie,F,8
  1314516: 1999,Auset,F,8
  1314517  1999,Autumne,F,8

  1316589  1999,Sury,F,7
  1316590: 1999,Susette,F,7
  1316591  1999,Sussy,F,7

  1317094  1999,Cortazia,F,6
  1317095: 1999,Cossette,F,6
  1317096  1999,Coumba,F,6

  1318107  1999,Roselle,F,6
  1318108: 1999,Rosette,F,6
  1318109  1999,Roshawn,F,6

  1318158  1999,Sesilia,F,6
  1318159: 1999,Seth,F,6
  1318160  1999,Sevannah,F,6

  1321063  1999,Isaac,M,6401
  1321064: 1999,Seth,M,6304
  1321065  1999,Trevor,M,6254

  1325797  1999,Chanz,M,14
  1325798: 1999,Chaseton,M,14
  1325799  1999,Chavez,M,14

  1327797  1999,Josefrancisco,M,9
  1327798: 1999,Joseth,M,9
  1327799  1999,Josha,M,9

  1327996  1999,Selim,M,9
  1327997: 1999,Sethan,M,9
  1327998  1999,Shadeed,M,9

  1330684  1999,Serbando,M,6
  1330685: 1999,Sethe,M,6
  1330686  1999,Sevaughn,M,6

  1333467  2000,Kalyn,F,256
  1333468: 2000,Lisette,F,256
  1333469  2000,Monserrat,F,256

  1333817  2000,Irma,F,164
  1333818: 2000,Lissette,F,164
  1333819  2000,Lorraine,F,164

  1334828  2000,Jimena,F,71
  1334829: 2000,Josette,F,71
  1334830  2000,Kandice,F,71

  1335089  2000,Cera,F,61
  1335090: 2000,Cosette,F,61
  1335091  2000,Danisha,F,61

  1335100  2000,Lamya,F,61
  1335101: 2000,Lisset,F,61
  1335102  2000,Magen,F,61

  1335862  2000,Perri,F,42
  1335863: 2000,Rosetta,F,42
  1335864  2000,Seana,F,42

  1336033  2000,Leilah,F,39
  1336034: 2000,Liset,F,39
  1336035  2000,Madolyn,F,39

  1337504  2000,Lilyanne,F,24
  1337505: 2000,Lisseth,F,24
  1337506  2000,Luiza,F,24

  1337853  2000,Lyndsi,F,22
  1337854: 2000,Lysette,F,22
  1337855  2000,Mahagony,F,22

  1338019  2000,Lezlie,F,21
  1338020: 2000,Liseth,F,21
  1338021: 2000,Lissett,F,21
  1338022  2000,Lolita,F,21

  1338969  2000,Lindsi,F,17
  1338970: 2000,Lissete,F,17
  1338971  2000,Lorianna,F,17

  1342195  2000,Lindzey,F,10
  1342196: 2000,Lisett,F,10
  1342197  2000,Lizmary,F,10

  1344199  2000,Serita,F,8
  1344200: 2000,Seth,F,8
  1344201  2000,Shadi,F,8

  1345497  2000,Sesilia,F,7
  1345498: 2000,Setareh,F,7
  1345499  2000,Shadajah,F,7

  1345955  2000,Aundraya,F,6
  1345956: 2000,Auset,F,6
  1345957  2000,Austine,F,6

  1346558  2000,Jossalyn,F,6
  1346559: 2000,Jossette,F,6
  1346560  2000,Jourdin,F,6

  1346803  2000,Leoni,F,6
  1346804: 2000,Lesette,F,6
  1346805  2000,Leshae,F,6

  1346852  2000,Lynnsie,F,6
  1346853: 2000,Lyssette,F,6
  1346854  2000,Macalah,F,6

  1348174  2000,Cortny,F,5
  1348175: 2000,Cossette,F,5
  1348176  2000,Coutney,F,5

  1349642  2000,Roselani,F,5
  1349643: 2000,Rosette,F,5
  1349644  2000,Rosey,F,5

  1349897  2000,Surie,F,5
  1349898: 2000,Suset,F,5
  1349899  2000,Syana,F,5

  1350322  2000,Alex,M,6744
  1350323: 2000,Seth,M,6715
  1350324  2000,Mason,M,6516

  1355583  2000,Champ,M,13
  1355584: 2000,Chaseton,M,13
  1355585  2000,Chistopher,M,13

  1358338  2000,Serigne,M,8
  1358339: 2000,Sethe,M,8
  1358340  2000,Sevan,M,8

  1359228  2000,Sequoyah,M,7
  1359229: 2000,Sethan,M,7
  1359230  2000,Shafer,M,7

  1361495  2000,Joses,M,5
  1361496: 2000,Joseth,M,5
  1361497  2000,Joshawn,M,5

  1363329  2001,Kaci,F,229
  1363330: 2001,Lisette,F,229
  1363331  2001,Chana,F,227

  1363890  2001,Keana,F,123
  1363891: 2001,Lissette,F,123
  1363892  2001,Shiann,F,123

  1364501  2001,Chesney,F,77
  1364502: 2001,Cosette,F,77
  1364503  2001,Cyan,F,77

  1364890  2001,Jersey,F,61
  1364891: 2001,Josette,F,61
  1364892  2001,Joslynn,F,61

  1365125  2001,Kelis,F,54
  1365126: 2001,Lisset,F,54
  1365127  2001,Morghan,F,54

  1365764  2001,Laryssa,F,40
  1365765: 2001,Liseth,F,40
  1365766  2001,Lizzie,F,40

  1366120  2001,Laynee,F,35
  1366121: 2001,Liset,F,35
  1366122  2001,Lynne,F,35

  1366640  2001,Lillyan,F,29
  1366641: 2001,Lisseth,F,29
  1366642  2001,Lyndee,F,29

  1366788  2001,Rosaura,F,28
  1366789: 2001,Rosetta,F,28
  1366790  2001,Sakina,F,28

  1369543  2001,Lior,F,15
  1369544: 2001,Lisett,F,15
  1369545  2001,Liya,F,15

  1369936  2001,Lilee,F,14
  1369937: 2001,Lissete,F,14
  1369938  2001,Lorren,F,14

  1370372  2001,Liora,F,13
  1370373: 2001,Lissett,F,13
  1370374  2001,Logann,F,13

  1370378  2001,Lynlee,F,13
  1370379: 2001,Lysette,F,13
  1370380  2001,Lyzette,F,13

  1373227  2001,Sereen,F,9
  1373228: 2001,Seth,F,9
  1373229  2001,Sevana,F,9

  1375550  2001,Rosabella,F,7
  1375551: 2001,Rosette,F,7
  1375552  2001,Rosmery,F,7

  1376076  2001,Aunya,F,6
  1376077: 2001,Auset,F,6
  1376078  2001,Austynn,F,6

  1379241  2001,Lysha,F,5
  1379242: 2001,Lyssette,F,5
  1379243  2001,Maaha,F,5

  1379829  2001,Sereina,F,5
  1379830: 2001,Setareh,F,5
  1379831  2001,Sevanah,F,5

  1380405  2001,Timothy,M,6416
  1380406: 2001,Seth,M,6222
  1380407  2001,Bryan,M,6124

  1386869  2001,Chanceler,M,10
  1386870: 2001,Chaseton,M,10
  1386871  2001,Chay,M,10

  1388234  2001,Joselito,M,8
  1388235: 2001,Joseth,M,8
  1388236  2001,Joshau,M,8

  1390670  2001,Sergei,M,6
  1390671: 2001,Sethan,M,6
  1390672: 2001,Sethaniel,M,6
  1390673  2001,Sevren,M,6

  1393651  2002,Kinsey,F,214
  1393652: 2002,Lisette,F,214
  1393653  2002,Treasure,F,214

  1394159  2002,Jaycie,F,124
  1394160: 2002,Lissette,F,124
  1394161  2002,Makaela,F,124

  1395283  2002,Brianda,F,58
  1395284: 2002,Cosette,F,58
  1395285  2002,Emelyn,F,58

  1395361  2002,Latasha,F,56
  1395362: 2002,Lisset,F,56
  1395363  2002,Marleigh,F,56

  1395584  2002,Joleen,F,50
  1395585: 2002,Josette,F,50
  1395586  2002,Kadie,F,50

  1396973  2002,Leslee,F,29
  1396974: 2002,Liset,F,29
  1396975  2002,Luis,F,29

  1397331  2002,Lelia,F,26
  1397332: 2002,Liseth,F,26
  1397333  2002,Lorien,F,26

  1397862  2002,Robbie,F,23
  1397863: 2002,Rosetta,F,23
  1397864  2002,Rossy,F,23

  1398920  2002,Lyana,F,18
  1398921: 2002,Lysette,F,18
  1398922  2002,Madason,F,18

  1399195  2002,Linh,F,17
  1399196: 2002,Lisett,F,17
  1399197: 2002,Lisseth,F,17
  1399198  2002,Lorenza,F,17

  1400296  2002,Lisamarie,F,14
  1400297: 2002,Lissete,F,14
  1400298  2002,Lizmarie,F,14

  1401231  2002,Linnette,F,12
  1401232: 2002,Lissett,F,12
  1401233  2002,Lizvet,F,12

  1402006  2002,Seriah,F,11
  1402007: 2002,Seth,F,11
  1402008  2002,Sevannah,F,11

  1406423  2002,Asra,F,6
  1406424: 2002,Assetou,F,6
  1406425  2002,Assia,F,6

  1406609  2002,Cosima,F,6
  1406610: 2002,Cossette,F,6
  1406611  2002,Courtnei,F,6

  1410786  2002,Cody,M,5934
  1410787: 2002,Seth,M,5736
  1410788  2002,Adrian,M,5679

  1419937  2002,Sergi,M,7
  1419938: 2002,Sethan,M,7
  1419939: 2002,Sethe,M,7
  1419940  2002,Sevrin,M,7

  1422251  2002,Josephus,M,5
  1422252: 2002,Joseth,M,5
  1422253  2002,Joshualee,M,5

  1424399  2003,Kiarra,F,177
  1424400: 2003,Lisette,F,177
  1424401  2003,Rayne,F,177

  1424920  2003,Lilyanna,F,110
  1424921: 2003,Lissette,F,110
  1424922  2003,Nallely,F,110

  1425228  2003,Kilee,F,88
  1425229: 2003,Lisset,F,88
  1425230  2003,Lizet,F,88

  1425616  2003,Joceline,F,68
  1425617: 2003,Josette,F,68
  1425618  2003,Journee,F,68

  1426388  2003,Cody,F,46
  1426389: 2003,Cosette,F,46
  1426390  2003,Denali,F,46

  1427948  2003,Linden,F,27
  1427949: 2003,Liset,F,27
  1427950: 2003,Liseth,F,27
  1427951  2003,Lolita,F,27

  1427974  2003,Rivers,F,27
  1427975: 2003,Rosetta,F,27
  1427976  2003,Roxie,F,27

  1428903  2003,Lynelle,F,21
  1428904: 2003,Lysette,F,21
  1428905  2003,Maddy,F,21

  1429654  2003,Lilla,F,18
  1429655: 2003,Lisseth,F,18
  1429656  2003,Logann,F,18

  1432021  2003,Lilu,F,12
  1432022: 2003,Lissete,F,12
  1432023: 2003,Lissett,F,12
  1432024  2003,Loriana,F,12

  1432154  2003,Seraphim,F,12
  1432155: 2003,Setareh,F,12
  1432156  2003,Shaianne,F,12

  1432709  2003,Navi,F,11
  1432710: 2003,Nayseth,F,11
  1432711  2003,Neah,F,11

  1435130  2003,Linsay,F,8
  1435131: 2003,Lisett,F,8
  1435132  2003,Litsy,F,8

  1435399  2003,Sesen,F,8
  1435400: 2003,Seth,F,8
  1435401  2003,Shabnam,F,8

  1438186  2003,Lyris,F,6
  1438187: 2003,Lyssette,F,6
  1438188  2003,Macady,F,6

  1441699  2003,Blake,M,5274
  1441700: 2003,Seth,M,5255
  1441701  2003,Dominic,M,5216

  1447221  2003,Caysen,M,13
  1447222: 2003,Chaseton,M,13
  1447223  2003,Chidubem,M,13

  1451812  2003,Josejavier,M,6
  1451813: 2003,Joseth,M,6
  1451814  2003,Josha,M,6

  1451889  2003,Kennen,M,6
  1451890: 2003,Kenseth,M,6
  1451891  2003,Keo,M,6

  1454066  2003,Serafino,M,5
  1454067: 2003,Sethan,M,5
  1454068  2003,Sevag,M,5

  1455382  2004,Johana,F,234
  1455383: 2004,Lisette,F,234
  1455384  2004,Luisa,F,234

  1455984  2004,Krysta,F,121
  1455985: 2004,Lissette,F,121
  1455986  2004,Sofie,F,121

  1456201  2004,Kimberley,F,104
  1456202: 2004,Lisset,F,104
  1456203  2004,Monet,F,104

  1457088  2004,Caleb,F,60
  1457089: 2004,Cosette,F,60
  1457090  2004,Echo,F,60

  1457416  2004,Jaydah,F,51
  1457417: 2004,Josette,F,51
  1457418  2004,Katerin,F,51

  1458424  2004,Linette,F,35
  1458425: 2004,Liset,F,35
  1458426  2004,Lovely,F,35

  1458839  2004,Rosalina,F,31
  1458840: 2004,Rosetta,F,31
  1458841  2004,Saoirse,F,31

  1459164  2004,Ruthann,F,28
  1459165: 2004,Seth,F,28
  1459166  2004,Sharell,F,28

  1460246  2004,Linh,F,21
  1460247: 2004,Lissete,F,21
  1460248  2004,Lorene,F,21

  1461025  2004,Libni,F,18
  1461026: 2004,Lisett,F,18
  1461027: 2004,Lisseth,F,18
  1461028  2004,Lona,F,18

  1461335  2004,Lynne,F,17
  1461336: 2004,Lysette,F,17
  1461337  2004,Lysha,F,17

  1461636  2004,Lindsie,F,16
  1461637: 2004,Liseth,F,16
  1461638  2004,Lyndsi,F,16

  1462438  2004,Liberti,F,14
  1462439: 2004,Lissett,F,14
  1462440  2004,Loreli,F,14

  1467284  2004,Aurelie,F,7
  1467285: 2004,Auset,F,7
  1467286  2004,Avagrace,F,7

  1469090  2004,Escarlet,F,6
  1469091: 2004,Eseta,F,6
  1469092  2004,Eshika,F,6

  1469618  2004,Lenzi,F,6
  1469619: 2004,Lesette,F,6
  1469620  2004,Lety,F,6

  1470211  2004,Suraiya,F,6
  1470212: 2004,Susette,F,6
  1470213  2004,Susy,F,6

  1473275  2004,Timothy,M,5228
  1473276: 2004,Seth,M,5185
  1473277  2004,Devin,M,5162

  1480247  2004,Chas,M,10
  1480248: 2004,Chaseton,M,10
  1480249  2004,Chasten,M,10

  1480438  2004,Josedaniel,M,10
  1480439: 2004,Joseth,M,10
  1480440  2004,Joss,M,10

  1485540  2004,Kennis,M,5
  1485541: 2004,Kenseth,M,5
  1485542  2004,Kenson,M,5

  1486101  2004,Seren,M,5
  1486102: 2004,Set,M,5
  1486103  2004,Sevak,M,5

  1487655  2005,Kelsi,F,183
  1487656: 2005,Lisette,F,183
  1487657  2005,Abrianna,F,182

  1488311  2005,Kimber,F,102
  1488312: 2005,Lissette,F,102
  1488313  2005,Loretta,F,102

  1489129  2005,Lashay,F,62
  1489130: 2005,Lisset,F,62
  1489131  2005,Mackenzi,F,62

  1489174  2005,Consuelo,F,60
  1489175: 2005,Cosette,F,60
  1489176  2005,Emilly,F,60

  1489639  2005,Jazzlynn,F,48
  1489640: 2005,Josette,F,48
  1489641  2005,Julieann,F,48

  1489801  2005,Leighann,F,45
  1489802: 2005,Lisseth,F,45
  1489803  2005,Lovely,F,45

  1491194  2005,Lynzie,F,28
  1491195: 2005,Lysette,F,28
  1491196  2005,Mailee,F,28

  1491453  2005,Lisandra,F,26
  1491454: 2005,Liseth,F,26
  1491455  2005,Lulu,F,26

  1491600  2005,Leylani,F,25
  1491601: 2005,Liset,F,25
  1491602  2005,Lucienne,F,25

  1492895  2005,Rosaria,F,19
  1492896: 2005,Rosetta,F,19
  1492897  2005,Sabella,F,19

  1493117  2005,Leylah,F,18
  1493118: 2005,Lisett,F,18
  1493119  2005,Lolita,F,18

  1495046  2005,Linzey,F,13
  1495047: 2005,Lissett,F,13
  1495048  2005,Loralai,F,13

  1495607  2005,Liora,F,12
  1495608: 2005,Lissete,F,12
  1495609  2005,Logann,F,12

  1500649  2005,Sesen,F,7
  1500650: 2005,Seth,F,7
  1500651  2005,Shaasia,F,7

  1502502  2005,Sesilia,F,6
  1502503: 2005,Setareh,F,6
  1502504  2005,Sevana,F,6

  1502609  2005,Susanah,F,6
  1502610: 2005,Susette,F,6
  1502611  2005,Sussan,F,6

  1503096  2005,Aniko,F,5
  1503097: 2005,Anisette,F,5
  1503098  2005,Anistasia,F,5

  1504986  2005,Roselena,F,5
  1504987: 2005,Rosette,F,5
  1504988  2005,Rossana,F,5

  1505681  2005,Devin,M,4711
  1505682: 2005,Seth,M,4710
  1505683  2005,Antonio,M,4689

  1511866  2005,Caydan,M,12
  1511867: 2005,Chaseton,M,12
  1511868  2005,Chavis,M,12

  1515184  2005,Josel,M,7
  1515185: 2005,Joseth,M,7
  1515186  2005,Joshuan,M,7

  1518614  2005,Sergiojr,M,5
  1518615: 2005,Sethaniel,M,5
  1518616  2005,Sevy,M,5

  1520408  2006,Ivanna,F,153
  1520409: 2006,Lisette,F,153
  1520410  2006,Montserrat,F,153

  1521149  2006,Kristal,F,88
  1521150: 2006,Lissette,F,88
  1521151  2006,Nikole,F,88

  1521620  2006,Bracha,F,67
  1521621: 2006,Cosette,F,67
  1521622  2006,Elvira,F,67

  1522436  2006,Latrice,F,46
  1522437: 2006,Lisset,F,46
  1522438  2006,Luana,F,46

  1523367  2006,Lisandra,F,33
  1523368: 2006,Liseth,F,33
  1523369  2006,Lorin,F,33

  1523389  2006,Reena,F,33
  1523390: 2006,Rosetta,F,33
  1523391  2006,Sadee,F,33

  1523590  2006,Liliane,F,31
  1523591: 2006,Liset,F,31
  1523592: 2006,Lisseth,F,31
  1523593  2006,Lulu,F,31

  1523964  2006,Jolin,F,28
  1523965: 2006,Josette,F,28
  1523966  2006,Kailea,F,28

  1524419  2006,Lynley,F,25
  1524420: 2006,Lysette,F,25
  1524421  2006,Lyssa,F,25

  1527467  2006,Lilyanah,F,14
  1527468: 2006,Lissete,F,14
  1527469  2006,Liyana,F,14

  1527998  2006,Lisania,F,13
  1527999: 2006,Lissett,F,13
  1528000  2006,Lorelle,F,13

  1528745  2006,Seraiah,F,12
  1528746: 2006,Seth,F,12
  1528747  2006,Shakiah,F,12

  1531194  2006,Serenah,F,9
  1531195: 2006,Setareh,F,9
  1531196  2006,Sevana,F,9

  1534677  2006,Esbeydi,F,6
  1534678: 2006,Eseta,F,6
  1534679  2006,Esthela,F,6

  1534765  2006,Hasly,F,6
  1534766: 2006,Hasset,F,6
  1534767  2006,Havah,F,6

  1535246  2006,Lisabeth,F,6
  1535247: 2006,Lisett,F,6
  1535248  2006,Lixy,F,6

  1537857  2006,Lysha,F,5
  1537858: 2006,Lyssette,F,5
  1537859  2006,Lyubov,F,5

  1539099  2006,Jesse,M,4362
  1539100: 2006,Seth,M,4325
  1539101  2006,Victor,M,4306

  1545148  2006,Cannan,M,13
  1545149: 2006,Chaseton,M,13
  1545150  2006,Chidera,M,13

  1546157  2006,Josearmando,M,11
  1546158: 2006,Joseth,M,11
  1546159  2006,Josua,M,11

  1552077  2006,Kensei,M,5
  1552078: 2006,Kenseth,M,5
  1552079  2006,Kenshawn,M,5

  1554798  2007,Kaylea,F,121
  1554799: 2007,Lisette,F,121
  1554800  2007,Malina,F,121

  1555384  2007,Leilene,F,81
  1555385: 2007,Lissette,F,81
  1555386  2007,Mackenzi,F,81

  1556049  2007,Chayse,F,58
  1556050: 2007,Cosette,F,58
  1556051  2007,Dena,F,58

  1556207  2007,Janea,F,54
  1556208: 2007,Josette,F,54
  1556209  2007,Julyssa,F,54

  1556778  2007,Liah,F,43
  1556779: 2007,Lisset,F,43
  1556780  2007,Lotus,F,43

  1557932  2007,Risa,F,30
  1557933: 2007,Rosetta,F,30
  1557934  2007,Ryland,F,30

  1558643  2007,Lisandra,F,25
  1558644: 2007,Liseth,F,25
  1558645  2007,Loralai,F,25

  1559237  2007,Liliann,F,22
  1559238: 2007,Liset,F,22
  1559239  2007,Lissa,F,22
  1559240: 2007,Lisseth,F,22
  1559241  2007,Litzi,F,22

  1561378  2007,Lynsie,F,15
  1561379: 2007,Lysette,F,15
  1561380  2007,Madason,F,15

  1565247  2007,Lineth,F,9
  1565248: 2007,Lisett,F,9
  1565249  2007,Lisha,F,9

  1565500  2007,Serenah,F,9
  1565501: 2007,Seth,F,9
  1565502  2007,Seynabou,F,9

  1565562  2007,Sumya,F,9
  1565563: 2007,Sunset,F,9
  1565564  2007,Sussan,F,9

  1566733  2007,Seraphim,F,8
  1566734: 2007,Setareh,F,8
  1566735  2007,Sevilla,F,8

  1567844  2007,Lismary,F,7
  1567845: 2007,Lissete,F,7
  1567846  2007,Liviana,F,7

  1568951  2007,Cortnie,F,6
  1568952: 2007,Cossette,F,6
  1568953  2007,Crystel,F,6

  1569212  2007,Haruna,F,6
  1569213: 2007,Haset,F,6
  1569214  2007,Hatice,F,6

  1570384  2007,Surai,F,6
  1570385: 2007,Susette,F,6
  1570386  2007,Susi,F,6

  1571927  2007,Josabeth,F,5
  1571928: 2007,Josetta,F,5
  1571929  2007,Joshalyn,F,5

  1572328  2007,Lissbeth,F,5
  1572329: 2007,Lissett,F,5
  1572330  2007,Lithzy,F,5

  1573693  2007,Preston,M,3789
  1573694: 2007,Seth,M,3766
  1573695  2007,Patrick,M,3733

  1580426  2007,Josejulian,M,12
  1580427: 2007,Joseth,M,12
  1580428  2007,Jourdin,M,12

  1580904  2007,Josemiguel,M,11
  1580905: 2007,Joset,M,11
  1580906  2007,Joshuan,M,11

  1581263  2007,Charlee,M,10
  1581264: 2007,Chaseton,M,10
  1581265  2007,Chasten,M,10

  1586438  2007,Dorrien,M,5
  1586439: 2007,Dorsett,M,5
  1586440  2007,Draeden,M,5

  1587619  2007,Sequoyah,M,5
  1587620: 2007,Sethe,M,5
  1587621  2007,Seve,M,5

  1589783  2008,Chyanne,F,119
  1589784: 2008,Lisette,F,119
  1589785  2008,Nayely,F,119

  1590806  2008,Kim,F,63
  1590807: 2008,Lissette,F,63
  1590808  2008,Lundyn,F,63

  1591346  2008,Bronwyn,F,49
  1591347: 2008,Cosette,F,49
  1591348  2008,Dasani,F,49

  1591776  2008,Joni,F,42
  1591777: 2008,Josette,F,42
  1591778  2008,Katana,F,42

  1592105  2008,Lilla,F,38
  1592106: 2008,Lisset,F,38
  1592107  2008,Lyllian,F,38

  1592392  2008,Reagen,F,35
  1592393: 2008,Rosetta,F,35
  1592394  2008,Ruthann,F,35

  1592435  2008,Carlin,F,34
  1592436: 2008,Chrisette,F,34
  1592437  2008,Daelynn,F,34

  1593180  2008,Linzy,F,28
  1593181: 2008,Liseth,F,28
  1593182  2008,Lizett,F,28

  1593481  2008,Libbie,F,26
  1593482: 2008,Lisseth,F,26
  1593483  2008,Lizmarie,F,26

  1594433  2008,Liliya,F,21
  1594434: 2008,Liset,F,21
  1594435  2008,Loriana,F,21

  1597249  2008,Linzie,F,13
  1597250: 2008,Lissett,F,13
  1597251  2008,Livie,F,13

  1598459  2008,Lyda,F,11
  1598460: 2008,Lysette,F,11
  1598461  2008,Madalene,F,11

  1599891  2008,Harsimran,F,9
  1599892: 2008,Hasset,F,9
  1599893  2008,Hasti,F,9

  1600409  2008,Sulma,F,9
  1600410: 2008,Sunset,F,9
  1600411  2008,Sura,F,9

  1600973  2008,Harumi,F,8
  1600974: 2008,Haset,F,8
  1600975  2008,Haydon,F,8

  1602688  2008,Lira,F,7
  1602689: 2008,Lisett,F,7
  1602690  2008,Lisvet,F,7

  1606798  2008,Joslyne,F,5
  1606799: 2008,Jossette,F,5
  1606800  2008,Jossilyn,F,5

  1607271  2008,Lysha,F,5
  1607272: 2008,Lyssette,F,5
  1607273  2008,Maanvi,F,5

  1607801  2008,Roselee,F,5
  1607802: 2008,Rosette,F,5
  1607803  2008,Roshell,F,5

  1607917  2008,Sesilia,F,5
  1607918: 2008,Seth,F,5
  1607919  2008,Sevena,F,5

  1608536  2008,Patrick,M,3333
  1608537: 2008,Seth,M,3278
  1608538  2008,Jeremy,M,3248

  1615360  2008,Josealberto,M,12
  1615361: 2008,Joseth,M,12
  1615362  2008,Jotham,M,12

  1616825  2008,Charli,M,9
  1616826: 2008,Chaseton,M,9
  1616827  2008,Chibuike,M,9

  1625233  2009,Kristal,F,89
  1625234: 2009,Lisette,F,89
  1625235  2009,Maira,F,89

  1625300  2009,Aleyna,F,85
  1625301: 2009,Cosette,F,85
  1625302  2009,Danni,F,85

  1626504  2009,Leiah,F,47
  1626505: 2009,Lissette,F,47
  1626506  2009,Makenzee,F,47

  1626946  2009,Rayah,F,40
  1626947: 2009,Rosetta,F,40
  1626948  2009,Shanaya,F,40

  1627219  2009,Camora,F,36
  1627220: 2009,Chrisette,F,36
  1627221  2009,Divina,F,36

  1628159  2009,Jolisa,F,28
  1628160: 2009,Josette,F,28
  1628161  2009,Kaida,F,28

  1628828  2009,Linette,F,24
  1628829: 2009,Lisset,F,24
  1628830  2009,Lita,F,24

  1629721  2009,Lileigh,F,20
  1629722: 2009,Liset,F,20
  1629723  2009,Litzi,F,20

  1630928  2009,Lilybeth,F,16
  1630929: 2009,Liseth,F,16
  1630930  2009,Lizandra,F,16

  1631290  2009,Linzy,F,15
  1631291: 2009,Lisseth,F,15
  1631292  2009,Liviana,F,15

  1634167  2009,Lyrah,F,10
  1634168: 2009,Lysette,F,10
  1634169  2009,Mackenize,F,10

  1634999  2009,Koree,F,9
  1635000: 2009,Krisette,F,9
  1635001  2009,Krystalynn,F,9

  1635060  2009,Lissandra,F,9
  1635061: 2009,Lissete,F,9
  1635062  2009,Loriah,F,9

  1638497  2009,Auryanna,F,6
  1638498: 2009,Auset,F,6
  1638499  2009,Autry,F,6

  1639846  2009,Rosealee,F,6
  1639847: 2009,Rosette,F,6
  1639848  2009,Rosey,F,6

  1639927  2009,Seriana,F,6
  1639928: 2009,Setareh,F,6
  1639929  2009,Sevana,F,6

  1640607  2009,Asaria,F,5
  1640608: 2009,Aset,F,5
  1640609  2009,Asharee,F,5

  1641303  2009,Hasana,F,5
  1641304: 2009,Hasset,F,5
  1641305  2009,Havilah,F,5

  1643325  2009,Jeremy,M,2938
  1643326: 2009,Seth,M,2937
  1643327  2009,Gage,M,2880

  1650960  2009,Chane,M,10
  1650961: 2009,Chaseton,M,10
  1650962  2009,Chesley,M,10

  1651824  2009,Josep,M,9
  1651825: 2009,Joseth,M,9
  1651826  2009,Joven,M,9

  1659553  2010,Laken,F,110
  1659554: 2010,Lisette,F,110
  1659555  2010,Magdalene,F,110

  1660573  2010,Ariannah,F,60
  1660574: 2010,Cosette,F,60
  1660575  2010,Deonna,F,60

  1660610  2010,Chantal,F,59
  1660611: 2010,Chrisette,F,59
  1660612  2010,Eleanore,F,59

  1660657  2010,Lainee,F,58
  1660658: 2010,Lissette,F,58
  1660659  2010,Luca,F,58

  1661479  2010,Lainie,F,41
  1661480: 2010,Lisset,F,41
  1661481  2010,Lucca,F,41

  1662076  2010,Reema,F,34
  1662077: 2010,Rosetta,F,34
  1662078  2010,Sadee,F,34

  1662158  2010,Leidy,F,33
  1662159: 2010,Lisseth,F,33
  1662160  2010,Maddelyn,F,33

  1662228  2010,Joleigh,F,32
  1662229: 2010,Josette,F,32
  1662230  2010,Joshlynn,F,32

  1663785  2010,Liani,F,22
  1663786: 2010,Liseth,F,22
  1663787  2010,Loraine,F,22

  1667709  2010,Harshita,F,11
  1667710: 2010,Hasset,F,11
  1667711  2010,Heli,F,11

  1668264  2010,Chani,F,10
  1668265: 2010,Chrissette,F,10
  1668266  2010,Cincere,F,10

  1669467  2010,Krina,F,9
  1669468: 2010,Krisette,F,9
  1669469  2010,Krystine,F,9

  1669521  2010,Lira,F,9
  1669522: 2010,Liset,F,9
  1669523: 2010,Lissete,F,9
  1669524  2010,Lissy,F,9

  1670400  2010,Harloe,F,8
  1670401: 2010,Haset,F,8
  1670402  2010,Hatice,F,8

  1670679  2010,Lyrah,F,8
  1670680: 2010,Lysette,F,8
  1670681  2010,Mackennah,F,8

  1671473  2010,Coumba,F,7
  1671474: 2010,Crisette,F,7
  1671475  2010,Cristen,F,7

  1672045  2010,Liselle,F,7
  1672046: 2010,Lisett,F,7
  1672047  2010,Lismary,F,7

  1672394  2010,Serayah,F,7
  1672395: 2010,Setareh,F,7
  1672396  2010,Sevanna,F,7

  1672449  2010,Sunaina,F,7
  1672450: 2010,Sunset,F,7
  1672451  2010,Supriya,F,7

  1672891  2010,Aunya,F,6
  1672892: 2010,Auset,F,6
  1672893  2010,Autumnrose,F,6

  1674227  2010,Roselani,F,6
  1674228: 2010,Rosette,F,6
  1674229  2010,Rosmary,F,6

  1676375  2010,Lismarie,F,5
  1676376: 2010,Lissett,F,5
  1676377  2010,Lissianna,F,5

  1677046  2010,Serrina,F,5
  1677047: 2010,Setara,F,5
  1677048  2010,Sevaeh,F,5

  1677673  2010,Nicolas,M,2390
  1677674: 2010,Seth,M,2376
  1677675  2010,George,M,2368

  1683910  2010,Cayne,M,13
  1683911: 2010,Chaseton,M,13
  1683912  2010,Cheskel,M,13

  1685938  2010,Josejulian,M,9
  1685939: 2010,Joseth,M,9
  1685940  2010,Josiahs,M,9

  1694090  2011,Leeanna,F,80
  1694091: 2011,Lisette,F,80
  1694092  2011,Liz,F,80

  1694190  2011,Briseis,F,75
  1694191: 2011,Cosette,F,75
  1694192  2011,Daiana,F,75

  1694317  2011,Charlette,F,70
  1694318: 2011,Chrisette,F,70
  1694319  2011,Eshal,F,70

  1695561  2011,Lanna,F,40
  1695562: 2011,Lissette,F,40
  1695563  2011,Lyllian,F,40

  1696382  2011,Letty,F,31
  1696383: 2011,Lisset,F,31
  1696384  2011,Mahayla,F,31

  1696730  2011,Jensen,F,28
  1696731: 2011,Josette,F,28
  1696732  2011,Kailei,F,28

  1697248  2011,Rosaleigh,F,25
  1697249: 2011,Rosetta,F,25
  1697250  2011,Rosslyn,F,25

  1699390  2011,Lissandra,F,16
  1699391: 2011,Lisseth,F,16
  1699392  2011,Livy,F,16

  1700681  2011,Lilit,F,13
  1700682: 2011,Liset,F,13
  1700683  2011,Litzi,F,13

  1701201  2011,Krisalyn,F,12
  1701202: 2011,Krisette,F,12
  1701203  2011,Krystelle,F,12

  1701228  2011,Linnaea,F,12
  1701229: 2011,Liseth,F,12
  1701230  2011,Lizandra,F,12

  1701239  2011,Lyndsie,F,12
  1701240: 2011,Lysette,F,12
  1701241  2011,Maddelynn,F,12

  1704326  2011,Hartly,F,8
  1704327: 2011,Haset,F,8
  1704328  2011,Hatley,F,8

  1706812  2011,Auryn,F,6
  1706813: 2011,Auset,F,6
  1706814  2011,Autym,F,6

  1706983  2011,Cosima,F,6
  1706984: 2011,Cossette,F,6
  1706985  2011,Crisel,F,6

  1709074  2011,Chrisiyah,F,5
  1709075: 2011,Chrissette,F,5
  1709076  2011,Chrissie,F,5

  1709794  2011,Josephyne,F,5
  1709795: 2011,Josetta,F,5
  1709796  2011,Josiana,F,5

  1710148  2011,Lis,F,5
  1710149: 2011,Lissete,F,5
  1710150  2011,Liyat,F,5

  1710724  2011,Roseann,F,5
  1710725: 2011,Rosette,F,5
  1710726  2011,Roshini,F,5

  1710822  2011,Sergio,F,5
  1710823: 2011,Setayesh,F,5
  1710824: 2011,Seth,F,5
  1710825  2011,Seva,F,5

  1710967  2011,Suraiyah,F,5
  1710968: 2011,Susette,F,5
  1710969  2011,Susy,F,5

  1711488  2011,Silas,M,2106
  1711489: 2011,Seth,M,2086
  1711490  2011,Eduardo,M,2082

  1717010  2011,Charbel,M,15
  1717011: 2011,Chaseton,M,15
  1717012  2011,Chaston,M,15

  1720742  2011,Serenity,M,8
  1720743: 2011,Seton,M,8
  1720744  2011,Shaarav,M,8

  1722800  2011,Joseeduardo,M,6
  1722801: 2011,Joseth,M,6
  1722802  2011,Josey,M,6

  1727818  2012,Braylynn,F,86
  1727819: 2012,Cosette,F,86
  1727820  2012,Daniyah,F,86

  1728302  2012,Kilee,F,67
  1728303: 2012,Lisette,F,67
  1728304  2012,Madden,F,67

  1728749  2012,Lakelyn,F,54
  1728750: 2012,Lissette,F,54
  1728751  2012,Lulu,F,54

  1728863  2012,Jensen,F,51
  1728864: 2012,Josette,F,51
  1728865  2012,Kaliya,F,51

  1729006  2012,Caylie,F,48
  1729007: 2012,Chrisette,F,48
  1729008  2012,Chrissy,F,48

  1729530  2012,Ranya,F,40
  1729531: 2012,Rosetta,F,40
  1729532  2012,Saisha,F,40

  1729997  2012,Selin,F,34
  1729998: 2012,Setareh,F,34
  1729999  2012,Shaindel,F,34

  1731278  2012,Lejla,F,24
  1731279: 2012,Lisseth,F,24
  1731280  2012,Locklyn,F,24

  1731645  2012,Linette,F,22
  1731646: 2012,Lisset,F,22
  1731647  2012,Lita,F,22

  1733991  2012,Hartlyn,F,14
  1733992: 2012,Haset,F,14
  1733993  2012,Heer,F,14

  1734553  2012,Lyrique,F,13
  1734554: 2012,Lysette,F,13
  1734555  2012,Maddisen,F,13

  1735745  2012,Linlee,F,11
  1735746: 2012,Liseth,F,11
  1735747  2012,Litzi,F,11

  1737462  2012,Linzi,F,9
  1737463: 2012,Liset,F,9
  1737464  2012,Loreley,F,9

  1738828  2012,Roselie,F,8
  1738829: 2012,Rosette,F,8
  1738830  2012,Roshini,F,8

  1739290  2012,Aunya,F,7
  1739291: 2012,Auset,F,7
  1739292  2012,Autym,F,7

  1740003  2012,Lisamarie,F,7
  1740004: 2012,Lisett,F,7
  1740005  2012,Lital,F,7

  1742794  2012,Asmita,F,5
  1742795: 2012,Assetou,F,5
  1742796  2012,Assia,F,5

  1743066  2012,Cortland,F,5
  1743067: 2012,Cossette,F,5
  1743068  2012,Coumba,F,5

  1744023  2012,Lise,F,5
  1744024: 2012,Lissett,F,5
  1744025  2012,Lissy,F,5

  1744681  2012,Serynity,F,5
  1744682: 2012,Setayesh,F,5
  1744683: 2012,Seton,F,5
  1744684  2012,Sevda,F,5

  1745321  2012,Jameson,M,1817
  1745322: 2012,Seth,M,1810
  1745323  2012,Kingston,M,1772

  1751476  2012,Charlee,M,13
  1751477: 2012,Chaseton,M,13
  1751478  2012,Chord,M,13

  1754658  2012,Sencere,M,8
  1754659: 2012,Seton,M,8
  1754660  2012,Shahid,M,8

  1756097  2012,Carlosdaniel,M,6
  1756098: 2012,Caseton,M,6
  1756099  2012,Cashawn,M,6

  1761119  2013,Brinlee,F,114
  1761120: 2013,Cosette,F,114
  1761121  2013,Emalee,F,114

  1762106  2013,Josalyn,F,62
  1762107: 2013,Josette,F,62
  1762108  2013,Karah,F,62

  1762151  2013,Lisbeth,F,61
  1762152: 2013,Lisette,F,61
  1762153  2013,Lyanna,F,61

  1762353  2013,Leilanie,F,55
  1762354: 2013,Lissette,F,55
  1762355  2013,Madelin,F,55

  1762505  2013,Chantal,F,51
  1762506: 2013,Chrisette,F,51
  1762507  2013,Chyanne,F,51

  1762533  2013,Paiton,F,51
  1762534: 2013,Rosetta,F,51
  1762535  2013,Sahar,F,51

  1765454  2013,Linette,F,21
  1765455: 2013,Lisseth,F,21
  1765456  2013,Lizabeth,F,21

  1765703  2013,Linh,F,20
  1765704: 2013,Lisset,F,20
  1765705  2013,Lyah,F,20

  1767382  2013,Rhealynn,F,15
  1767383: 2013,Rosette,F,15
  1767384  2013,Rosselyn,F,15

  1768052  2013,Harshini,F,13
  1768053: 2013,Haset,F,13
  1768054  2013,Haydn,F,13

  1768540  2013,Harlym,F,12
  1768541: 2013,Hasset,F,12
  1768542  2013,Hava,F,12

  1770859  2013,Lisandra,F,9
  1770860: 2013,Liset,F,9
  1770861: 2013,Liseth,F,9
  1770862  2013,Liyat,F,9

  1771444  2013,Aubrina,F,8
  1771445: 2013,Auset,F,8
  1771446  2013,Ausha,F,8

  1771923  2013,Krina,F,8
  1771924: 2013,Krisette,F,8
  1771925  2013,Krithi,F,8

  1772261  2013,Serin,F,8
  1772262: 2013,Setareh,F,8
  1772263  2013,Shaelee,F,8

  1775052  2013,Lysa,F,6
  1775053: 2013,Lysette,F,6
  1775054  2013,Maaya,F,6

  1777112  2013,Joselynne,F,5
  1777113: 2013,Josetta,F,5
  1777114  2013,Josielynn,F,5

  1777116  2013,Josselynn,F,5
  1777117: 2013,Jossette,F,5
  1777118  2013,Josslynne,F,5

  1778108  2013,Serianna,F,5
  1778109: 2013,Seth,F,5
  1778110  2013,Sevynn,F,5

  1778218  2013,Sunniva,F,5
  1778219: 2013,Sunset,F,5
  1778220  2013,Sunshyne,F,5

  1778766  2013,Zander,M,1592
  1778767: 2013,Seth,M,1590
  1778768  2013,Travis,M,1579

  1785182  2013,Channin,M,12
  1785183: 2013,Chaseton,M,12
  1785184  2013,Chastin,M,12

  1786525  2013,Sergey,M,10
  1786526: 2013,Seton,M,10
  1786527  2013,Shadi,M,10

  1787746  2013,Kasean,M,8
  1787747: 2013,Kaseton,M,8
  1787748  2013,Kashden,M,8

  1794395  2014,Carli,F,110
  1794396: 2014,Cosette,F,110
  1794397  2014,Desirae,F,110

  1795456  2014,Lillyanne,F,59
  1795457: 2014,Lisette,F,59
  1795458: 2014,Lissette,F,59
  1795459  2014,Lyanna,F,59

  1795712  2014,Jorja,F,52
  1795713: 2014,Josette,F,52
  1795714  2014,Karisma,F,52

  1795864  2014,Rhianna,F,49
  1795865: 2014,Rosetta,F,49
  1795866  2014,Rozlynn,F,49

  1796102  2014,Chevy,F,44
  1796103: 2014,Chrisette,F,44
  1796104  2014,Cree,F,44

  1799421  2014,Linette,F,18
  1799422: 2014,Lisseth,F,18
  1799423  2014,Mackinzie,F,18

  1800231  2014,Aunesty,F,15
  1800232: 2014,Auset,F,15
  1800233  2014,Autymn,F,15

  1800741  2014,Hannia,F,14
  1800742: 2014,Haset,F,14
  1800743: 2014,Hasset,F,14
  1800744  2014,Havannah,F,14

  1801966  2014,Rosanne,F,12
  1801967: 2014,Rosette,F,12
  1801968  2014,Ryelee,F,12

  1805152  2014,Lyricc,F,8
  1805153: 2014,Lysette,F,8
  1805154  2014,Macon,F,8

  1805412  2014,Serana,F,8
  1805413: 2014,Setareh,F,8
  1805414  2014,Sevanna,F,8

  1805879  2014,Chriselle,F,7
  1805880: 2014,Chrissette,F,7
  1805881  2014,Christalynn,F,7

  1806391  2014,Kota,F,7
  1806392: 2014,Krisette,F,7
  1806393  2014,Krissia,F,7

  1806470  2014,Liona,F,7
  1806471: 2014,Lissett,F,7
  1806472  2014,Liyat,F,7

  1806831  2014,Seryna,F,7
  1806832: 2014,Setayesh,F,7
  1806833  2014,Seydi,F,7

  1806894  2014,Sunee,F,7
  1806895: 2014,Sunset,F,7
  1806896  2014,Surah,F,7

  1808270  2014,Lisbet,F,6
  1808271: 2014,Lisset,F,6
  1808272  2014,Liviya,F,6

  1809351  2014,Aryss,F,5
  1809352: 2014,Aset,F,5
  1809353  2014,Ashana,F,5

  1811280  2014,Serriah,F,5
  1811281: 2014,Seth,F,5
  1811282  2014,Sevan,F,5

  1811961  2014,Damien,M,1504
  1811962: 2014,Seth,M,1499
  1811963  2014,Waylon,M,1494

  1817735  2014,Cebastian,M,14
  1817736: 2014,Chaseton,M,14
  1817737  2014,Chastin,M,14

  1821823  2014,Josejulian,M,7
  1821824: 2014,Joseth,M,7
  1821825  2014,Joshuajames,M,7

  1822207  2014,Serenity,M,7
  1822208: 2014,Seton,M,7
  1822209  2014,Shabsi,M,7

  1822608  2014,Cas,M,6
  1822609: 2014,Caseton,M,6
  1822610  2014,Cashawn,M,6

  1824079  2014,Charvik,M,5
  1824080: 2014,Chasetin,M,5
  1824081  2014,Chatham,M,5

  1827308  2015,Zaira,F,139
  1827309: 2015,Cosette,F,138
  1827310  2015,Freyja,F,138

  1828505  2015,Jaela,F,63
  1828506: 2015,Josette,F,63
  1828507  2015,Karson,F,63

  1828795  2015,Leylah,F,55
  1828796: 2015,Lisette,F,55
  1828797  2015,Marlei,F,55

  1829563  2015,Caylie,F,39
  1829564: 2015,Chrisette,F,39
  1829565  2015,Corrie,F,39

  1829682  2015,Rio,F,38
  1829683: 2015,Rosetta,F,38
  1829684  2015,Sarenity,F,38

  1829826  2015,Lilyrose,F,36
  1829827: 2015,Lissette,F,36
  1829828  2015,Mailen,F,36

  1832185  2015,Aurelie,F,19
  1832186: 2015,Auset,F,19
  1832187  2015,Avangeline,F,19

  1832239  2015,Harmoney,F,19
  1832240: 2015,Hasset,F,19
  1832241  2015,Holli,F,19

  1833848  2015,Hargun,F,14
  1833849: 2015,Haset,F,14
  1833850  2015,Hermela,F,14

  1834405  2015,Lissandra,F,13
  1834406: 2015,Lisset,F,13
  1834407  2015,Lizabeth,F,13

  1834946  2015,Linh,F,12
  1834947: 2015,Lisseth,F,12
  1834948  2015,Lonnie,F,12

  1836224  2015,Lilyona,F,10
  1836225: 2015,Liseth,F,10
  1836226  2015,Lissa,F,10

  1838441  2015,Roselia,F,8
  1838442: 2015,Rosette,F,8
  1838443  2015,Ross,F,8

  1839923  2015,Seryna,F,7
  1839924: 2015,Setayesh,F,7
  1839925  2015,Shaam,F,7

  1841183  2015,Kriselle,F,6
  1841184: 2015,Krisette,F,6
  1841185  2015,Krisley,F,6

  1842375  2015,Aseret,F,5
  1842376: 2015,Aset,F,5
  1842377  2015,Asfiya,F,5

  1843714  2015,Lyricc,F,5
  1843715: 2015,Lysette,F,5
  1843716  2015,Maame,F,5

  1844307  2015,Serly,F,5
  1844308: 2015,Setareh,F,5
  1844309  2015,Sevannah,F,5

  1845008  2015,Reid,M,1331
  1845009: 2015,Seth,M,1326
  1845010  2015,Andre,M,1310

  1853571  2015,Charvik,M,8
  1853572: 2015,Chaseton,M,8
  1853573  2015,Chasyn,M,8

  1854402  2015,Carrson,M,7
  1854403: 2015,Caseton,M,7
  1854404  2015,Cashten,M,7

  1855107  2015,Seraj,M,7
  1855108: 2015,Seton,M,7
  1855109  2015,Severus,M,7

  1857634  2015,Josaih,M,5
  1857635: 2015,Joseth,M,5
  1857636  2015,Joshawn,M,5

  1857704  2015,Karym,M,5
  1857705: 2015,Kaseton,M,5
  1857706  2015,Kashaun,M,5

packages\app\public\samples\scripts\Citizen Kane.txt:
    35  
    36:           A SERIES OF SET -UPS, EACH CLOSER TO THE GREAT WINDOW, ALL 
    37            TELLING SOMETHING OF: 

   274  
   275:           A great number of headlines, set in different types and 
   276            different styles, obviously from different papers, all 

   687                          Shameful, ignominious - defeat 
   688:                         that set back for twenty years the 
   689                          cause of reform in the U.S., forever 

   790            during all of this, apparently does its best to follow action 
   791:           and pick up faces, but fails.  Actually, all set-ups are to be 
   792            planned very carefully to exclude the element of personality 

  2957                                      KANE
  2958:                         After the types 've been reset and 
  2959                          the pages have been remade according 

  3616  
  3617:           Same setup as before except that it is now late afternoon and 
  3618            late in the winter of the year.  The outline "E" is hung with 

  3623  
  3624:           Same setup as before except that it is spring.  Instead of the 
  3625            sad sounds of dripping rain or dripping icicles, we hear the 

  3636  
  3637:           The same setup again, it is now summer.  The window was half-
  3638            open before .. now it's open all the way and Bernstein has 

  4471            Newspaper - Kane's marriage to Emily with still of group on 
  4472:           White House lawn, same setup as early newsreel in News Digest.
  4473  

  5227                          No.  I wish you'd go home to Emily.
  5228:                         She'll be pretty upset by all this -
  5229                          She still loves you -

  5689            Kane and Emily.  He looks at her, in search of some kind of 
  5690:           enlightenment.  Her face is set and impassive.
  5691  

  5716            rises from a chair.  The other person  in the room - a big, 
  5717:           heavyset man, a little past middle age - stays where he is, 
  5718            leaning back in his chair, regarding Kane intently.

  6318  
  6319:           INT. CHICAGO OPERA HOUSE - NIGHT - SET FOR "THAIS" -
  6320  
  6321            The camera is just inside the curtain, angling upstage.  We 
  6322:           see the set for "Thais" - the principals in place - stage 
  6323            managers, stage hands, etc., and in the center of all this, in 

  6385            machine, his fingers working briskly and efficiently, his face, 
  6386:           seen by the desk light before him, set in a strange half-smile.
  6387  

  6794                                      SUSAN
  6795:                                (on her way to closet)
  6796:                         I've got a brush in the closet.  
  6797                          As soon as the mud on your trousers 

  6804  
  6805:           Susan comes out of the closet.  She holds out the brush with 
  6806            her left hand, her right hand to her jaw in real distress.

  7370  
  7371:           Dr. Corey leaves.  Kane settles himself in a chair next to the 
  7372            bed, looking at Susan.  In a moment, the nurse enters, goes to 

  7600  
  7601:           Two real beds have been set up on each side of the tent.  A 
  7602            rather classy dressing table is in the rear, at which Susan is 

  7960            of sandwiches before them.  Raymond drinks a glass of beer and 
  7961:           settles back.
  7962  

  8096            shakes the ball again.  Another flurry of snow.  He watches 
  8097:           the flakes settle - then looks up.  Finally, taking in the 
  8098            pack of servants and something of the situations, he puts the 

  8390                                      SECOND ASSISTANT
  8391:                         We're all set to get everything.  
  8392                          The junk as well as the art.

  8428                          Put it over by that statue.  It'll 
  8429:                         make a good setup.
  8430  

packages\app\public\samples\scripts\Raiders of the Lost Ark.txt:
   406      beautiful. It rests on a pedestal of polished stone. Indy
   407:     looks the whole set-up over very carefully. From his jacket
   408      he takes a small, canvas drawstring bag. He begins filling

   414      that once, when he stops, takes a breath and loosens his
   415:     shoulder muscles. Now he sets himself again. And makes the
   416      switch! The idol is now in his hand, the bag on the
   417      pedestal. For a long moment it sits there, then the
   418:     polished stone beneath the bag drops five inches. This sets
   419      off an AURAL CHAIN REACTION of steadily increasing volume

   642       Indy is at a bookcase near the window and he looks quite
   643:      different in this setting. His outfit is tweedy, slightly
   644       rumpled in the professional style. Part of his attention is

  1386  
  1387:      The plane flies west into the sunset.
  1388  

  1506  Mahdlo is hesitant, but lays the axe handle on the bar and
  1507: goes out. Indy has been barely aware of him. Now he settles
  1508  again on the bar stool. Marion has a vindictive look.

  2099  from Indy’s hand as he and the Giant Sherpa roll across the
  2100: floor, upsetting furniture.
  2101  

  2145       levels it. Belzig dives around the end of the bar opposite
  2146:      Marion. When he has set himself, he peeks up over the edge
  2147       of the scorched bar. The alcohol fire has moved down the

  2683  
  2684: Indy sits, glancing at the German Henchmen, who settle
  2685  nearby, just out of earshot.

  3200       The edge of the sunlight moving across the miniature city
  3201:      is still a good two feet beyond the spot Belloq has settled
  3202       on. And now that line of light is broken by the shadow of

  3301  
  3302:      Indy finds himself in a tent set up for rather comfortable
  3303       living. He has just started to cross it when he hears a

  4040       louder, revving up. The plane begins to roll, rotating
  4041:      around its one still-blocked set of tires. Marion grabs
  4042       onto the cockpit to keep from slipping into the props. She

  4425      friends of Omar, rush out with fruit carts and baskets and
  4426:     set up a mini-bazaar in seconds. Two Arab Boys sweep the
  4427      tracks of the truck into oblivion. They throw aside their

  4746      Shliemann disappears down the hatch. The Captain is
  4747:     pleased. A Radioman speaks into his headset, then follows
  4748      the other Aides down the hatch. In the distance the other

  5571  
  5572:     Finally, we settle on a full shot of the island. We can
  5573      recognize that the small opening high on the slope from

  5610          --And we trust you found the
  5611:         settlement satisfactory?
  5612  

packages\app\public\samples\scripts\Rear Window.txt:
    50      window, shaving, using a small bowl of water and a portable
    51:     mirror which he has set up on a shelf.
    52  

   227  produced a cigarette. Quickly, Bryce moves over to light
   228: Gunnison's cigarette. Then he settles back to light his
   229  own. Gunnison doesn't even bother to thank him.

   386  
   387:     Jeff's eyes become set upon something else in the
   388      neighborhood he sees.

   615       a hallway door. He carries a large aluminum sample case
   616:      common to salesmen. He sets down the case heavily, removes
   617       his hat, and slowly wipes his brow with the back of his

   730       the Herald Tribune, and still wears her hearing aid. She
   731:      settles into a folding, canvas deck chair.
   732  
   733       Her skin is dead white, and her body is thin to the point
   734:      of emaciation. No sooner has she settled into her chair,
   735       than she is attracted by the sound of the salesman working

  1258       are lost from sight. When they reappear, he is carrying her
  1259:      in his arms, over the threshold. He sets her down, closes
  1260       the door, and they kiss again.

  1286  
  1287: 36   EXT. NEIGHBORHOOD - NIGHT - SUNSET - LONG SHOT                36
  1288  

  1296  
  1297: 37   INT. JEFF'S APARTMENT - SUNSET - CLOSEUP                      37
  1298  

  1306  
  1307: 38   INT. JEFF'S APARTMENT - SUNSET - CLOSEUP                      38
  1308  

  1371  
  1372: 39   INT. JEFF'S APARTMENT - SUNSET - SEMI-CLOSEUP                    39
  1373  

  1380  
  1381: 40   INT. JEFF'S APARTMENT - SUNSET - SEMI-LONG SHOT                  40
  1382  

  1394  
  1395: 41   INT. JEFF'S APARTMENT - (SUNSET) - SEMI-CLOSEUP               41
  1396  

  1421  
  1422: 42   INT. JEFF'S APARTMENT - (SUNSET) - MEDIUM SHOT                42
  1423  

  1476  
  1477: 43   INT. JEFF'S APARTMENT - (SUNSET) - MEDIUM SHOT                   43
  1478  

  1512  
  1513: 44   INT. JEFF'S APARTMENT - (SUNSET) - SEMI-CLOSEUP                 44
  1514  

  1519  
  1520: 45   INT. JEFF'S APARTMENT - (SUNSET) - SEMI-LONG SHOT               45
  1521  

  1534  
  1535: 46   INT. JEFF'S APARTMENT - SUNSET - CLOSEUP                        46
  1536  

  1539  
  1540: 47   INT. JEFF'S APARTMENT - SUNSET - MEDIUM SHOT                    47
  1541  

  1583  
  1584: She moves to a small bar set in the wall cabinet.
  1585  

  1614  Carl comes out of the kitchen carrying the empty warming
  1615: oven. He sets it down he sees Lisa struggling with the
  1616  corkscrew.

  1781                         LISA
  1782:              I'd better start setting up for
  1783               dinner.

  1845       THE CAMERA HAS PANNED slightly to the woman's living room
  1846:      window. A small, candle-lit table is set up, with dinner
  1847       for two. The spinster sweeps into the room, smiling. She

  3985               the phone. You have to be here, and
  3986:              see the whole set-up.
  3987  

  4011  
  4012:     Stella returns with the table, and sets it up so that it is
  4013      across Jess's lap. She gets the tray of food pausing to

  4938  
  4939:     The sun has just set. THE CAMERA is concentrating on the
  4940      long-focus lens camera which fills the screen. Just beyond,

  5010      looks of the apartment he is preparing for guests. An
  5011:     attractive girl is setting out trays of canapes, glasses,
  5012      ice and liquor. She pauses as she crosses the room carrying

  5850      She comes forward hands one snifter to Jeff. She offers the
  5851:     second to Coyne. (NOTE: In the following set of scenes,
  5852      whenever anyone holds a brandy sniffer, it is being

  6310      Neither Jeff or Lisa display even the slightest
  6311:     friendliness. Their faces are cold and set. Then Lisa
  6312      speaks, icily:

  6756  to the railing of the fire escape, gripping it fiercely.
  6757: She lifts her face to the neighborhood, her lips set and
  6758  her eyes burning. Her chest moves convulsively from the

  7715          For a little business meeting - to
  7716:         settle the estate of your late
  7717          wife.

  9236      travel book and reaches for the latest copy of Harper's
  9237:     Bazaar. She settles down to study it as we
  9238  

packages\app\public\samples\scripts\Star Wars A New Hope.txt:
   116      A death-white wasteland stretches from horizon to horizon.
   117:     The tremendous heat of two huge twin suns settle on a lone
   118      figure, Luke Skywalker, a farm boy with heroic aspirations

   265                         TROOPER
   266:              There she is! Set for stun!
   267  

   352  
   353: 12A EXT. TATOOINE - ANCHORHEAD SETTLEMENT - POWER STATION - DAY 12A
   354  

   356       buildings. Luke pilots his Landspeeder through the dusty
   357:      empty street of the tiny settlement.
   358  

   439  
   440: 15   EXT. TATOOINE - ANCHORHEAD - SETTLEMENT - POWER STATION -        15
   441  

   636          What makes you think there are
   637:         settlements over there?
   638  

   704  
   705: 19A EXT. TATOOINE - ANCHORHEAD SETTLEMENT - POWER STATION - DAY 19A
   706  

   720          the Skyhopper pretty bad. Uncle
   721:         Owen was pretty upset. He grounded
   722          me for the rest of the season. You

   868  
   869: 21   EXT. TATOOINE - ROCK CANYON - SUNSET                            21
   870  

   900  
   901: 22   EXT. TATOOINE - ROCK CANYON - SANDCRAWLER - SUNSET              22
   902  

   939  
   940: 25   EXT. TATOOINE - ROCK CANYON - SANDCRAWLER - SUNSET            25
   941  
   942       The enormous Sandcrawler lumbers off toward the magnificent
   943:      twin suns, which are slowly setting over a distant mountain
   944       ridge.

  1921       pointed gaderffii -- the dreaded axe blade that has struck
  1922:      terror in the heart of the local settlers. But Luke manages
  1923       to block the blow with his laser rifle, which is smashed to

  1944       and leans over Luke. His ancient leathery face, cracked and
  1945:      weathered by exotic climates is set off by dark,
  1946       penetrating eyes and a scraggly white beard. Ben Kenobi

  3045               All systems are operational. What
  3046:              course shall we set?
  3047  

  3058                    (to soldier)
  3059:              Set your course for Princess Leia's
  3060               home planet of Alderaan.

  3281  
  3282:      Chewbacca settles into the pilot's chair and starts the
  3283       mighty engines of the starship.

  3670          Let him have it. It's not wise to
  3671:         upset a Wookiee.
  3672  

  3677          But sir, nobody worries about
  3678:         upsetting a droid.
  3679  

  3892       Ben moves into the cockpit behind Luke as the ship begins
  3893:      to settle down.
  3894                                                               72.

  5932      Luke climbs down the ladder into the gunport cockpit,
  5933:     settling into one of the two main laser cannons mounted in
  5934      large rotating turrets on either side of the ship.

  5938  
  5939:     Han adjusts his headset as he sits before the controls of
  5940      his laser cannon, then speaks into the attached microphone.

  6388      An alert guard, his laser gun in hand, scans the
  6389:     countryside. He sets the gun down and looks toward the
  6390      temple, barely visible in the foliage.

  6405  
  6406:     The military speeder stops in a huge spaceship hangar, set
  6407      up in the interior of the crumbling temple. Willard, the

  6527                         DODONNA (CONT’D)
  6528:              Only a precise hit will set up a
  6529               chain reaction. The shaft is ray-

  6835      around a huge planet, Yavin. Rebel fighters flying in
  6836:     formation settle ominously in the foreground and very
  6837      slowly pull away.

  6865                         RED SEVEN
  6866:                   (over Biggs' headset)
  6867               Red Seven standing by.

  6878                         RED NINE
  6879:                   (over headset)
  6880               Red Nine standing by.

  6891                         RED ELEVEN
  6892:                   (over headset)
  6893               Red Eleven standing by.

  6921                         READ LEADER
  6922:                   (over headset)
  6923               We're passing through their

  6939                         RED LEADER
  6940:                   (over headset)
  6941               Switch your deflectors on.

  6946                         RED LEADER
  6947:                   (over headset)
  6948               Double front!

  6970                         RED LEADER
  6971:                   (over headset)
  6972               Cut the chatter, Red Two.

  6997                         RED LEADER
  6998:                   (over headset)
  6999               I copy, Gold Leader.

  7104                         BIGGS
  7105:                   (over headset)
  7106               Luke, pull up!

  7254      Dodonna watches quietly from one corner. One of the
  7255:     officers working over a screen speaks into his headset.
  7256  

  7397                         WEDGE
  7398:                   (over headset)
  7399               Watch your back! Fighter's above

  7445                         RED LEADER
  7446:                   (over headset)
  7447               Red Six...

  7493                         WEDGE
  7494:                   (over headset)
  7495               Hold on!

  7862                         GOLD FIVE
  7863:                   (over headset)
  7864               Lost Tiree, lost Dutch.

  7948                         DODONNA
  7949:                   (over headset)
  7950               Red Leader, this is Base One. Keep

  7960  
  7961:                   (over headset)
  7962               Copy, Base One. Luke, take Red Two

  8064                         LUKE
  8065:                   (over headset)
  8066                                                                148.

  8258                         LUKE
  8259:                   (over headset)
  8260               Red Leader, we're right above you.

  8272                         RED LEADER
  8273:                   (over headset)
  8274               Stay there...

  8290                         RED LEADER
  8291:                   (over headset)
  8292:              Get set to make your attack run.
  8293  

  8396                         WEDGE
  8397:                   (over headset)
  8398               My scope shows the tower, but I

  8593                         BIGGS
  8594:                   (over headset)
  8595               Hurry up, Luke!

  8972  
  8973:     Solo, smiling, speaks to Luke over his headset mike.
  8974  

packages\app\public\samples\scripts\The Apery.txt:
   273      His final glance at them is one of certainty.
   274:     As he exits, silence settles over their booth.
   275  

   372           And once they're down, I'm in.
   373:          The distraction's all set.
   374  

   537  
   538:     She adjusts her magnifying headset, scrutinizing her delicate
   539      creation. Each soldered connection sings with potential.

   554                              SASHA (CONT'D)
   555:                   (into her headset)
   556           Tess, Sentries are about to waltz into their debut...

   707  
   708:     The stage is set, pieces moving in harmony.
   709      The crew blends into the gallery's rhythm.

   725  
   726:     The STAGE, set.
   727  

   771  
   772:     The hall is cavernous and slowly emptying, allowing the setting
   773      sun to cast long, dramatic shadows across the floor.

   788      Suddenly, the feed FLICKERS and goes BLACK for a moment.
   789:     The guard sits up, startled, then settles back as the
   790      image restores.

   815                    (with a confident nod)
   816:          My gear's set.
   817  

   918      He signals an "all clear" snapping on gloves as he prepares
   919:     to open the door with a set of expertly crafted KEYS.
   920  

   958  
   959:     The hall, now veiled in darkness, is a stage set for deception.
   960      MAYA and SASHA emerge from the shadows, moving briskly but

  1205  
  1206:     A pre-set DETONATION goes off behind them,
  1207      sending a SHOWER OF SPARKS and DEBRIS into

  1221                    (urgent, into radio)
  1222:          They've set a trap.
  1223           I need aerial support and all units to converge on—

  1597      into the car, he takes one last look at the warehouse, a
  1598:     feeling of unease settling in his stomach.
  1599  

packages\app\public\samples\scripts\The Goonies.txt:
   113      Leaning out the window of the driver's side, puffing on a
   114:     cigarette, is MAMA FRATELLI. She is a 56 year old, heavyset
   115      woman, with grey hair and a MENACING, EVIL face. She is

   131  
   132:     Mama DRIVES. PANICKED. UPSET. She CHECKS the rearview
   133      mirror. A second police car joins the chase. The Police are

   637  himself to a clothes line that CONNECTS Mikey’s house to
   638: Data's. A LARGE PORTABLE CASSETTE player is STRAPPED to
   639: Data's chest. The Bond Theme BLARES from the cassette.
   640  

   735  
   736: He opens his JACKET and REMOVES the cassette player. Inside
   737  of his shirt, is a CRUDE DEVICE that is covered with

   840  
   841:      Irene ENTERS with Rosalita and Mouth. Irene walks to a set
   842       of DRESSER DRAWERS. She POINTS each drawer out to Rosalita.

   918       Irene and Mouth enter with the HORRIFIED-Rosalita. Irene
   919:      opens a SUPPLY CLOSET. She POINTS inside.
   920  
   921                         IRENE
   922:              This is the supply closet. You’ll
   923               find everything you-need inside.

  2405  a CROOKED TABLE. It is IMPOSSIBLE to eat a meal at this
  2406: table. It is WOBBLY. DIRTY. STICKY. Set with filthy,
  2407  YELLOWED dishes and RUSTY silverware.

  3398               again. I ain't goin' back to the
  3399:              zoo for another set.
  3400  

  3891                    DATA
  3892:         I'm setting booby traps. In case
  3893          anybody follows us. We'll hear 'em

  4260               was okay at first -- then he
  4261:              started gettin' closet --
  4262:              closetphotos --
  4263  

  4790      BETWEEN them both. On the FLOOR. Out of Chunk and Sloth's
  4791:     REACH. Sloth GROWLS. ANGRY. UPSET. He begins to PULL at the
  4792      chains that BIND HIS LEGS to the wall.

  4938          So, Willy formed this Pirate Band -
  4939:         - and they set sail on this ship,
  4940          "Inferno". Willy and his men

  5242      small PATH that we see is meant for the cannonball. In
  5243:     typical RUBE GOLDBERG fashion, the cannonball sets off a
  5244      chain of events that climaxes with the FLOOR BENEATH DATA

  6498  Andy's breasts, pulling her toward the squid's gaping
  6499: mouth. Data removes his cassette player from his backpack.
  6500  He turns it on! Cranking the volume. The Talking Heads
  6501  "Burning Down the House" blasts from the twin speakers!
  6502: Data throws the cassette player into the squid's mouth.
  6503                                                             120.

packages\app\public\samples\scripts\The Wizard Of Oz.txt:
  2095  
  2096: ELS -- Shooting down from high set-up to Dorothy on the
  2097  Yellow Brick Road -- the Munchkins all grouped along the

  6436  LS - Int. Entrance Hall of Castle - camera shooting down
  6437: from high set-up as the Winkies march into the hall -
  6438  CAMERA BOOMS down on the file to Scarecrow, the Tin Man,

packages\app\src\app\main.tsx:
   16  
   17: import { SettingsDialog } from '@/components/settings'
   18  import { LoadingDialog } from '@/components/dialogs/loader/LoadingDialog'

   30  
   31: import { useUI, useIO, useTheme, useMonitor } from '@/services'
   32  import { useRenderLoop } from '@/services/renderer'

   35  import { useQueryStringLoader } from '@/components/toolbars/top-menu/file/useQueryStringLoader'
   36: import { useSetupIframeOnce } from './embed/useSetupIframeOnce'
   37  import { TimelineZoom } from '@/components/core/timeline/TimelineZoom'

   53    const showAssistant = useUI((s) => s.showAssistant)
   54:   const theme = useTheme()
   55    const openFiles = useIO((s) => s.openFiles)

   71    // also has to be done here
   72:   useSetupIframeOnce(isIframe)
   73  

   87  
   88:   const setHasBetaAccess = useUI((s) => s.setHasBetaAccess)
   89  

   92    useEffect(() => {
   93:     setHasBetaAccess(hasBetaAccess)
   94:   }, [hasBetaAccess, setHasBetaAccess])
   95  

  353  
  354:       <SettingsDialog />
  355        <LoadingDialog />

  361  
  362: function fallbackRender({ error, resetErrorBoundary }: FallbackProps) {
  363:   // Call resetErrorBoundary() to reset the error boundary and retry the render.
  364  

packages\app\src\app\page.tsx:
  11  export default function MainPage() {
  12:   const [isLoaded, setLoaded] = useState(false)
  13    useEffect(() => {
  14:     setLoaded(true)
  15    }, [])

packages\app\src\app\api\getApiKey.ts:
  1: import { clapperApiKeyToUseBuiltinCredentials } from './globalSettings'
  2  

packages\app\src\app\api\globalSettings.ts:
  3  export const clapperApiKeyToUseBuiltinCredentials = `${process.env.CLAPPER_API_KEY_TO_USE_BUILTIN_CREDENTIALS || ''}`
  4: export const disableProviderCredentialsInUserSettings: boolean =
  5:   `${process.env.NEXT_PUBLIC_DISABLE_PROVIDER_CREDENTIALS_IN_USER_SETTINGS || ''}`.toLowerCase() ===
  6    'true'

packages\app\src\app\api\assistant\askAnyAssistant.ts:
   47    builtinProviderCredentialsOpenai,
   48: } from '../globalSettings'
   49  

   57  export async function askAnyAssistant({
   58:   settings,
   59  

   76  }: AssistantRequest): Promise<AssistantMessage> {
   77:   const workflow = settings.assistantWorkflow
   78    const provider = workflow.provider

   90            apiKey: getApiKey(
   91:             settings.groqApiKey,
   92              builtinProviderCredentialsGroq,
   93:             settings.clapperApiKey
   94            ),

  100              openAIApiKey: getApiKey(
  101:               settings.openaiApiKey,
  102                builtinProviderCredentialsOpenai,
  103:               settings.clapperApiKey
  104              ),

  110                anthropicApiKey: getApiKey(
  111:                 settings.anthropicApiKey,
  112                  builtinProviderCredentialsAnthropic,
  113:                 settings.clapperApiKey
  114                ),

  120                  apiKey: getApiKey(
  121:                   settings.cohereApiKey,
  122                    builtinProviderCredentialsCohere,
  123:                   settings.clapperApiKey
  124                  ),

  130                    apiKey: getApiKey(
  131:                     settings.mistralAiApiKey,
  132                      builtinProviderCredentialsMistralai,
  133:                     settings.clapperApiKey
  134                    ),

  140                      apiKey: getApiKey(
  141:                       settings.googleApiKey,
  142                        builtinProviderCredentialsGoogle,
  143:                       settings.clapperApiKey
  144                      ),

  211        // chat history that will contain JSON and will only be shown to the AI
  212:       // by using the `visibility` setting
  213        chatHistory: history

packages\app\src\app\api\assistant\samples.ts:
   43        blockId: 0,
   44:       block: `The scene is set at night.
   45  The character wears a jacket.

   74        blockId: 0,
   75:       block: `The scene is set at night, and features ARCHER, a 38yo male.
   76  ARCHER has chestnut hair in slicked-undercut style, short-boxed beard, green eyes, diamond-shaped head with round metal glasses.

  270  export const analysisOutputExample: AssistantMessage = {
  271:   comment: `Leon appears to be in a dimly lit setting within the prestigious Lavington Gallery. The scene is designed to evoke suspense, with ethereal heist music enhancing the tension. The mood is both cinematic and contemporary, featuring medium-long shots that capture the elegant neoclassical architecture of the gallery. 
  272  

  275  - **Lighting & Style**: A visually suspenseful atmosphere is created through dim lighting and cinematic styling, aligning with the theme of a thrilling narrative.
  276: - **Location Details**: The setting is significant; being in an established gallery hints at high stakes, possibly involving art theft or a dramatic encounter.
  277  
  278: The combination of the music, visuals, and Leon's internal thoughts sets up a gripping atmosphere, promising intrigue and depth in his character's journey. Let me know if you want to make adjustments or need more specific insights!`,
  279    action: AssistantAction.NONE,

  376    directorRequest:
  377:     "it looks a bit bland, any idea to set a darker mood and/or make the scene 'pop' more?",
  378    storyBlocks: [

  380        blockId: 72,
  381:       block: 'The scene is set during the day.',
  382      },

  418    comment:
  419:     'I have added some light raining to set a darker tone, and produce nice reflections on the ground? also make it twice as long please.',
  420    action: AssistantAction.UPDATE_STORY_AND_SCENE,

  423        blockId: 72,
  424:       block: 'The scene is set during the evening.',
  425      },

  468        blockId: 72,
  469:       block: 'The scene is set during the evening.',
  470      },

  514        blockId: 72,
  515:       block: 'The scene is set during the evening.',
  516      },

packages\app\src\app\api\assistant\templates.ts:
   24  
   25: When asked to create a new story, you must you must set the "action" field to "UPDATE_STORY_AND_SCENE", and give your answer in both those fields:
   26  - updatedSceneSegments: the most important part, this is an array of temporally segments describing the scene and movie

   35  When the director wants to edit the characteristics of the video scene, you need to be straight in your reply and only return JSON, without chitchat.
   36: Remember: the movie scene is represented as a JSON array of objects for each facet of the scene setup.
   37  Each item describes a different property (or facet) of the scene, based on its category type.

   87  
   88: Remember! When asked to create a new story, you must set the "action" field to "UPDATE_STORY_AND_SCENE", give your answer in both those fields:
   89  - updatedSceneSegments: the most important part, this is an array of temporally segments describing the scene and movie

   91  
   92: Here's the director is working on a 2-shots scenes using two camera settings (spanning over two timestamps ranges) at specific timecode (with start/end times for each shot, with predefined slots for the camera and storyboard, the style used for image generation which is a Stable Diffusion prompt),
   93  and want us to invent the elements of the scene.

  115  
  116: To ensure CAMERA consistency, remember to add, fix or remove CAMERA shots (a shot has camera settings like medium-shot, close-up etc).
  117  

  178  
  179: Important, please remember to add any missing CAMERA shot (a CAMERA shot defines camera settings like medium-shot, close-up etc).
  180  

packages\app\src\app\api\resolve\route.ts:
    5    ClapSegmentStatus,
    6:   getClapAssetSourceType,
    7    ClapWorkflowProvider,
    8    ClapWorkflow,
    9:   ClapAssetSource,
   10    ClapWorkflowEngine,

  127  
  128:     segment.assetUrl = await decodeOutput(segment.assetUrl)
  129  
  130:     segment.assetSourceType = getClapAssetSourceType(segment.assetUrl)
  131  

  133  
  134:     const { assetFileFormat, outputType } = getTypeAndExtension(
  135:       segment.assetUrl
  136      )
  137  
  138:     segment.assetFileFormat = assetFileFormat
  139      segment.outputType = outputType

  145        // TODO this should be down in the browser side, so that we can scale better
  146:       const { durationInMs, hasAudio } = await getMediaInfo(segment.assetUrl)
  147:       segment.assetDurationInMs = durationInMs
  148  

  155          hasAudio,
  156:         "segment.assetDurationInMs":  segment.assetDurationInMs,
  157          "segment.outputGain": segment.outputGain,

  162      console.error(`failed to generate a segment: ${err}`)
  163:     segment.assetUrl = ''
  164:     segment.assetSourceType = ClapAssetSource.EMPTY
  165:     segment.assetDurationInMs = 0
  166      segment.outputGain = 0

  172      faceswapProvider &&
  173:     request.settings.imageFaceswapWorkflow.data &&
  174:     segment.assetUrl &&
  175      request.prompts.image.identity

  192  
  193:         segment.assetUrl = await decodeOutput(segment.assetUrl)
  194  
  195:         segment.assetSourceType = getClapAssetSourceType(segment.assetUrl)
  196  

  198  
  199:         const { assetFileFormat, outputType } = getTypeAndExtension(
  200:           segment.assetUrl
  201          )
  202  
  203:         segment.assetFileFormat = assetFileFormat
  204          segment.outputType = outputType

  215    const hasValidVideo =
  216:     segment.category === ClapSegmentCategory.VIDEO && segment.assetUrl
  217  

  220    )
  221:   const hasValidAudio = firstDialogue?.assetUrl
  222  

  224      lipsyncProvider &&
  225:     request.settings.videoLipsyncWorkflow.data &&
  226      hasValidVideo &&

  244  
  245:         segment.assetUrl = await decodeOutput(segment.assetUrl)
  246  
  247:         segment.assetSourceType = getClapAssetSourceType(segment.assetUrl)
  248  

  250  
  251:         const { assetFileFormat, outputType } = getTypeAndExtension(
  252:           segment.assetUrl
  253          )
  254  
  255:         segment.assetFileFormat = assetFileFormat
  256          segment.outputType = outputType

packages\app\src\app\api\resolve\providers\aitube\index.ts:
   5    ClapSegmentStatus,
   6:   getClapAssetSourceType,
   7    newClap,

  20    clapperApiKeyToUseBuiltinCredentials,
  21: } from '@/app/api/globalSettings'
  22  

  25  ): Promise<TimelineSegment> {
  26:   let apiKey = request.settings.aiTubeApiKey
  27  

  30        if (
  31:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  32        ) {

packages\app\src\app\api\resolve\providers\bigmodel\callCogVideoX.ts:
  54          // Wait for 5 seconds before polling again
  55:         await new Promise((resolve) => setTimeout(resolve, 5000))
  56        }

packages\app\src\app\api\resolve\providers\bigmodel\index.ts:
   8    clapperApiKeyToUseBuiltinCredentials,
   9: } from '@/app/api/globalSettings'
  10  

  13  ): Promise<TimelineSegment> {
  14:   let apiKey = request.settings.bigModelApiKey
  15  

  18        if (
  19:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  20        ) {

  33  
  34:   let model = request.settings.imageGenerationWorkflow.data || ''
  35  
  36    if (request.segment.category === ClapSegmentCategory.VIDEO) {
  37:     model = request.settings.videoGenerationWorkflow.data || ''
  38  

  54      const result = await callCogVideoX(apiKey, {
  55:       model: request.settings.videoGenerationWorkflow.data,
  56        image_url: request.prompts.video.image,

  63  
  64:     segment.assetUrl = video.url
  65    } else {

packages\app\src\app\api\resolve\providers\civitai\index.ts:
   6    clapperApiKeyToUseBuiltinCredentials,
   7: } from '@/app/api/globalSettings'
   8  

  11  ): Promise<TimelineSegment> {
  12:   let apiKey = request.settings.civitaiApiKey
  13  

  16        if (
  17:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  18        ) {

packages\app\src\app\api\resolve\providers\comfy-comfydeploy\index.ts:
   4    ClapSegmentStatus,
   5:   getClapAssetSourceType,
   6  } from '@aitube/clap'

  12  ): Promise<TimelineSegment> {
  13:   if (!request.settings.comfyDeployApiKey) {
  14      throw new Error(`Missing API key for "ComfyDeploy"`)

  18      const inputFields =
  19:       request.settings.imageGenerationWorkflow.inputFields || []
  20  

  39      // to inject our params:
  40:     // ...getWorkflowInputValues(request.settings.imageGenerationWorkflow),
  41      // [promptField.id]: request.prompts.image.positive,

packages\app\src\app\api\resolve\providers\comfy-comfyicu\index.ts:
   4    ClapSegmentStatus,
   5:   getClapAssetSourceType,
   6  } from '@aitube/clap'

  13  ): Promise<TimelineSegment> {
  14:   if (!request.settings.comfyIcuApiKey) {
  15      throw new Error(`Missing API key for "Comfy.icu"`)

  19      const workflowId =
  20:       request.settings.imageGenerationWorkflow.id.split('://').pop() || ''
  21  

  26      const inputFields =
  27:       request.settings.imageGenerationWorkflow.inputFields || []
  28  

  47      // to inject our params:
  48:     // ...getWorkflowInputValues(request.settings.imageGenerationWorkflow),
  49      // [promptField.id]: request.prompts.image.positive,

  52        workflow_id: workflowId,
  53:       prompt: request.settings.imageGenerationWorkflow.data,
  54        files: {},

  62            'content-type': 'application/json',
  63:           authorization: `Bearer ${request.settings.comfyIcuApiKey}`,
  64          },

packages\app\src\app\api\resolve\providers\comfy-huggingface\index.ts:
   4    ClapSegmentStatus,
   5:   getClapAssetSourceType,
   6  } from '@aitube/clap'

  11  ): Promise<TimelineSegment> {
  12:   if (!request.settings.huggingFaceApiKey) {
  13      throw new Error(`Missing API key for "Hugging Face"`)

  26      console.error(`failed to call Hugging Face: `, err)
  27:     segment.assetUrl = ''
  28:     segment.assetSourceType = getClapAssetSourceType(segment.assetUrl)
  29      segment.status = ClapSegmentStatus.TO_GENERATE

packages\app\src\app\api\resolve\providers\comfy-replicate\index.ts:
   3    ClapSegmentStatus,
   4:   getClapAssetSourceType,
   5  } from '@aitube/clap'

  13    clapperApiKeyToUseBuiltinCredentials,
  14: } from '@/app/api/globalSettings'
  15  

  18  ): Promise<TimelineSegment> {
  19:   let apiKey = request.settings.replicateApiKey
  20  

  23        if (
  24:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  25        ) {

  40      const inputFields =
  41:       request.settings.imageGenerationWorkflow.inputFields || []
  42  

  63      try {
  64:       segment.assetUrl = await runWorkflow({
  65          apiKey,

  67        })
  68:       segment.assetSourceType = getClapAssetSourceType(segment.assetUrl)
  69      } catch (err) {
  70        console.error(`failed to call Replicate: `, err)
  71:       segment.assetUrl = ''
  72:       segment.assetSourceType = getClapAssetSourceType(segment.assetUrl)
  73        segment.status = ClapSegmentStatus.TO_GENERATE

packages\app\src\app\api\resolve\providers\comfyui\convertComfyUiWorkflowApiToClapWorkflow.ts:
  21          return {
  22:           id: 'comfyui://settings.comfyWorkflowForVideo',
  23            label: 'Custom Video Workflow',

  39          return {
  40:           id: 'comfyui://settings.comfyWorkflowForImage',
  41            label: 'Custom Image Workflow',

packages\app\src\app\api\resolve\providers\comfyui\createPromptBuilder.spec.ts:
  562    const workflow = new ComfyUIWorkflowApiGraph(workflowRaw)
  563:   workflow.setInputValue('3.inputs.seed', 1121)
  564    workflowRaw['3'].inputs.seed = 1111
  565    expect(workflow.toJson()).not.toEqual(workflowRaw)
  566:   workflow.setInputValue('3.inputs.seed', 3333)
  567    workflowRaw['3'].inputs.seed = 3333

packages\app\src\app\api\resolve\providers\comfyui\createPromptBuilder.ts:
  33    inputKeys.forEach((inputKey) => {
  34:     promptBuilder.setInputNode(inputKey, inputKey)
  35    })

  37    if (outputNode) {
  38:     promptBuilder.setOutputNode(ClapperComfyUiInputIds.OUTPUT, outputNode.id)
  39    }

packages\app\src\app\api\resolve\providers\comfyui\getInputsFromComfyUiWorkflow.ts:
  43      // Required fields that should be available in the workflow, otherwise
  44:     // Clapper doesn't know how to input its settings (prompts, dimensions, etc)
  45      {
  46        id: '@clapper/mainInputs',
  47:       label: 'Main settings',
  48        type: 'group' as any,

  56        id: '@clapper/otherInputs',
  57:       label: 'Node settings',
  58        type: 'group' as any,

  71              category: ClapInputCategory.UNKNOWN,
  72:             description: `Settings for ${_meta?.title}`,
  73              defaultValue: '',

packages\app\src\app\api\resolve\providers\comfyui\getMainInputsFromComfyUiWorkflow.ts:
   98          id: ClapperComfyUiInputIds.NULL,
   99:         name: 'Unset',
  100          node: {

  108            p.id === ClapperComfyUiInputIds.NULL
  109:             ? `Unset`
  110              : `${p.name} (from node ${p.node.id})`,

  197            category: ClapInputCategory.UNKNOWN,
  198:           description: 'The node input where Clapper will set a seed',
  199            defaultValue: '',

  211            category: ClapInputCategory.UNKNOWN,
  212:           description: 'The node input where Clapper will set an image',
  213            defaultValue: '',

packages\app\src\app\api\resolve\providers\comfyui\graph.ts:
  365  
  366:   setInputValue(
  367      inputKey: string,

packages\app\src\app\api\resolve\providers\comfyui\index.ts:
    2  import {
    3:   ClapAssetSource,
    4    ClapSegmentCategory,

   21  ): Promise<TimelineSegment> {
   22:   if (!request.settings.comfyUiClientId) {
   23      throw new Error(`Missing client id for "ComfyUI"`)

   29      type: 'basic',
   30:     username: request.settings.comfyUiHttpAuthLogin,
   31:     password: request.settings.comfyUiHttpAuthPassword,
   32    }

   36    const api = new ComfyApi(
   37:     request.settings.comfyUiApiUrl || 'http://localhost:8188',
   38:     request.settings.comfyUiClientId,
   39  

   41      // also in the future, we might support other things (bearer tokens?)
   42:     request.settings.comfyUiHttpAuthLogin
   43        ? {

   54      const clapWorkflow = {
   55:       [ClapSegmentCategory.IMAGE]: request.settings.imageGenerationWorkflow,
   56:       [ClapSegmentCategory.VIDEO]: request.settings.videoGenerationWorkflow,
   57      }[request.segment.category]

  110  
  111:     // Set output
  112:     comfyApiWorkflowPromptBuilder.setOutputNode(
  113        ClapperComfyUiInputIds.OUTPUT,

  135  
  136:     const getAssetPaths = (rawOutput) => {
  137        if (clapWorkflow.category == ClapWorkflowCategory.VIDEO_GENERATION) {

  141            rawOutput[ClapperComfyUiInputIds.OUTPUT]?.images
  142:         ).map((asset: any) => api.getPathImage(asset))
  143        } else {

  148      }
  149:     const assetPaths = getAssetPaths(rawOutput)
  150  
  151:     console.log(`assetPaths:`, assetPaths)
  152  
  153:     const assetPath = assetPaths.at(0)
  154:     if (!assetPath) {
  155        throw new Error(`failed to run the pipeline (no image)`)

  158      // TODO: check what the imagePath looks like exactly
  159:     const assetUrl = await decodeOutput(assetPath)
  160  
  161:     console.log(`assetUrl:`, assetPath)
  162:     segment.assetUrl = assetUrl
  163:     segment.assetSourceType = ClapAssetSource.DATA
  164  

packages\app\src\app\api\resolve\providers\comfyui\tests.spec.ts:
  568    const workflow = new ComfyUIWorkflowApiGraph(workflowRaw)
  569:   workflow.setInputValue('3.inputs.seed', 1121)
  570    workflowRaw['3'].inputs.seed = 1111
  571    expect(workflow.toJson()).not.toEqual(workflowRaw)
  572:   workflow.setInputValue('3.inputs.seed', 3333)
  573    workflowRaw['3'].inputs.seed = 3333

packages\app\src\app\api\resolve\providers\falai\index.ts:
   17    clapperApiKeyToUseBuiltinCredentials,
   18: } from '@/app/api/globalSettings'
   19  

   22  ): Promise<TimelineSegment> {
   23:   let apiKey = request.settings.falAiApiKey
   24  

   27        if (
   28:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
   29        ) {

   46  
   47:   let model = request.settings.imageGenerationWorkflow.data || ''
   48  

   52    if (request.segment.category === ClapSegmentCategory.IMAGE) {
   53:     model = request.settings.imageGenerationWorkflow.data || ''
   54  

   67        if (!request.prompts.image.identity) {
   68:         // throw new Error(`you selected model ${request.settings.falAiModelForImage}, but no character was found, so skipping`)
   69:         // console.log(`warning: user selected model ${request.settings.falAiModelForImage}, but no character was found. Falling back to fal-ai/flux-pro`)
   70  

   78      const { workflowDefaultValues, workflowValues } = getWorkflowInputValues(
   79:       request.settings.imageGenerationWorkflow
   80      )

  123            enable_safety_checker:
  124:             request.settings.censorNotForAllAudiencesContent,
  125          },

  129        const loraModel = getWorkflowLora(
  130:         request.settings.imageGenerationWorkflow
  131        )

  158            enable_safety_checker:
  159:             request.settings.censorNotForAllAudiencesContent,
  160          },

  173            enable_safety_checker:
  174:             request.settings.censorNotForAllAudiencesContent,
  175          },

  178  
  179:     if (request.settings.censorNotForAllAudiencesContent) {
  180        if (

  184          throw new Error(
  185:           `The generated content has been filtered according to your safety settings`
  186          )

  189  
  190:     segment.assetUrl = result.images[0]?.url || ''
  191    } else if (request.segment.category === ClapSegmentCategory.VIDEO) {
  192:     model = request.settings.videoGenerationWorkflow.data || ''
  193  
  194:     // console.log(`request.settings.falAiModelForVideo = `, request.settings.falAiModelForVideo)
  195      if (model === 'fal-ai/live-portrait' && request.prompts.video.image) {

  207            enable_safety_checker:
  208:             request.settings.censorNotForAllAudiencesContent,
  209          },

  211  
  212:       if (request.settings.censorNotForAllAudiencesContent) {
  213          if (

  217            throw new Error(
  218:             `The generated content has been filtered according to your safety settings`
  219            )

  224  
  225:       segment.assetUrl = result?.video?.url || ''
  226      } else if (model === 'fal-ai/cogvideox-5b') {

  233        const { workflowDefaultValues, workflowValues } = getWorkflowInputValues(
  234:         request.settings.videoGenerationWorkflow
  235        )

  256            enable_safety_checker:
  257:             request.settings.censorNotForAllAudiencesContent,
  258          },

  260  
  261:       if (request.settings.censorNotForAllAudiencesContent) {
  262          if (

  266            throw new Error(
  267:             `The generated content has been filtered according to your safety settings`
  268            )

  271  
  272:       segment.assetUrl = result?.video?.url || ''
  273      } else if (model === 'fal-ai/stable-video') {

  279          input: {
  280:           ...getWorkflowInputValues(request.settings.videoGenerationWorkflow),
  281  

  285            enable_safety_checker:
  286:             request.settings.censorNotForAllAudiencesContent,
  287          },

  289  
  290:       if (request.settings.censorNotForAllAudiencesContent) {
  291          if (

  295            throw new Error(
  296:             `The generated content has been filtered according to your safety settings`
  297            )

  300  
  301:       segment.assetUrl = result?.video?.url || ''
  302      } else if (model === 'fal-ai/kling-video/v1/standard/text-to-video') {

  308          input: {
  309:           ...getWorkflowInputValues(request.settings.videoGenerationWorkflow),
  310  

  312            enable_safety_checker:
  313:             request.settings.censorNotForAllAudiencesContent,
  314          },

  316  
  317:       if (request.settings.censorNotForAllAudiencesContent) {
  318          if (

  322            throw new Error(
  323:             `The generated content has been filtered according to your safety settings`
  324            )

  327  
  328:       segment.assetUrl = result?.video?.url || ''
  329      } else if (model === 'fal-ai/runway-gen3/turbo/image-to-video') {

  339          input: {
  340:           ...getWorkflowInputValues(request.settings.videoGenerationWorkflow),
  341  

  345            enable_safety_checker:
  346:             request.settings.censorNotForAllAudiencesContent,
  347          },

  349  
  350:       if (request.settings.censorNotForAllAudiencesContent) {
  351          if (

  355            throw new Error(
  356:             `The generated content has been filtered according to your safety settings`
  357            )

  360  
  361:       segment.assetUrl = result?.video?.url || ''
  362      } else {

  367    } else if (request.segment.category === ClapSegmentCategory.SOUND) {
  368:     model = request.settings.musicGenerationWorkflow.data
  369  

  371        input: {
  372:         ...getWorkflowInputValues(request.settings.soundGenerationWorkflow),
  373  

  377          sync_mode: true,
  378:         enable_safety_checker: request.settings.censorNotForAllAudiencesContent,
  379        },

  381  
  382:     segment.assetUrl = result?.audio_file?.url || ''
  383    } else if (request.segment.category === ClapSegmentCategory.MUSIC) {
  384:     model = request.settings.musicGenerationWorkflow.data
  385  

  387        input: {
  388:         ...getWorkflowInputValues(request.settings.soundGenerationWorkflow),
  389  

  393          sync_mode: true,
  394:         enable_safety_checker: request.settings.censorNotForAllAudiencesContent,
  395        },

  397  
  398:     segment.assetUrl = result?.audio_file?.url || ''
  399    } else if (request.segment.category === ClapSegmentCategory.DIALOGUE) {
  400:     model = request.settings.voiceGenerationWorkflow.data || ''
  401  

  405        input: {
  406:         ...getWorkflowInputValues(request.settings.voiceGenerationWorkflow),
  407  

  411          sync_mode: true,
  412:         enable_safety_checker: request.settings.censorNotForAllAudiencesContent,
  413        },

  415  
  416:     segment.assetUrl = result?.audio_url?.url || ''
  417    } else {

packages\app\src\app\api\resolve\providers\falai\runFaceSwap.ts:
   8    clapperApiKeyToUseBuiltinCredentials,
   9: } from '@/app/api/globalSettings'
  10  

  13  ): Promise<TimelineSegment> {
  14:   let apiKey = request.settings.falAiApiKey
  15  

  18        if (
  19:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  20        ) {

  39      const imageFaceswapWorkflowModel =
  40:       request.settings.imageFaceswapWorkflow.data || ''
  41  

  46      }
  47:     if (!segment.assetUrl) {
  48:       throw new Error(`cannot run the face swap without an assetUrl`)
  49      }

  57            input: {
  58:             base_image_url: segment.assetUrl,
  59              swap_image_url: request.prompts.image.identity,

  63              enable_safety_checker:
  64:               request.settings.censorNotForAllAudiencesContent,
  65            },

  73  
  74:         if (request.settings.censorNotForAllAudiencesContent) {
  75            if (

  79              throw new Error(
  80:               `The generated content has been filtered according to your safety settings`
  81              )

  84  
  85:         segment.assetUrl = imageResult
  86        } catch (err) {

packages\app\src\app\api\resolve\providers\gradio\index.ts:
  12    if (request.segment.category === ClapSegmentCategory.IMAGE) {
  13:     segment.assetUrl = await callGradioApi({
  14:       url: request.settings.gradioApiUrlForImage,
  15        inputs: request.prompts.image,

  18    if (request.segment.category === ClapSegmentCategory.DIALOGUE) {
  19:     segment.assetUrl = await callGradioApi({
  20:       url: request.settings.gradioApiUrlForVoice,
  21        inputs: request.prompts.voice,

  24    if (request.segment.category === ClapSegmentCategory.VIDEO) {
  25:     segment.assetUrl = await callGradioApi({
  26:       url: request.settings.gradioApiUrlForVideo,
  27        inputs: request.prompts.video,

packages\app\src\app\api\resolve\providers\hotshot\index.ts:
   5    clapperApiKeyToUseBuiltinCredentials,
   6: } from '@/app/api/globalSettings'
   7  

  10  ): Promise<TimelineSegment> {
  11:   let apiKey = request.settings.hotshotApiKey
  12  

  15        if (
  16:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  17        ) {

packages\app\src\app\api\resolve\providers\huggingface\generateImage.ts:
   9    clapperApiKeyToUseBuiltinCredentials,
  10: } from '@/app/api/globalSettings'
  11  
  12  export async function generateImage(request: ResolveRequest): Promise<string> {
  13:   if (!request.settings.imageGenerationWorkflow.data) {
  14      throw new Error(

  24  
  25:   let apiKey = request.settings.huggingFaceApiKey
  26  

  29        if (
  30:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  31        ) {

  45    const blob: Blob = await hf.textToImage({
  46:     model: request.settings.imageGenerationWorkflow.data,
  47      inputs: request.prompts.image.positive,

packages\app\src\app\api\resolve\providers\huggingface\generateMusic.ts:
   6    clapperApiKeyToUseBuiltinCredentials,
   7: } from '@/app/api/globalSettings'
   8  
   9  export async function generateMusic(request: ResolveRequest): Promise<string> {
  10:   if (!request.settings.musicGenerationWorkflow.data) {
  11      throw new Error(

  21  
  22:   let apiKey = request.settings.huggingFaceApiKey
  23  

  26        if (
  27:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  28        ) {

  44    const blob: Blob = await hf.textToMusic({
  45:     model: request.settings.musicGenerationWorkflow.data,
  46      inputs: request.prompts.music.positive,

packages\app\src\app\api\resolve\providers\huggingface\generateVideo.ts:
   5    clapperApiKeyToUseBuiltinCredentials,
   6: } from '@/app/api/globalSettings'
   7  
   8  export async function generateVideo(request: ResolveRequest): Promise<string> {
   9:   if (!request.settings.videoGenerationWorkflow.data) {
  10      throw new Error(

  20  
  21:   let apiKey = request.settings.huggingFaceApiKey
  22  

  25        if (
  26:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  27        ) {

  39    // TODO pass a type to the template function
  40:   const assetUrl = await callGradioApi<string>({
  41:     url: request.settings.videoGenerationWorkflow.data,
  42      inputs: request.prompts.video,

  45  
  46:   return assetUrl
  47  }

packages\app\src\app\api\resolve\providers\huggingface\generateVoice.ts:
   6    clapperApiKeyToUseBuiltinCredentials,
   7: } from '@/app/api/globalSettings'
   8  
   9  export async function generateVoice(request: ResolveRequest): Promise<string> {
  10:   if (!request.settings.voiceGenerationWorkflow.data) {
  11      throw new Error(

  21  
  22:   let apiKey = request.settings.huggingFaceApiKey
  23  

  26        if (
  27:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  28        ) {

  42    const blob: Blob = await hf.textToSpeech({
  43:     model: request.settings.voiceGenerationWorkflow.data,
  44      inputs: request.prompts.voice.positive,

packages\app\src\app\api\resolve\providers\huggingface\index.ts:
  12    clapperApiKeyToUseBuiltinCredentials,
  13: } from '@/app/api/globalSettings'
  14  

  17  ): Promise<TimelineSegment> {
  18:   let apiKey = request.settings.huggingFaceApiKey
  19  

  22        if (
  23:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  24        ) {

  40    if (request.segment.category === ClapSegmentCategory.IMAGE) {
  41:     segment.assetUrl = await generateImage(request)
  42    } else if (request.segment.category === ClapSegmentCategory.DIALOGUE) {
  43:     segment.assetUrl = await generateVoice(request)
  44    } else if (request.segment.category === ClapSegmentCategory.VIDEO) {
  45:     segment.assetUrl = await generateVideo(request)
  46    } else {

packages\app\src\app\api\resolve\providers\letzai\callCreateImage.ts:
  40  // const params: ImageCreationParams = {
  41: //   prompt: "A beautiful sunset over a calm ocean",
  42  //   model: "sd_xl_base_1.0",

packages\app\src\app\api\resolve\providers\letzai\index.ts:
   9    clapperApiKeyToUseBuiltinCredentials,
  10: } from '@/app/api/globalSettings'
  11  

  14  ): Promise<TimelineSegment> {
  15:   let apiKey = request.settings.letzAiApiKey
  16  

  19        if (
  20:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  21        ) {

  34  
  35:   let model = request.settings.imageGenerationWorkflow.data || ''
  36  
  37    if (request.segment.category === ClapSegmentCategory.IMAGE) {
  38:     model = request.settings.imageGenerationWorkflow.data || ''
  39  

  47      const { workflowDefaultValues, workflowValues } = getWorkflowInputValues(
  48:       request.settings.imageGenerationWorkflow
  49      )

  69  
  70:     if (request.settings.censorNotForAllAudiencesContent) {
  71        if (result.nsfw) {
  72          throw new Error(
  73:           `The generated content has been filtered according to your safety settings`
  74          )

  81  
  82:     segment.assetUrl = `${result.output || ''}`
  83    } else {

packages\app\src\app\api\resolve\providers\lumalabs\index.ts:
   10    clapperApiKeyToUseBuiltinCredentials,
   11: } from '@/app/api/globalSettings'
   12  

   15  ): Promise<TimelineSegment> {
   16:   let apiKey = request.settings.lumaLabsApiKey
   17  

   20        if (
   21:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
   22        ) {

   41      const { workflowValues } = getWorkflowInputValues(
   42:       request.settings.videoGenerationWorkflow
   43      )

  103          // Wait for 5 seconds before polling again
  104:         await new Promise((resolve) => setTimeout(resolve, 5000))
  105        }

  107        // Store the URL of the final video
  108:       if (completedGeneration.assets?.video) {
  109:         segment.assetUrl = completedGeneration.assets.video
  110        } else {

packages\app\src\app\api\resolve\providers\modelslab\index.ts:
   4    ClapSegmentStatus,
   5:   getClapAssetSourceType,
   6  } from '@aitube/clap'

  10    clapperApiKeyToUseBuiltinCredentials,
  11: } from '@/app/api/globalSettings'
  12  

  15  ): Promise<TimelineSegment> {
  16:   let apiKey = request.settings.modelsLabApiKey
  17  

  20        if (
  21:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  22        ) {

  45      console.error(`failed to call ModelsLab: `, err)
  46:     segment.assetUrl = ''
  47:     segment.assetSourceType = getClapAssetSourceType(segment.assetUrl)
  48      segment.status = ClapSegmentStatus.TO_GENERATE

packages\app\src\app\api\resolve\providers\piapi\index.ts:
   11    clapperApiKeyToUseBuiltinCredentials,
   12: } from '@/app/api/globalSettings'
   13  

   16  ): Promise<TimelineSegment> {
   17:   let apiKey = request.settings.piApiApiKey
   18  

   21        if (
   22:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
   23        ) {

   36  
   37:   let model = request.settings.imageGenerationWorkflow.data || ''
   38  
   39    if (request.segment.category === ClapSegmentCategory.IMAGE) {
   40:     model = request.settings.imageGenerationWorkflow.data || ''
   41  

   49      const { workflowDefaultValues, workflowValues } = getWorkflowInputValues(
   50:       request.settings.imageGenerationWorkflow
   51      )

   77  
   78:     segment.assetUrl = `${result.task_result.image_url || ''}`
   79    } else if (request.segment.category === ClapSegmentCategory.VIDEO) {
   80:     const workflow = request.settings.videoGenerationWorkflow
   81  

   91      const { workflowDefaultValues, workflowValues } = getWorkflowInputValues(
   92:       request.settings.videoGenerationWorkflow
   93      )

  146  
  147:       segment.assetUrl = `${work.resource || ''}`
  148      } else if (workflow.id === 'piapi://luma/v1/video') {

  161  
  162:       segment.assetUrl = `${result.data.generation.video || ''}`
  163      } else {

packages\app\src\app\api\resolve\providers\piapi\kling\createAndFetchKlingVideo.ts:
  36      attempts++
  37:     await new Promise((resolve) => setTimeout(resolve, delayMs))
  38    }

packages\app\src\app\api\resolve\providers\piapi\lumalabs\createAndFetchDreamMachineVideo.ts:
  42      attempts++
  43:     await new Promise((resolve) => setTimeout(resolve, delayMs))
  44    }

packages\app\src\app\api\resolve\providers\piapi\midjourney\createImage.ts:
  36      attempts++
  37:     await new Promise((resolve) => setTimeout(resolve, delayMs))
  38    }

packages\app\src\app\api\resolve\providers\replicate\index.ts:
   15    clapperApiKeyToUseBuiltinCredentials,
   16: } from '@/app/api/globalSettings'
   17  

   20  ): Promise<TimelineSegment> {
   21:   let apiKey = request.settings.replicateApiKey
   22  

   25        if (
   26:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
   27        ) {

   43    if (request.segment.category == ClapSegmentCategory.IMAGE) {
   44:     const model: string = request.settings.imageGenerationWorkflow.data as any
   45  
   46      const { workflowValues } = getWorkflowInputValues(
   47:       request.settings.imageGenerationWorkflow
   48      )

   67        // always enforce this
   68:       disable_safety_checker: !request.settings.censorNotForAllAudiencesContent,
   69      }

  104        const loraModel = getWorkflowLora(
  105:         request.settings.imageGenerationWorkflow
  106        )

  123          disable_safety_checker:
  124:           !request.settings.censorNotForAllAudiencesContent,
  125        }

  138  
  139:     segment.assetUrl = `${response[0] || ''}`
  140    } else if (request.segment.category === ClapSegmentCategory.DIALOGUE) {
  141:     const model = request.settings.voiceGenerationWorkflow.data as any
  142  
  143      const { workflowValues } = getWorkflowInputValues(
  144:       request.settings.voiceGenerationWorkflow
  145      )

  151        // always enforce this
  152:       disable_safety_checker: !request.settings.censorNotForAllAudiencesContent,
  153      }

  161        })) as any
  162:       segment.assetUrl = `${response[0] || ''}`
  163      } else {

  166    } else if (request.segment.category === ClapSegmentCategory.VIDEO) {
  167:     const model = request.settings.videoGenerationWorkflow.data as any
  168  
  169      const { workflowValues } = getWorkflowInputValues(
  170:       request.settings.videoGenerationWorkflow
  171      )

  189        // always enforce this
  190:       disable_safety_checker: !request.settings.censorNotForAllAudiencesContent,
  191      }

  202        })) as any
  203:       segment.assetUrl = `${response[0] || ''}`
  204      } else if (

  217        })) as any
  218:       segment.assetUrl = `${response[0] || ''}`
  219      } else if (request.prompts.video.image) {

  225        })) as any
  226:       segment.assetUrl = `${response[0] || ''}`
  227      }

packages\app\src\app\api\resolve\providers\replicate\runFaceSwap.ts:
  12    clapperApiKeyToUseBuiltinCredentials,
  13: } from '@/app/api/globalSettings'
  14  

  17  ): Promise<TimelineSegment> {
  18:   let apiKey = request.settings.replicateApiKey
  19  

  22        if (
  23:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  24        ) {

  41      const imageFaceswapWorkflowModel =
  42:       request.settings.imageFaceswapWorkflow.data || ''
  43  

  48      }
  49:     if (!segment.assetUrl) {
  50:       throw new Error(`cannot run the face swap without an assetUrl`)
  51      }

  56      try {
  57:       // console.log(`requested model:`, request.settings.imageFaceswapWorkflow.data)
  58        const response = (await replicate.run(
  59:         request.settings.imageFaceswapWorkflow.data as any,
  60          {
  61            input: {
  62:             input_image: segment.assetUrl,
  63              swap_image: request.prompts.image.identity,
  64              disable_safety_checker:
  65:               !request.settings.censorNotForAllAudiencesContent,
  66            },

  76  
  77:       segment.assetUrl = imageResult
  78      } catch (err) {

packages\app\src\app\api\resolve\providers\replicate\runLipSync.ts:
  12    clapperApiKeyToUseBuiltinCredentials,
  13: } from '@/app/api/globalSettings'
  14  

  17  ): Promise<TimelineSegment> {
  18:   let apiKey = request.settings.replicateApiKey
  19    if (!apiKey) {

  21        if (
  22:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  23        ) {

  41    )
  42:   const firstDialogueAudio = firstDialogue?.assetUrl
  43  

  45      const videoLipsyncWorkflowModel =
  46:       request.settings.videoLipsyncWorkflow.data || ''
  47  

  52      }
  53:     if (!segment.assetUrl) {
  54        throw new Error(`cannot run the lip sync without a video`)

  61      try {
  62:       // console.log(`requested model:`, request.settings.videoLipsyncWorkflow.data)
  63        const response = (await replicate.run(
  64:         request.settings.videoLipsyncWorkflow.data as any,
  65          {

  68              // we should read the params from the workflow parameters instead
  69:             request.settings.videoLipsyncWorkflow.id ===
  70:             'replicate://douwantech/musetalk'
  71                ? {
  72:                   video_input: segment.assetUrl,
  73                    audio_input: firstDialogueAudio,

  75                    disable_safety_checker:
  76:                     !request.settings.censorNotForAllAudiencesContent,
  77                  }

  79                    // note: this is actually a VIDEO (they call it face, but it's a face video)
  80:                   face: segment.assetUrl,
  81                    input_audio: firstDialogueAudio,

  83                    disable_safety_checker:
  84:                     !request.settings.censorNotForAllAudiencesContent,
  85                  },

  95  
  96:       segment.assetUrl = imageResult
  97      } catch (err) {

packages\app\src\app\api\resolve\providers\stabilityai\generateImage.ts:
   3    clapperApiKeyToUseBuiltinCredentials,
   4: } from '@/app/api/globalSettings'
   5  import { ClapImageRatio } from '@aitube/clap'

   9  export async function generateImage(request: ResolveRequest): Promise<string> {
  10:   if (!request.settings.imageGenerationWorkflow.data) {
  11      throw new Error(

  21  
  22:   let apiKey = request.settings.stabilityAiApiKey
  23  

  26        if (
  27:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  28        ) {

  57    const body = new FormData()
  58:   body.set('prompt', `${request.prompts.image.positive || ''}`)
  59:   body.set('output_format', output_format) // "png"
  60:   body.set('negative_prompt', `${request.prompts.image.negative || ''}`)
  61:   body.set('aspect_ratio', `${aspectRatio || ''}`)
  62  
  63    const response = await fetch(
  64:     `https://api.stability.ai/v2beta/${request.settings.imageGenerationWorkflow.data}`,
  65      {

  78      const buffer = Buffer.from(arrayBuffer)
  79:     const rawAssetUrl = `data:image/${output_format};base64,${buffer.toString('base64')}`
  80:     return rawAssetUrl
  81    } else {

packages\app\src\app\api\resolve\providers\stabilityai\generateVideo.ts:
    3    clapperApiKeyToUseBuiltinCredentials,
    4: } from '@/app/api/globalSettings'
    5  import { base64DataUriToBlob } from '@/lib/utils/base64DataUriToBlob'

   29  export async function generateVideo(request: ResolveRequest): Promise<string> {
   30:   if (!request.settings.videoGenerationWorkflow.data) {
   31      throw new Error(

   39  
   40:   let apiKey = request.settings.stabilityAiApiKey
   41  

   44        if (
   45:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
   46        ) {

   71    // "Please ensure that the source image is in the correct format and dimensions"
   72:   body.set('image', await getRequestImage(request))
   73  

   91        id,
   92:       request.settings.stabilityAiApiKey
   93      )

  142      let pollingCount = 0
  143:     const intervalId = setInterval(async () => {
  144        try {

packages\app\src\app\api\resolve\providers\stabilityai\index.ts:
   8    clapperApiKeyToUseBuiltinCredentials,
   9: } from '@/app/api/globalSettings'
  10  

  13  ): Promise<TimelineSegment> {
  14:   let apiKey = request.settings.stabilityAiApiKey
  15  

  18        if (
  19:         request.settings.clapperApiKey !== clapperApiKeyToUseBuiltinCredentials
  20        ) {

  34    if (request.segment.category === ClapSegmentCategory.IMAGE) {
  35:     segment.assetUrl = await generateImage(request)
  36    } else if (request.segment.category === ClapSegmentCategory.VIDEO) {
  37:     segment.assetUrl = await generateVideo(request)
  38    } else {

packages\app\src\app\embed\EmbeddedPlayer.tsx:
   7  import { useMonitor } from '@/services'
   8: import { useTimeline } from '@aitube/timeline'
   9  

  13  
  14:   const isInteractive = useTimeline((s) => s.isInteractive)
  15:   const isLive = useTimeline((s) => s.isLive)
  16  
  17:   const [isOverlayVisible, setOverlayVisible] = useState(true)
  18  

  27      clearTimeout(overlayTimerRef.current)
  28:     overlayTimerRef.current = setTimeout(() => {
  29        if (isPlayingRef.current) {
  30:         setOverlayVisible(!isPlayingRef.current)
  31        }

  44          onMouseMove={() => {
  45:           setOverlayVisible(true)
  46            scheduleOverlayInvisibility()

  50            // height,
  51:           boxShadow: 'rgba(0, 0, 0, 1) 0px -77px 100px 15px inset',
  52          }}

packages\app\src\app\embed\page.tsx:
  11  export default function EmbedPage() {
  12:   const [isLoaded, setLoaded] = useState(false)
  13    useEffect(() => {
  14:     setLoaded(true)
  15    }, [])

packages\app\src\app\embed\README.md:
  5  
  6: Note that for users without any rendering settings,
  7  this will only be able to playback pre-generated content

packages\app\src\app\embed\useParentController.ts:
  21  
  22:   setCanUseBellhop: (canUseBellhop: boolean) => void
  23:   setHasLoadedBellhop: (hasLoadedBellhop: boolean) => void
  24    onMessage: (name: string, callback: Function, priority?: number) => void
  25    sendMessage: (type: string, data?: any) => void
  26: }>((set, get) => ({
  27    bellhop: undefined as unknown as Bellhop,

  29    hasLoadedBellhop: false,
  30:   setCanUseBellhop: (canUseBellhop: boolean) => {
  31:     set({
  32        canUseBellhop,

  34    },
  35:   setHasLoadedBellhop: (hasLoadedBellhop: boolean) => {
  36:     set({
  37        bellhop: hasLoadedBellhop

packages\app\src\app\embed\useSetupIframeOnce.ts:
  10   */
  11: export function useSetupIframeOnce(isEnabled = false) {
  12    const canUseBellhop = useParentController((s) => s.canUseBellhop)
  13:   const setCanUseBellhop = useParentController((s) => s.setCanUseBellhop)
  14    const hasLoadedBellhop = useParentController((s) => s.hasLoadedBellhop)
  15:   const setHasLoadedBellhop = useParentController((s) => s.setHasLoadedBellhop)
  16    const onMessage = useParentController((s) => s.onMessage)

  29        if (canUseBellhop) {
  30:         setCanUseBellhop(false)
  31        }

  35      if (!canUseBellhop) {
  36:       setCanUseBellhop(true)
  37      }

  46        try {
  47:         setHasLoadedBellhop(true)
  48  

  73          console.error(`failed to initialize bellhop`)
  74:         setHasLoadedBellhop(false)
  75:         setCanUseBellhop(false)
  76        }

  84      sendMessage,
  85:     setCanUseBellhop,
  86:     setHasLoadedBellhop,
  87      togglePlayback,

packages\app\src\app\fonts\index.ts:
  3  
  4: export const inter = Inter({ subsets: ['latin'] })
  5  

packages\app\src\components\assistant\ChatBubble.tsx:
   5  import { cn } from '@/lib/utils'
   6: import { useTheme } from '@/services'
   7  

  17  }: ChatEvent) {
  18:   const theme = useTheme()
  19    return (

packages\app\src\components\assistant\ChatView.tsx:
   5  
   6: import { useAssistant, useTheme } from '@/services'
   7  

  11  export function ChatView() {
  12:   const theme = useTheme()
  13  
  14:   const [draft, setDraft] = useState('')
  15    const history = useAssistant((s) => s.history)

  26  
  27:     setDraft('')
  28      processUserMessage(message)

  62              value={draft}
  63:             onChange={(e) => setDraft(e.target.value)}
  64              className="rounded-none border-t border-none"

packages\app\src\components\core\timeline\index.tsx:
   1  import { useEffect } from 'react'
   2: import { ClapTimeline, useTimeline, SegmentResolver } from '@aitube/timeline'
   3  

  16  ) {
  17:   const isReady = useTimeline((s) => s.isReady)
  18  
  19    const resolveSegment: SegmentResolver = useResolver((s) => s.resolveSegment)
  20:   const setSegmentResolver = useTimeline((s) => s.setSegmentResolver)
  21  

  25  
  26:   const setJumpAt = useTimeline((s) => s.setJumpAt)
  27:   const setIsPlaying = useTimeline((s) => s.setIsPlaying)
  28:   const setTogglePlayback = useTimeline((s) => s.setTogglePlayback)
  29  

  36      }
  37:     setSegmentResolver(resolveSegment)
  38:     setJumpAt(jumpAt)
  39:     setIsPlaying(checkIfPlaying)
  40:     setTogglePlayback(togglePlayback)
  41  

  47      isReady,
  48:     setSegmentResolver,
  49:     setJumpAt,
  50:     setIsPlaying,
  51:     setTogglePlayback,
  52      startLoop,

packages\app\src\components\core\timeline\Slider.tsx:
  37        className={cn(
  38:         `block border border-neutral-400 bg-neutral-400 shadow-lg ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 dark:border-neutral-400 dark:bg-neutral-400 dark:ring-offset-neutral-400 dark:focus-visible:ring-neutral-400`,
  39          `h-3 w-3 rounded-full`,

packages\app\src\components\core\timeline\TimelineZoom.tsx:
   2  import { BiSolidZoomIn, BiSolidZoomOut } from 'react-icons/bi'
   3: import { useTimeline } from '@aitube/timeline'
   4  

  12    // we have a CELL WIDTH :)
  13:   const cellWidth = useTimeline((s) => s.cellWidth)
  14    const horizontalZoomLevel = cellWidth
  15  
  16:   const setHorizontalZoomLevel = useTimeline((s) => s.setHorizontalZoomLevel)
  17:   const minHorizontalZoomLevel = useTimeline((s) => s.minHorizontalZoomLevel)
  18:   const maxHorizontalZoomLevel = useTimeline((s) => s.maxHorizontalZoomLevel)
  19  
  20    const onValueChange = (values: number[]) => {
  21:     setHorizontalZoomLevel(values[0])
  22    }

  25    const onValueChange = useDebounceFn((values: number[]) => {
  26:     setHorizontalZoomLevel(values[0])
  27    }, 250)

packages\app\src\components\core\tree\chainable-map.ts:
  18    }
  19:   set = (key: K, value: V): this => {
  20:     this.map.set(key, value)
  21      return this

packages\app\src\components\core\tree\index.tsx:
   7  import { Folder, File, Arrow } from './icons'
   8: import { useTreeNode } from './useTreeNode'
   9  import { Root } from './root'

  31      treeGroupProps,
  32:   } = useTreeNode(node.id, {
  33      selectionType: 'distinct',

packages\app\src\components\core\tree\roving.tsx:
   27    currentRovingTabindexValue: string | null
   28:   setFocusableId: (id: string) => void
   29    onShiftTab: () => void

   33    currentRovingTabindexValue: null,
   34:   setFocusableId: () => {},
   35    onShiftTab: () => {},

   60    const Component = as || 'div'
   61:   const [isShiftTabbing, setIsShiftTabbing] = useState(false)
   62:   const [currentRovingTabindexValue, setCurrentRovingTabindexValue] = useState<
   63      string | null

   83        value={{
   84:         setFocusableId: function (id: string) {
   85:           setCurrentRovingTabindexValue(id)
   86          },
   87          onShiftTab: function () {
   88:           setIsShiftTabbing(true)
   89          },

  111          }}
  112:         onBlur={() => setIsShiftTabbing(false)}
  113          ref={rootRef}

  204      currentRovingTabindexValue,
  205:     setFocusableId,
  206      onShiftTab,

  219          if (element) {
  220:           elements.current.set(id, element)
  221          } else {

  227          if (e.target !== e.currentTarget) return
  228:         setFocusableId(id)
  229        },

  240          if (e.target !== e.currentTarget) return
  241:         setFocusableId(id)
  242        },

packages\app\src\components\core\tree\tree-state.ts:
  14      case TreeViewActionTypes.OPEN:
  15:       return new ChainableMap(state).set(action.id, true)
  16  
  17      case TreeViewActionTypes.CLOSE:
  18:       return new ChainableMap(state).set(action.id, false)
  19  

packages\app\src\components\core\tree\useTreeNode.ts:
  27  
  28: export function useTreeNode<T extends ElementType>(
  29    id: string,

packages\app\src\components\core\waveform\useWaveform.ts:
  51  } {
  52:   const [canvas, setCanvas] = useState(document.createElement('canvas'))
  53:   const [canvasRenderingContext, setCanvasRenderingContext] = useState(
  54      canvas.getContext('2d') as CanvasRenderingContext2D

packages\app\src\components\dialogs\iframe-warning\index.tsx:
   4  import { cn } from '@/lib/utils'
   5: import { useTheme } from '@/services'
   6  import { useEffect, useState } from 'react'

   8  export function IframeWarning() {
   9:   const [showWarning, setShowWarning] = useState(false)
  10:   const theme = useTheme()
  11  
  12    useEffect(() => {
  13:     setShowWarning(window.self !== window.top)
  14      return () => {}

  39            href={APP_LINK}
  40:           className="font-regular text-[4vw] underline underline-offset-[1vw]"
  41            target="_blank"

packages\app\src\components\dialogs\loader\LoadingDialog.tsx:
   6  
   7: import { useTasks } from '../../tasks/useTasks'
   8  

  10  export function LoadingDialog({ className = '' }: { className?: string }) {
  11:   const { find, tasks } = useTasks()
  12  

packages\app\src\components\editors\Editors.tsx:
   7  import { ScriptEditor } from './ScriptEditor'
   8: import { useTheme } from '@/services/ui/useTheme'
   9  import { EntityEditor } from './EntityEditor'

  14  export function Editors() {
  15:   const theme = useTheme()
  16    const view = useEditors((s) => s.view)

packages\app\src\components\editors\EntityEditor\EntityTree\index.tsx:
   3  import { useEffect } from 'react'
   4: import { useTimeline } from '@aitube/timeline'
   5  

  22    const selectedTreeNodeId = useEntityTree((s) => s.selectedTreeNodeId)
  23:   const setProjectEntities = useEntityTree((s) => s.setProjectEntities)
  24  
  25:   const entitiesChanged: number = useTimeline((s) => s.entitiesChanged)
  26:   const entities: ClapEntity[] = useTimeline((s) => s.entities)
  27  

  29    useEffect(() => {
  30:     setProjectEntities(entities)
  31      // eslint-disable-next-line react-hooks/exhaustive-deps
  32:   }, [entitiesChanged, setProjectEntities, entities.map((e) => e.id).join(',')])
  33  
  34:   const setCurrent = useEntityEditor((s) => s.setCurrent)
  35    const selectedNodeItem = useEntityTree((s) => s.selectedNodeItem)

  39      if (!selectedNodeType || !selectedNodeItem) {
  40:       setCurrent(undefined)
  41        return

  46  
  47:       setCurrent(entity)
  48      } else {

  50      }
  51:   }, [selectedNodeType, selectedNodeItem, setCurrent])
  52  

packages\app\src\components\editors\EntityEditor\EntityTree\useEntityTree.ts:
   24  
   25:   // entities stored on the public database (Hugging Face datasets, tagged)
   26    communityLibraryTreeNodeId: string

   36     */
   37:   setProjectEntities: (entities: ClapEntity[]) => Promise<void>
   38  

   44     */
   45:   // setCommunityLibrary: (collections: CommunityEntityCollection[]) => void
   46  

   55    selectedTreeNodeId: string | null
   56: }>((set, get) => ({
   57    // project entities stored in the .clap

   62  
   63:   // entities stored on the public database (Hugging Face datasets, tagged)
   64    communityLibraryTreeNodeId: '',

  103  
  104:     set({
  105        projectLibraryTreeNodeId: projectLibrary.id,

  112  
  113:   setProjectEntities: async (entities: ClapEntity[]) => {
  114      const { libraryTreeRoot } = get()

  168  
  169:     set({
  170        libraryTreeRoot: libraryTreeRoot.map((root) => {

  184    /*
  185:   setCommunityCollections: (collections: CommunityEntityCollection[]) => {
  186      // TODO: implement this

  201  
  202:       // set({ selectedTreeNode })
  203:       set({ selectedTreeNodeId: selectedTreeNode?.id || null })
  204:       set({ selectedNodeItem: entity })
  205      } else {
  206:       // set({ selectedTreeNode: undefined })
  207:       set({ selectedTreeNodeId: null })
  208:       set({ selectedNodeItem: undefined })
  209      }

  219    ) => {
  220:     set({ selectedTreeNodeId: treeNodeId ? treeNodeId : undefined })
  221:     set({ selectedNodeType: nodeType ? nodeType : undefined })
  222:     set({ selectedNodeItem: nodeItem ? nodeItem : undefined })
  223    },

packages\app\src\components\editors\EntityEditor\EntityViewer\EntityList.tsx:
   1  import { ClapEntity, ClapSegmentCategory, newEntity } from '@aitube/clap'
   2: import { useTimeline } from '@aitube/timeline'
   3  

  11  }) {
  12:   const entities = useTimeline((s) => s.entities)
  13:   const setCurrent = useEntityEditor((s) => s.setCurrent)
  14    const addEntity = useEntityEditor((s) => s.addEntity)

  44                onClick={() => {
  45:                 setCurrent(entity)
  46                  onSelectEntity(entity.id)

packages\app\src\components\editors\EntityEditor\EntityViewer\index.tsx:
   2  import { ClapEntity, ClapSegmentCategory } from '@aitube/clap'
   3: import { useTimeline } from '@aitube/timeline'
   4  

  20  } = {}) {
  21:   const entities = useTimeline((s) => s.entities)
  22:   const updateEntities = useTimeline((s) => s.updateEntities)
  23  

  27    const current = useEntityEditor((s) => s.current)
  28:   const setCurrent = useEntityEditor((s) => s.setCurrent)
  29  
  30    const draft = useEntityEditor((s) => s.draft)
  31:   const setDraft = useEntityEditor((s) => s.setDraft)
  32  
  33    const showEntityList = useEntityEditor((s) => s.showEntityList)
  34:   const setShowEntityList = useEntityEditor((s) => s.setShowEntityList)
  35  
  36    useEffect(() => {
  37:     setCurrent(entities.at(0))
  38:   }, [entities, setCurrent])
  39  
  40    useEffect(() => {
  41:     setDraft(current)
  42:   }, [current, setDraft])
  43  

  58  
  59:     setDraft({ ...draft, [field]: updatedValue })
  60    }

  77      })
  78:     setDraft({ ...draft, [field]: dataUrl })
  79    }

  92    const handleBack = () => {
  93:     setShowEntityList(true)
  94    }

  96    const handleSelectEntity = (entityId: string) => {
  97:     setShowEntityList(false)
  98    }

packages\app\src\components\editors\FilterEditor\FilterTree\index.tsx:
  29    const selectedTreeNodeId = useFilterTree((s) => s.selectedTreeNodeId)
  30:   const setAvailableFilters = useFilterTree((s) => s.setAvailableFilters)
  31  

  34    const current = useFilterEditor((s) => s.current)
  35:   const setCurrent = useFilterEditor((s) => s.setCurrent)
  36  

  38    useEffect(() => {
  39:     setAvailableFilters(availableFilters)
  40      // eslint-disable-next-line react-hooks/exhaustive-deps
  41:   }, [setAvailableFilters, availableFilters.map((f) => f.id).join(',')])
  42  

  51      if (!selectedNodeType || !selectedNodeItem) {
  52:       setCurrent(undefined)
  53        return

  71  
  72:       setCurrent(pipeline)
  73      } else if (isFilterWithParams(selectedNodeType, selectedNodeItem)) {

  78  
  79:       setCurrent(pipeline)
  80      } else {

  83      }
  84:   }, [selectedNodeType, selectedNodeItem, availableFilters, setCurrent])
  85  

packages\app\src\components\editors\FilterEditor\FilterTree\useFilterTree.ts:
   31     */
   32:   setAvailableFilters: (filters: Filter[]) => void
   33  

   42    selectedTreeNodeId: string | null
   43: }>((set, get) => ({
   44    availableFiltersLibraryTreeNodeId: '',

   69  
   70:     set({
   71        availableFiltersLibraryTreeNodeId: availableFilterLibrary.id,

   77  
   78:   setAvailableFilters: (filters: Filter[]) => {
   79      const availableFilterLibrary: LibraryTreeNode = {

   97  
   98:     set({
   99        availableFiltersLibraryTreeNodeId: availableFilterLibrary.id,

  106    /*
  107:   setCommunityCollections: (collections: CommunityEntityCollection[]) => {
  108      // TODO: implement this

  123  
  124:       // set({ selectedTreeNode })
  125:       set({ selectedTreeNodeId: selectedTreeNode?.id || null })
  126:       set({ selectedNodeItem: filter })
  127      } else {
  128:       // set({ selectedTreeNode: undefined })
  129:       set({ selectedTreeNodeId: null })
  130:       set({ selectedNodeItem: undefined })
  131      }

  141    ) => {
  142:     set({ selectedTreeNodeId: treeNodeId ? treeNodeId : undefined })
  143:     set({ selectedNodeType: nodeType ? nodeType : undefined })
  144:     set({ selectedNodeItem: nodeItem ? nodeItem : undefined })
  145    },

packages\app\src\components\editors\FilterEditor\FilterViewer\index.tsx:
   20    // can't return something if there is nothing
   21:   if (!activeStoryboardSegment?.assetUrl.startsWith('data:image/')) {
   22      return undefined

   24  
   25:   return activeStoryboardSegment.assetUrl
   26  }

   30    const runFilterPipeline = useFilterEditor((s) => s.runFilterPipeline)
   31:   const [result, setResult] = useState('')
   32  

   46          const res = await runFilterPipeline(input)
   47:         setResult(res)
   48        } catch (err) {

   66    const current = useFilterEditor((s) => s.current)
   67:   const setCurrent = useFilterEditor((s) => s.setCurrent)
   68    const undo = useFilterEditor((s) => s.undo)

   75  
   76:   const setFilterParamValue = (
   77      filterId: string,

   80    ) => {
   81:     console.log(`setFilterParamValue(${filterId}, ${fieldId}, ${value})`)
   82:     setCurrent(
   83        (current || []).map((fwp) => {

  139                      onSelect={(value) => {
  140:                       setFilterParamValue(filter.id, field.id, value || '')
  141                      }}

  163                        )
  164:                       setFilterParamValue(filter.id, field.id, value || '')
  165                      }}

  172                      onCheckedChange={(checked) => {
  173:                       setFilterParamValue(filter.id, field.id, checked || false)
  174                      }}

packages\app\src\components\editors\ProjectEditor\index.tsx:
    5  import { ClapProject } from '@aitube/clap'
    6: import { useTimeline } from '@aitube/timeline'
    7  
    8  export function ProjectEditor() {
    9:   const clap: ClapProject | undefined = useTimeline((s) => s.clap)
   10  

   15    const current = useProjectEditor((s) => s.current)
   16:   const setCurrent = useProjectEditor((s) => s.setCurrent)
   17    const undo = useProjectEditor((s) => s.undo)

   20    useEffect(() => {
   21:     setCurrent(clap?.meta)
   22:   }, [clap?.meta, setCurrent])
   23    */
   24  
   25:   const title = useTimeline((s) => s.title)
   26:   const description = useTimeline((s) => s.description)
   27:   const synopsis = useTimeline((s) => s.synopsis)
   28:   const width = useTimeline((s) => s.width)
   29:   const height = useTimeline((s) => s.height)
   30:   const bpm = useTimeline((s) => s.bpm)
   31:   const frameRate = useTimeline((s) => s.frameRate)
   32:   const imagePrompt = useTimeline((s) => s.imagePrompt)
   33:   const systemPrompt = useTimeline((s) => s.systemPrompt)
   34:   const licence = useTimeline((s) => s.licence)
   35:   const isInteractive = useTimeline((s) => s.isInteractive)
   36:   const isLoop = useTimeline((s) => s.isLoop)
   37  

   40      return (
   41:       <FormSection label={'Project Settings'} className="p-4">
   42          Loading project..

   53    return (
   54:     <FormSection label={'Project Settings'} className="p-4">
   55        <FormInput<string>

   59          // onChange={(title) => {
   60:         //   setCurrent({ ...current, title })
   61          // }}

   63          onChange={(title) => {
   64:           useTimeline.setState({ title })
   65          }}

   71          // onChange={(description) => {
   72:         //   setCurrent({ ...current, description })
   73          // }}

   75          onChange={(description) => {
   76:           useTimeline.setState({ description })
   77          }}

   83          // onChange={(synopsis) => {
   84:         //   setCurrent({ ...current, synopsis })
   85          // }}

   87          onChange={(synopsis) => {
   88:           useTimeline.setState({ synopsis })
   89          }}

   99          onChange={(width) => {
  100:           useTimeline.setState({ width })
  101          }}

  111          onChange={(height) => {
  112:           useTimeline.setState({ height })
  113          }}

  121          onChange={(bpm) => {
  122:           useTimeline.setState({ bpm })
  123          }}

  131          onChange={(frameRate) => {
  132:           useTimeline.setState({ frameRate })
  133          }}

  138          // onChange={(imagePrompt) => {
  139:         //   setCurrent({ ...current, imagePrompt })
  140          // }}

  143          onChange={(imagePrompt) => {
  144:           useTimeline.setState({ imagePrompt })
  145          }}

  150          // onChange={(systemPrompt) => {
  151:         //   setCurrent({ ...current, systemPrompt })
  152          // }}

  154          onChange={(systemPrompt) => {
  155:           useTimeline.setState({ systemPrompt })
  156          }}

  161          // onChange={(licence) => {
  162:         //   setCurrent({ ...current, licence })
  163          // }}

  165          onChange={(licence) => {
  166:           useTimeline.setState({ licence })
  167          }}

  176          // onCheckedChange={(isInteractive) => {
  177:         //   setCurrent({ ...current, isInteractive: !isInteractive })
  178          // }}

  180          onCheckedChange={(isInteractive) => {
  181:           useTimeline.setState({ isInteractive: !isInteractive })
  182          }}

  187          // onCheckedChange={(isLoop) => {
  188:         //   setCurrent({ ...current, isLoop: !isLoop })
  189          // }}

  192          onCheckedChange={(isLoop) => {
  193:           useTimeline.setState({ isLoop: !isLoop })
  194          }}

packages\app\src\components\editors\ProjectEditor\useSyncProjectEditor.ts:
   1: import { useTimeline } from '@aitube/timeline'
   2  import { useEffect } from 'react'

   4  export function useSyncProjectEditor() {
   5:   const title = useTimeline((s) => s.title)
   6:   const description = useTimeline((s) => s.description)
   7:   const synopsis = useTimeline((s) => s.synopsis)
   8:   const width = useTimeline((s) => s.width)
   9:   const height = useTimeline((s) => s.height)
  10:   const bpm = useTimeline((s) => s.bpm)
  11:   const frameRate = useTimeline((s) => s.frameRate)
  12:   const imagePrompt = useTimeline((s) => s.imagePrompt)
  13:   const systemPrompt = useTimeline((s) => s.systemPrompt)
  14:   const licence = useTimeline((s) => s.licence)
  15:   const isInteractive = useTimeline((s) => s.isInteractive)
  16:   const isLoop = useTimeline((s) => s.isLoop)
  17  

packages\app\src\components\editors\ScriptEditor\index.tsx:
    6    TimelineStore,
    7:   useTimeline,
    8  } from '@aitube/timeline'

   17    const standaloneCodeEditor = useScriptEditor((s) => s.standaloneCodeEditor)
   18:   const setStandaloneCodeEditor = useScriptEditor(
   19:     (s) => s.setStandaloneCodeEditor
   20    )
   21    const current = useScriptEditor((s) => s.current)
   22:   const setCurrent = useScriptEditor((s) => s.setCurrent)
   23    const publish = useScriptEditor((s) => s.publish)

   28  
   29:   const scrollX = useTimeline((s) => s.scrollX)
   30:   const contentWidth = useTimeline((s) => s.contentWidth)
   31    const horizontalTimelineRatio = Math.round(

   46      if (horizontalTimelineRatio !== standaloneCodeEditor.getScrollTop()) {
   47:       standaloneCodeEditor.setScrollPosition({
   48          scrollTop: horizontalTimelineRatio,

   52      // move the scroll:
   53:     // editor.setScrollPosition({ scrollTop: horizontalTimelineRatio })
   54  

   61      // Move current active line:
   62:     // editor.setPosition({column: 1, lineNumber: 3});
   63  

   73  
   74:     codeEditor.setModel(textModel)
   75  
   76:     setStandaloneCodeEditor(codeEditor)
   77  

  109  
  110:   const setMonaco = useScriptEditor((s) => s.setMonaco)
  111:   const setTextModel = useScriptEditor((s) => s.setTextModel)
  112:   const setMouseIsInside = useScriptEditor((s) => s.setMouseIsInside)
  113    const themeName = useUI((s) => s.themeName)

  116    const beforeMount = (monaco: Monaco) => {
  117:     setMonaco(monaco)
  118  

  147      // Apply the custom theme immediately after defining it
  148:     monaco.editor.setTheme(themes.backstage.id)
  149  

  153      )
  154:     setTextModel(textModel)
  155    }

  159        className="h-full w-full"
  160:       onMouseEnter={() => setMouseIsInside(true)}
  161:       onMouseLeave={() => setMouseIsInside(false)}
  162        onBlur={publish}

  168          onMount={onMount}
  169:         onChange={setCurrent}
  170          options={{

packages\app\src\components\editors\ScriptEditor\README.md:
   4  // move the scroll:
   5: editor.setScrollPosition({ scrollTop: horizontalTimelineRatio })
   6  

  13  // Move current active line:
  14: editor.setPosition({ column: 1, lineNumber: 3 })
  15  ```

packages\app\src\components\editors\SegmentEditor\index.tsx:
   1  import { useEffect } from 'react'
   2: import { TimelineSegment, useTimeline } from '@aitube/timeline'
   3  

   9  export function SegmentEditor() {
  10:   const segmentsChanged: number = useTimeline((s) => s.segmentsChanged)
  11:   const selectedSegments: TimelineSegment[] = useTimeline(
  12      (s) => s.selectedSegments

  14    const current = useSegmentEditor((s) => s.current)
  15:   const setCurrent = useSegmentEditor((s) => s.setCurrent)
  16    const undo = useSegmentEditor((s) => s.undo)

  19    useEffect(() => {
  20:     setCurrent(selectedSegments.at(-1))
  21      // eslint-disable-next-line
  22:   }, [setCurrent, selectedSegments.map((s) => s.id).join(',')])
  23  

  43            onChange={(newValue: string) => {
  44:             setCurrent({
  45                ...current,

packages\app\src\components\editors\WorkflowEditor\WorkflowTree\useWorkflowTree.ts:
   28     */
   29:   //setBuiltInCollections: (collections: WorkflowCollection[]) => void
   30  

   36     */
   37:   //setCommunityCollections: (collections: WorkflowCollection[]) => void
   38  

   47    selectedTreeNodeId: string | null
   48: }>((set, get) => ({
   49    builtinLibraryTreeNodeId: '',

   87  
   88:     // TODO: inject the workflow (don't foget to set the `data: field` as well)
   89  

   91  
   92:     set({
   93        builtinLibraryTreeNodeId: builtinLibrary.id,

  109    ) => {
  110:     set({ selectedTreeNodeId: treeNodeId ? treeNodeId : undefined })
  111:     set({ selectedNodeType: nodeType ? nodeType : undefined })
  112:     set({ selectedNodeItem: nodeItem ? nodeItem : undefined })
  113    },

packages\app\src\components\editors\WorkflowEditor\WorkflowViewer\ReactFlowCanvas\index.tsx:
  21  import { glifToReactWorkflow } from './formats/glif/glifToReactWorkflow'
  22: import { useTheme } from '@/services'
  23  

  28  export function ReactFlowCanvas() {
  29:   const theme = useTheme()
  30    const current = useWorkflowEditor((s) => s.current)
  31:   const [nodes, setNodes, onNodesChange] = useNodesState<ReactWorkflowNode>([])
  32:   const [edges, setEdges, onEdgesChange] = useEdgesState<ReactWorkflowEdge>([])
  33  

  35      const { nodes, edges } = glifToReactWorkflow(glifs[0])
  36:     setNodes(nodes)
  37:     setEdges(edges)
  38:   }, [setEdges, setNodes])
  39  
  40    const onConnect: OnConnect = useCallback(
  41:     (params) => setEdges((eds) => addEdge(params, eds)),
  42:     [setEdges]
  43    )

packages\app\src\components\editors\WorkflowEditor\WorkflowViewer\ReactFlowCanvas\NodeView.tsx:
  3  
  4: import { useTheme } from '@/services'
  5  import { cn } from '@/lib/utils'

  8  function NodeComponent({ data }: ReactWorkflowNode) {
  9:   const theme = useTheme()
  10    return (

packages\app\src\components\editors\WorkflowEditor\WorkflowViewer\ReactFlowCanvas\formats\comfyui\types.ts:
  4        scale: number
  5:       offset: { '0': number; '1': number }
  6      }

packages\app\src\components\editors\WorkflowEditor\WorkflowViewer\ReactFlowCanvas\samples\comfyicu.ts:
  8          scale: 0.8264462809917354,
  9:         offset: {
  10            '0': 173.4048767089844,

packages\app\src\components\editors\WorkflowEditor\WorkflowViewer\ReactFlowCanvas\samples\glif.ts:
  108          {
  109:           name: 'set-format',
  110            type: 'GPTBlock',

  121          {
  122:           name: 'set-creativity',
  123            type: 'GPTBlock',

  151          {
  152:           name: 'settings',
  153            type: 'JSONBlock',

  176              },
  177:             value: '{"output": {set-format}, "creativity": {set-creativity}}',
  178            },

  185              value:
  186: ⟪ 1286 characters skipped ⟫  "title": "Context Options◆Looped Uniform 🎭🅐🅓"\n    }\n  },\n  "6": {\n    "inputs": {\n      "frame_rate": 14,\n      "loop_count": 0,\n      "filename_prefix": "AnimateDiff",\n      "format": "{settings.format}",\n      "pingpong": false,\n      "save_output": true,\n      "pix_fmt": "yuv420p",\n      "crf": {settings.crf},\n      "save_metadata": true,\n      "images": [\n        "32",\n        0\n      ]\n    },\n    "class_type": "VHS_VideoCombine",\n    "_meta": {\n      "title": "Video Combine 🎥🅥🅗🅢"\n    }\n  },\n  "7": {\n    "inputs": {\n      "upscale_type": "latent",\n      "hires_ckpt_name": "(use same)",\n      "latent_upscaler": "ttl_nn.SD 1.x",\n      "pixel_upscaler": "4x-AnimeSharp.pth",\n      "upscale_by": 2,\n      "use_same_seed": true,\n      "seed": 0,\n      "hires_steps": 8,\n      "denoise": 0.6,\n      "iterations": 1,\n      "use_controlnet": false,\n      "control_net_name": "OpenPoseXL2.safetensors",\n      "strength": 1,\n      "preprocessor": "none",\n      "preprocessor_imgs": false\n    },\n    "class_type": "HighRes-Fix Script",\n    "_meta": {\n      "title": "HighRes-Fix Script"\n    }\n  },\n  "8": {\n    "inputs": {\n      "model_name": "AnimateLCM_sd15_t2v.ckpt",\n      "beta_schedule": "lcm \u003E\u003E sqrt_linear",\n      "motion_scale": 1.2,\n  ⟪ 879 characters skipped ⟫HS_DuplicateLatents",\n    "_meta": {\n      "title": "Duplicate Latent Batch 🎥🅥🅗🅢"\n    }\n  },\n  "28": {\n    "inputs": {\n      "add_noise": "enable",\n      "noise_seed": 0,\n      "steps": {settings.max},\n      "cfg": {cfg},\n      "sampler_name": "lcm",\n      "scheduler": "sgm_uniform",\n      "start_at_step": {settings.min},\n      "end_at_step": 10000,\n      "return_with_leftover_noise": "disable",\n      "preview_method": "auto",\n      "vae_decode": "true",\n      "model": [\n        "8",\n        0\n      ],\n      "positive": [\n        "1",\n        1\n      ],\n      "negative": [\n        "1",\n        2\n      ],\n      "latent_image": [\n        "13",\n        0\n      ],\n      "optional_vae": [\n        "1",\n        4\n      ],\n      "script": [\n        "7",\n        0\n      ]\n    },\n    "class_type": "KSampler Adv. (Efficient)",\n    "_meta": {\n      "title": "KSampler Adv. (Efficient)"\n    }\n  },\n  "32": {\n    "inputs": {\n      "upscale_method": "lanczos",\n      "scale_by": {settings.size},\n      "image": [\n        "28",\n        5\n      ]\n    },\n    "class_type": "ImageScaleBy",\n    "_meta": {\n      "title": "Upscale Image By"\n    }\n  },\n  "40": {\n    "inputs": {\n      "upscale_method": "nearest-exact",\n      "megapixels": 0.26,\n      "image": [\n        "9",\n        0\n      ]\n    },\n    "class_type": "ImageScaleToTotalPixels",\n    "_meta": {\n      "title": "ImageScaleToTotalPixels"\n    }\n  }\n}',
  187              fixSeed: false,

packages\app\src\components\forms\FormArea.tsx:
  13  import { FormField } from './FormField'
  14: import { useTheme } from '@/services'
  15  import { Textarea } from '../ui/textarea'

  51  ) {
  52:   const theme = useTheme()
  53  

packages\app\src\components\forms\FormComfyUIWorkflowSettings.tsx:
  14  
  15: export function FormComfyUIWorkflowSettings({
  16    label,

  27  }) {
  28:   const [clapWorkflowDataDraft, setClapWorkflowDataDraft] = useState(
  29      clapWorkflow.data || defaultClapWorkflow.data

  31  
  32:   const [errors, setErrors] = useState<{ workflow: string | null }>({
  33      workflow: null,

  44    const handleOnChangeJson = (json: string) => {
  45:     setClapWorkflowDataDraft(json || '')
  46      if (ComfyUIWorkflowApiGraph.isValidWorkflow(json)) {
  47:       setErrors({ ...errors, workflow: null })
  48        debouncedOnChangeClapWorkflow(

  53      } else {
  54:       setErrors({ ...errors, workflow: 'Please, provide a valid workflow.' })
  55      }

  61      // Apply same change to the graph
  62:     // TODO: add a setter to clapWorkflow to update its data when updating inputFields
  63:     workflowGraph.setInputValue(inputId, inputValue, { ignoreErrors: true })
  64      // Update the generate 'data' based on new input values
  65      clapWorkflow.data = workflowGraph.toString()
  66:     setClapWorkflowDataDraft(clapWorkflow.data || '')
  67      if (ComfyUIWorkflowApiGraph.isValidWorkflow(clapWorkflow.data)) {
  68:       setErrors({ ...errors, workflow: null })
  69        // If changes on JSON, convert it to ClapWorkflow

  71      } else {
  72:       setErrors({ ...errors, workflow: 'Please, provide a valid workflow.' })
  73      }

packages\app\src\components\forms\FormInput.tsx:
  13  import { FormField } from './FormField'
  14: import { useTheme } from '@/services'
  15  

  44  ) {
  45:   const theme = useTheme()
  46    const isNumberInput =

packages\app\src\components\forms\FormSelect.tsx:
  10  } from '../ui/select'
  11: import { useTheme } from '@/services'
  12  

  38  }) {
  39:   const theme = useTheme()
  40    return (

packages\app\src\components\forms\FormSlider.tsx:
  13  import { FormField } from './FormField'
  14: import { useTheme } from '@/services'
  15  import { Slider } from '../ui/slider'

  43  ) {
  44:   const theme = useTheme()
  45    const isNumberInput =

packages\app\src\components\icons\index.tsx:
  12  import { IoIosColorFilter, IoMdCloudOutline } from 'react-icons/io'
  13: import { MdOutlineVideoSettings } from 'react-icons/md'
  14  import { MdOutlineCorporateFare } from 'react-icons/md'

  68    upscale: MdOutlineHighQuality,
  69:   textToVideo: MdOutlineVideoSettings,
  70    videoToVideo: IoIosColorFilter,

packages\app\src\components\monitor\index.tsx:
   8  import { useUI } from '@/services/ui'
   9: import { useTheme } from '@/services/ui/useTheme'
  10  import { UIWindowLayout } from '@aitube/clapper-services'

  13  export function Monitor() {
  14:   const [isFullscreen, setFullscreen, ref] = useFullscreenStatus()
  15:   const theme = useTheme()
  16    const windowLayout = useUI((s) => s.windowLayout)

  40              <div
  41:               onClick={() => setFullscreen()}
  42                className={cn(

packages\app\src\components\monitor\README.md:
  5  
  6: Then we have the "dynamic" mode, where we recompose a video from separate assets.
  7  This mode can be rendered using <DynamicPlayer />

packages\app\src\components\monitor\DynamicPlayer\DynamicBuffer.tsx:
  18  }): JSX.Element | null => {
  19:   const src = `${segment?.assetUrl || ''}`
  20  

packages\app\src\components\monitor\PlayerControls\index.tsx:
  12  } from 'react-icons/tb'
  13: import { useTimeline } from '@aitube/timeline'
  14  

  19  import { useMonitor } from '@/services/monitor/useMonitor'
  20: import { useTheme } from '@/services/ui/useTheme'
  21  
  22  export function PlayerControls({ className }: { className?: string }) {
  23:   const theme = useTheme()
  24    const isPlaying = useMonitor((s) => s.isPlaying)

  27  
  28:   const cursorTimestampAtInMs = useTimeline((s) => s.cursorTimestampAtInMs)
  29:   const durationInMs = useTimeline((s) => s.durationInMs)
  30  

packages\app\src\components\monitor\StaticPlayer\index.tsx:
   4  
   5: import { useTimeline } from '@aitube/timeline'
   6  import { useRequestAnimationFrame } from '@/lib/hooks/useRequestAnimationFrame'

  32  ) {
  33:   const setStaticVideoRef = useMonitor((s) => s.setStaticVideoRef)
  34  
  35:   const setCursorTimestampAtInMs = useTimeline(
  36:     (s) => s.setCursorTimestampAtInMs
  37    )

  45      // important: we only update this if we have an actual PLAYING video
  46:     setCursorTimestampAtInMs(ref.current.currentTime * 1000)
  47    })

  52      }
  53:     setStaticVideoRef(ref.current)
  54:   }, [setStaticVideoRef])
  55  

packages\app\src\components\monitor\UniversalPlayer\index.tsx:
   1  import { ClapSegment } from '@aitube/clap'
   2: import { useTimeline } from '@aitube/timeline'
   3  

   8  export function UniversalPlayer() {
   9:   const finalVideo: ClapSegment | undefined = useTimeline((s) => s.finalVideo)
  10  
  11:   const assetUrl: string = finalVideo?.assetUrl || ''
  12  

  18    /*
  19:   if (assetUrl) {
  20      return (

  26          <StaticPlayer
  27:           video={assetUrl}
  28            isBusy={false}

packages\app\src\components\settings\assistant.tsx:
  2  
  3: export function SettingsSectionAssistant() {
  4    return (

  7          <p className="text-neutral-200">
  8:           No settings for the AI assistant yet.
  9          </p>

packages\app\src\components\settings\editors.tsx:
   1  import { FormSection } from '@/components/forms/FormSection'
   2: import { useSettings } from '@/services/settings'
   3  

   5  
   6: export function SettingsSectionEditors() {
   7:   const scriptEditorShowLineNumbers = useSettings(
   8      (s) => s.scriptEditorShowLineNumbers
   9    )
  10:   const setScriptEditorShowLineNumbers = useSettings(
  11:     (s) => s.setScriptEditorShowLineNumbers
  12    )
  13  
  14:   const scriptEditorShowMinimap = useSettings((s) => s.scriptEditorShowMinimap)
  15:   const setScriptEditorShowMinimap = useSettings(
  16:     (s) => s.setScriptEditorShowMinimap
  17    )

  28            checked={!scriptEditorShowLineNumbers}
  29:           onCheckedChange={setScriptEditorShowLineNumbers}
  30          />

  34            checked={!scriptEditorShowMinimap}
  35:           onCheckedChange={setScriptEditorShowMinimap}
  36          />

packages\app\src\components\settings\image.tsx:
   1  import { FormInput, FormSection, FormSwitch } from '@/components/forms'
   2: import { getDefaultSettingsState, useSettings } from '@/services/settings'
   3: import { FormComfyUIWorkflowSettings } from '../forms/FormComfyUIWorkflowSettings'
   4  import { ClapWorkflow } from '@aitube/clap'
   5  
   6: export function SettingsSectionImage() {
   7:   const defaultSettings = getDefaultSettingsState()
   8:   const comfyClapWorkflow = useSettings((s) => s.comfyClapWorkflowForImage)
   9:   const setComfyClapWorkflow = useSettings(
  10:     (s) => s.setComfyClapWorkflowForImage
  11    )
  12  
  13:   const imagePromptPrefix = useSettings((s) => s.imagePromptPrefix)
  14:   const setImagePromptPrefix = useSettings((s) => s.setImagePromptPrefix)
  15  
  16:   const imagePromptSuffix = useSettings((s) => s.imagePromptSuffix)
  17:   const setImagePromptSuffix = useSettings((s) => s.setImagePromptSuffix)
  18  
  19:   const imageNegativePrompt = useSettings((s) => s.imageNegativePrompt)
  20:   const setImageNegativePrompt = useSettings((s) => s.setImageNegativePrompt)
  21  
  22:   const maxImagesToGenerateInParallel = useSettings(
  23      (s) => s.maxImagesToGenerateInParallel
  24    )
  25:   const setMaxImagesToGenerateInParallel = useSettings(
  26:     (s) => s.setMaxImagesToGenerateInParallel
  27    )
  28  
  29:   const censorNotForAllAudiencesContent = useSettings(
  30      (s) => s.censorNotForAllAudiencesContent
  31    )
  32:   const setCensorNotForAllAudiencesContent = useSettings(
  33:     (s) => s.setCensorNotForAllAudiencesContent
  34    )
  35    const onChangeComfyUiWorkflow = (clapWorkflowUpdated: ClapWorkflow) => {
  36:     setComfyClapWorkflow(clapWorkflowUpdated)
  37    }

  44            checked={!censorNotForAllAudiencesContent}
  45:           onCheckedChange={setCensorNotForAllAudiencesContent}
  46          />

  54            value={maxImagesToGenerateInParallel}
  55:           defaultValue={defaultSettings.maxImagesToGenerateInParallel}
  56:           onChange={setMaxImagesToGenerateInParallel}
  57          />

  61            value={imagePromptPrefix}
  62:           defaultValue={defaultSettings.imagePromptPrefix}
  63:           onChange={setImagePromptPrefix}
  64          />

  68            value={imagePromptSuffix}
  69:           defaultValue={defaultSettings.imagePromptSuffix}
  70:           onChange={setImagePromptSuffix}
  71          />

  75            value={imageNegativePrompt}
  76:           defaultValue={defaultSettings.imageNegativePrompt}
  77:           onChange={setImageNegativePrompt}
  78          />
  79  
  80:         <FormComfyUIWorkflowSettings
  81            label="Custom ComfyUI workflow for images"

  83            clapWorkflow={comfyClapWorkflow}
  84:           defaultClapWorkflow={defaultSettings.comfyClapWorkflowForImage}
  85            onChange={onChangeComfyUiWorkflow}

packages\app\src\components\settings\index.tsx:
   6  
   7: import { SettingsSectionProvider } from './provider'
   8: import { SettingsSectionAssistant } from './assistant'
   9: import { SettingsSectionEditors } from './editors'
  10: import { SettingsSectionImage } from './image'
  11: import { SettingsSectionVideo } from './video'
  12: import { SettingsSectionSound } from './sound'
  13: import { SettingsSectionMusic } from './music'
  14: import { SettingsSectionVoice } from './voice'
  15: import { SettingsCategory } from '@aitube/clapper-services'
  16  
  17: const panels: Record<SettingsCategory, JSX.Element> = {
  18:   [SettingsCategory.NONE]: <></>,
  19:   [SettingsCategory.PROVIDER]: <SettingsSectionProvider />,
  20:   [SettingsCategory.ASSISTANT]: <SettingsSectionAssistant />,
  21:   [SettingsCategory.EDITORS]: <SettingsSectionEditors />,
  22:   [SettingsCategory.IMAGE]: <SettingsSectionImage />,
  23:   [SettingsCategory.VIDEO]: <SettingsSectionVideo />,
  24:   [SettingsCategory.VOICE]: <SettingsSectionVoice />,
  25:   [SettingsCategory.SOUND]: <SettingsSectionSound />,
  26:   [SettingsCategory.MUSIC]: <SettingsSectionMusic />,
  27  }

  29  const panelLabels = {
  30:   [SettingsCategory.NONE]: '',
  31:   [SettingsCategory.PROVIDER]: 'Providers',
  32:   [SettingsCategory.ASSISTANT]: 'Assistant',
  33:   [SettingsCategory.EDITORS]: 'Editors',
  34:   [SettingsCategory.IMAGE]: 'Image',
  35:   [SettingsCategory.VIDEO]: 'Video',
  36:   [SettingsCategory.VOICE]: 'Voice',
  37:   [SettingsCategory.SOUND]: 'Sound',
  38:   [SettingsCategory.MUSIC]: 'Music',
  39  } as any
  40  
  41: export function SettingsDialog() {
  42:   const showSettings = useUI((s) => s.showSettings)
  43:   const setShowSettings = useUI((s) => s.setShowSettings)
  44  

  46      <Dialog
  47:       open={showSettings !== SettingsCategory.NONE}
  48        onOpenChange={(open) =>
  49:         setShowSettings(
  50:           open ? SettingsCategory.PROVIDER : SettingsCategory.NONE
  51          )

  70                    className="flex w-full flex-col items-end border-0 bg-transparent text-right text-base font-thin capitalize text-neutral-300 xl:text-lg"
  71:                   onClick={() => setShowSettings(key as SettingsCategory)}
  72                  >

  80            <ScrollArea className="flex h-full flex-row">
  81:             {panels[showSettings]}
  82            </ScrollArea>

  87                onClick={() => {
  88:                 setShowSettings(SettingsCategory.NONE)
  89                }}

packages\app\src\components\settings\music.tsx:
   1  import { FormArea, FormSection } from '@/components/forms'
   2: import { getDefaultSettingsState, useSettings } from '@/services/settings'
   3  
   4: export function SettingsSectionMusic() {
   5:   const defaultSettings = getDefaultSettingsState()
   6  
   7:   const comfyWorkflowForMusic = useSettings((s) => s.comfyWorkflowForMusic)
   8:   const setComfyWorkflowForMusic = useSettings(
   9:     (s) => s.setComfyWorkflowForMusic
  10    )

  17            value={comfyWorkflowForMusic}
  18:           defaultValue={defaultSettings.comfyWorkflowForMusic}
  19:           onChange={setComfyWorkflowForMusic}
  20            rows={8}

packages\app\src\components\settings\provider.tsx:
    3  import { FormSection } from '@/components/forms/FormSection'
    4: import { getDefaultSettingsState, useSettings } from '@/services/settings'
    5  import { ComfyIcuAccelerator } from '@aitube/clapper-services'

   15  export const hideThirdpartyProviders =
   16:   `${process.env.NEXT_PUBLIC_DISABLE_PROVIDER_CREDENTIALS_IN_USER_SETTINGS || ''}`.toLowerCase() ===
   17    'true'

   33  }
   34: export function SettingsSectionProvider() {
   35:   const defaultSettings = getDefaultSettingsState()
   36  
   37    const showApiKeys = useUI((s) => s.showApiKeys)
   38:   const setShowApiKeys = useUI((s) => s.setShowApiKeys)
   39  
   40:   const replicateApiKey = useSettings((s) => s.replicateApiKey)
   41:   const setReplicateApiKey = useSettings((s) => s.setReplicateApiKey)
   42  
   43:   const comfyUiApiUrl = useSettings((s) => s.comfyUiApiUrl)
   44:   const setComfyUiApiUrl = useSettings((s) => s.setComfyUiApiUrl)
   45  
   46:   const comfyUiClientId = useSettings((s) => s.comfyUiClientId)
   47:   const setComfyUiClientId = useSettings((s) => s.setComfyUiClientId)
   48  
   49:   const comfyUiHttpAuthLogin = useSettings((s) => s.comfyUiHttpAuthLogin)
   50:   const setComfyUiHttpAuthLogin = useSettings((s) => s.setComfyUiHttpAuthLogin)
   51  
   52:   const comfyUiHttpAuthPassword = useSettings((s) => s.comfyUiHttpAuthPassword)
   53:   const setComfyUiHttpAuthPassword = useSettings(
   54:     (s) => s.setComfyUiHttpAuthPassword
   55    )
   56  
   57:   const comfyIcuApiKey = useSettings((s) => s.comfyIcuApiKey)
   58:   const setComfyIcuApiKey = useSettings((s) => s.setComfyIcuApiKey)
   59  
   60:   const comfyIcuAccelerator = useSettings((s) => s.comfyIcuAccelerator)
   61:   const setComfyIcuAccelerator = useSettings((s) => s.setComfyIcuAccelerator)
   62  
   63:   const clapperApiKey = useSettings((s) => s.clapperApiKey)
   64:   const setClapperApiKey = useSettings((s) => s.setClapperApiKey)
   65  
   66:   const huggingFaceApiKey = useSettings((s) => s.huggingFaceApiKey)
   67:   const setHuggingFaceApiKey = useSettings((s) => s.setHuggingFaceApiKey)
   68  
   69:   const falAiApiKey = useSettings((s) => s.falAiApiKey)
   70:   const setFalAiApiKey = useSettings((s) => s.setFalAiApiKey)
   71  
   72:   const modelsLabApiKey = useSettings((s) => s.modelsLabApiKey)
   73:   const setModelsLabApiKey = useSettings((s) => s.setModelsLabApiKey)
   74  
   75:   const openaiApiKey = useSettings((s) => s.openaiApiKey)
   76:   const setOpenaiApiKey = useSettings((s) => s.setOpenaiApiKey)
   77  
   78:   const groqApiKey = useSettings((s) => s.groqApiKey)
   79:   const setGroqApiKey = useSettings((s) => s.setGroqApiKey)
   80  
   81:   const googleApiKey = useSettings((s) => s.googleApiKey)
   82:   const setGoogleApiKey = useSettings((s) => s.setGoogleApiKey)
   83  
   84:   const anthropicApiKey = useSettings((s) => s.anthropicApiKey)
   85:   const setAnthropicApiKey = useSettings((s) => s.setAnthropicApiKey)
   86  
   87:   const cohereApiKey = useSettings((s) => s.cohereApiKey)
   88:   const setCohereApiKey = useSettings((s) => s.setCohereApiKey)
   89  
   90:   const mistralAiApiKey = useSettings((s) => s.mistralAiApiKey)
   91:   const setMistralAiApiKey = useSettings((s) => s.setMistralAiApiKey)
   92  
   93:   const stabilityAiApiKey = useSettings((s) => s.stabilityAiApiKey)
   94:   const setStabilityAiApiKey = useSettings((s) => s.setStabilityAiApiKey)
   95  
   96:   const elevenLabsApiKey = useSettings((s) => s.elevenLabsApiKey)
   97:   const setElevenLabsApiKey = useSettings((s) => s.setElevenLabsApiKey)
   98  
   99:   const kitsAiApiKey = useSettings((s) => s.kitsAiApiKey)
  100:   const setKitsAiApiKey = useSettings((s) => s.setKitsAiApiKey)
  101  
  102:   const letzAiApiKey = useSettings((s) => s.letzAiApiKey)
  103:   const setLetzAiApiKey = useSettings((s) => s.setLetzAiApiKey)
  104  
  105:   const lumaLabsApiKey = useSettings((s) => s.lumaLabsApiKey)
  106:   const setLumaLabsApiKey = useSettings((s) => s.setLumaLabsApiKey)
  107  
  108:   const bigModelApiKey = useSettings((s) => s.bigModelApiKey)
  109:   const setBigModelApiKey = useSettings((s) => s.setBigModelApiKey)
  110  
  111:   const piApiApiKey = useSettings((s) => s.piApiApiKey)
  112:   const setPiApiApiKey = useSettings((s) => s.setPiApiApiKey)
  113  
  114:   const civitaiApiKey = useSettings((s) => s.civitaiApiKey)
  115:   const setCivitaiApiKey = useSettings((s) => s.setCivitaiApiKey)
  116  
  117:   const hotshotApiKey = useSettings((s) => s.hotshotApiKey)
  118:   const setHotshotApiKey = useSettings((s) => s.setHotshotApiKey)
  119  

  135            checked={!showApiKeys}
  136:           onCheckedChange={setShowApiKeys}
  137          />

  142            defaultValue={''}
  143:           onChange={setClapperApiKey}
  144            type={apiKeyType}

  152                defaultValue={''}
  153:               onChange={setHuggingFaceApiKey}
  154                type={apiKeyType}

  159                value={replicateApiKey}
  160:               defaultValue={defaultSettings.replicateApiKey}
  161:               onChange={setReplicateApiKey}
  162                type={apiKeyType}

  167                value={comfyUiApiUrl}
  168:               defaultValue={defaultSettings.comfyUiApiUrl}
  169:               onChange={setComfyUiApiUrl}
  170                type="text"

  175                value={comfyUiClientId}
  176:               defaultValue={defaultSettings.comfyUiClientId}
  177:               onChange={setComfyUiClientId}
  178                type="text"

  183                value={comfyUiHttpAuthLogin}
  184:               defaultValue={defaultSettings.comfyUiHttpAuthLogin}
  185:               onChange={setComfyUiHttpAuthLogin}
  186                type="text"

  191                value={comfyUiHttpAuthPassword}
  192:               defaultValue={defaultSettings.comfyUiHttpAuthPassword}
  193:               onChange={setComfyUiHttpAuthPassword}
  194                type={apiKeyType}

  199                value={comfyIcuApiKey}
  200:               defaultValue={defaultSettings.comfyIcuApiKey}
  201:               onChange={setComfyIcuApiKey}
  202                type={apiKeyType}

  219                )}
  220:               onSelect={setComfyIcuAccelerator}
  221              />

  229                value={falAiApiKey}
  230:               defaultValue={defaultSettings.falAiApiKey}
  231:               onChange={setFalAiApiKey}
  232                type={apiKeyType}

  237                value={modelsLabApiKey}
  238:               defaultValue={defaultSettings.modelsLabApiKey}
  239:               onChange={setModelsLabApiKey}
  240                type={apiKeyType}

  249                value={openaiApiKey}
  250:               defaultValue={defaultSettings.openaiApiKey}
  251:               onChange={setOpenaiApiKey}
  252                type={apiKeyType}

  257                value={groqApiKey}
  258:               defaultValue={defaultSettings.groqApiKey}
  259:               onChange={setGroqApiKey}
  260                type={apiKeyType}

  269                value={googleApiKey}
  270:               defaultValue={defaultSettings.googleApiKey}
  271:               onChange={setGoogleApiKey}
  272                type={apiKeyType}

  276                label={
  277:                 <GetItHere href="https://console.anthropic.com/settings/keys">
  278                    Anthropic API Key

  281                value={anthropicApiKey}
  282:               defaultValue={defaultSettings.anthropicApiKey}
  283:               onChange={setAnthropicApiKey}
  284                type={apiKeyType}

  293                value={cohereApiKey}
  294:               defaultValue={defaultSettings.cohereApiKey}
  295:               onChange={setCohereApiKey}
  296                type={apiKeyType}

  301                value={mistralAiApiKey}
  302:               defaultValue={defaultSettings.mistralAiApiKey}
  303:               onChange={setMistralAiApiKey}
  304                type={apiKeyType}

  313                value={stabilityAiApiKey}
  314:               defaultValue={defaultSettings.stabilityAiApiKey}
  315:               onChange={setStabilityAiApiKey}
  316                type={apiKeyType}

  321                value={elevenLabsApiKey}
  322:               defaultValue={defaultSettings.elevenLabsApiKey}
  323:               onChange={setElevenLabsApiKey}
  324                type={apiKeyType}

  329                value={kitsAiApiKey}
  330:               defaultValue={defaultSettings.kitsAiApiKey}
  331:               onChange={setKitsAiApiKey}
  332                type={apiKeyType}

  337                value={letzAiApiKey}
  338:               defaultValue={defaultSettings.letzAiApiKey}
  339:               onChange={setLetzAiApiKey}
  340                type={apiKeyType}

  345                value={lumaLabsApiKey}
  346:               defaultValue={defaultSettings.lumaLabsApiKey}
  347:               onChange={setLumaLabsApiKey}
  348                type={apiKeyType}

  353                value={bigModelApiKey}
  354:               defaultValue={defaultSettings.bigModelApiKey}
  355:               onChange={setBigModelApiKey}
  356                type={apiKeyType}

  361                value={piApiApiKey}
  362:               defaultValue={defaultSettings.piApiApiKey}
  363:               onChange={setPiApiApiKey}
  364                type={apiKeyType}

  369                value={civitaiApiKey}
  370:               defaultValue={defaultSettings.civitaiApiKey}
  371:               onChange={setCivitaiApiKey}
  372                type={apiKeyType}

  377                value={hotshotApiKey}
  378:               defaultValue={defaultSettings.hotshotApiKey}
  379:               onChange={setHotshotApiKey}
  380                type={apiKeyType}

packages\app\src\components\settings\sound.tsx:
   1  import { FormArea, FormSection } from '@/components/forms'
   2: import { getDefaultSettingsState, useSettings } from '@/services/settings'
   3  
   4: export function SettingsSectionSound() {
   5:   const defaultSettings = getDefaultSettingsState()
   6  
   7:   const comfyWorkflowForSound = useSettings((s) => s.comfyWorkflowForSound)
   8:   const setComfyWorkflowForSound = useSettings(
   9:     (s) => s.setComfyWorkflowForSound
  10    )

  17            value={comfyWorkflowForSound}
  18:           defaultValue={defaultSettings.comfyWorkflowForSound}
  19:           onChange={setComfyWorkflowForSound}
  20            rows={8}

packages\app\src\components\settings\video.tsx:
   1  import { FormInput, FormSection } from '@/components/forms'
   2: import { getDefaultSettingsState, useSettings } from '@/services/settings'
   3: import { FormComfyUIWorkflowSettings } from '../forms/FormComfyUIWorkflowSettings'
   4  import { ClapWorkflow, ClapWorkflowCategory } from '@aitube/clap'
   5  
   6: export function SettingsSectionVideo() {
   7:   const defaultSettings = getDefaultSettingsState()
   8:   const comfyClapWorkflow = useSettings((s) => s.comfyClapWorkflowForVideo)
   9:   const setComfyWorkflowForVideo = useSettings(
  10:     (s) => s.setComfyClapWorkflowForVideo
  11    )
  12  
  13:   const videoPromptPrefix = useSettings((s) => s.videoPromptPrefix)
  14:   const setVideoPromptPrefix = useSettings((s) => s.setVideoPromptPrefix)
  15  
  16:   const videoPromptSuffix = useSettings((s) => s.videoPromptSuffix)
  17:   const setVideoPromptSuffix = useSettings((s) => s.setVideoPromptSuffix)
  18  
  19:   const videoNegativePrompt = useSettings((s) => s.videoNegativePrompt)
  20:   const setVideoNegativePrompt = useSettings((s) => s.setVideoNegativePrompt)
  21  
  22:   const maxVideosToGenerateInParallel = useSettings(
  23      (s) => s.maxVideosToGenerateInParallel
  24    )
  25:   const setMaxVideosToGenerateInParallel = useSettings(
  26:     (s) => s.setMaxVideosToGenerateInParallel
  27    )

  29    const onChangeClapWorkflow = (clapWorkflowUpdated: ClapWorkflow) => {
  30:     setComfyWorkflowForVideo(clapWorkflowUpdated)
  31    }

  38            value={maxVideosToGenerateInParallel}
  39:           defaultValue={defaultSettings.maxVideosToGenerateInParallel}
  40:           onChange={setMaxVideosToGenerateInParallel}
  41          />

  45            value={videoPromptPrefix}
  46:           defaultValue={defaultSettings.videoPromptPrefix}
  47:           onChange={setVideoPromptPrefix}
  48          />

  52            value={videoPromptSuffix}
  53:           defaultValue={defaultSettings.videoPromptSuffix}
  54:           onChange={setVideoPromptSuffix}
  55          />

  59            value={videoNegativePrompt}
  60:           defaultValue={defaultSettings.videoNegativePrompt}
  61:           onChange={setVideoNegativePrompt}
  62          />
  63  
  64:         <FormComfyUIWorkflowSettings
  65            label="Custom ComfyUI workflow for video"

  67            clapWorkflow={comfyClapWorkflow}
  68:           defaultClapWorkflow={defaultSettings.comfyClapWorkflowForVideo}
  69            onChange={onChangeClapWorkflow}

packages\app\src\components\settings\voice.tsx:
   1  import { FormArea, FormSection } from '@/components/forms'
   2: import { getDefaultSettingsState, useSettings } from '@/services/settings'
   3  
   4: export function SettingsSectionVoice() {
   5:   const defaultSettings = getDefaultSettingsState()
   6  
   7:   const comfyWorkflowForVoice = useSettings((s) => s.comfyWorkflowForVoice)
   8:   const setComfyWorkflowForVoice = useSettings(
   9:     (s) => s.setComfyWorkflowForVoice
  10    )

  17            value={comfyWorkflowForVoice}
  18:           defaultValue={defaultSettings.comfyWorkflowForVoice}
  19:           onChange={setComfyWorkflowForVoice}
  20            rows={8}

packages\app\src\components\tasks\TaskStatusUpdate.tsx:
  1: import { useTasks } from './useTasks'
  2  
  3  export function TaskStatusUpdate({ taskId }: { taskId: string }) {
  4:   const { tasks } = useTasks()
  5  

packages\app\src\components\tasks\useTasks.tsx:
   44   * It is also complex, because it is bidirectional!
   45:  * - A task can receive a helper to gets its status, but it can also sets its own status
   46   * - A task can finish itself, ir be finished by an external event etc..

   49   */
   50: export const useTasks = create<TasksStore>((set, get) => ({
   51    tasks: {} as Record<string, Task>,
   52    expandTasks: false,
   53:   setExpandTasks: (expandTasks: boolean) => {
   54:     set({ expandTasks })
   55    },

   75        },
   76:       setStatus: (status: TaskStatus) => {
   77:         return get().setStatus(status, task.id)
   78        },
   79:       setProgress: async (options?: {
   80          value?: number

   85        }) => {
   86:         return get().setProgress(task.id, options)
   87        },

  181            // console.log(
  182:           //   `useTasks[${id}]: checkStatus: checking task, current status is: "${status}"`
  183            // )

  190              // console.log(
  191:             //   `useTasks[${id}]: checkStatus: status is "${status}", interrupting task loop..`
  192              // )

  195              if (status === TaskStatus.SUCCESS) {
  196:               get().setProgress(id, { isFinished: true })
  197              }

  200              // console.log(
  201:             //   `useTasks[${id}]: checkStatus: task is completed at 100%, interrupting task loop..`
  202              // )
  203              // this call might be redundant
  204:             get().setProgress(id, { isFinished: true })
  205:             // get().setStatus(TaskStatus.SUCCESS, id)
  206              resolve(TaskStatus.SUCCESS)

  208              // console.log(
  209:             //   `useTasks[${id}]: checkStatus: status is "${status}", continuing task loop..`
  210              // )
  211:             setTimeout(checkStatus, 1000)
  212            }
  213          } catch (err) {
  214:           console.error('useTasks:checkStatus: ', err)
  215          }

  233      const { tasks } = get()
  234:     set({
  235        tasks: {

  240  
  241:     setTimeout(async () => {
  242        // optionally launch the task function, if there is one

  248        // console.log(
  249:       //   `useTasks[${id}]: launching the task runner in the background..`
  250        // )

  257          // console.log(
  258:         //   `useTasks[${id}]: task runner asked for current status (which is: "${status || 'deleted'}")`
  259          // )

  262  
  263:       // console.log(`useTasks[${id}]: task runner ended with status: "${result}"`)
  264:       get().setProgress(id, { isFinished: true })
  265:       // get().setStatus(result, id)
  266      }, 100)

  275    pause: (taskId?: string) => {
  276:     get().setStatus(TaskStatus.PAUSED, taskId)
  277    },
  278    continue: (taskId?: string) => {
  279:     get().setStatus(TaskStatus.RUNNING, taskId)
  280    },
  281:   setStatus: (status: TaskStatus, taskId?: string) => {
  282      const { tasks } = get()

  284  
  285:     // console.log(`useTasks[${taskId}]:setStatus("${status}")`)
  286      if (task) {
  287        // console.log(
  288:       //   `useTasks[${taskId}]:setStatus("${status}") -> setting one task to ${status}`
  289        // )
  290:       set({
  291          tasks: {

  297        // console.log(
  298:       //   `useTasks[${taskId}]:setStatus("${status}") -> setting all tasks to ${status}`
  299        // )

  303        }
  304:       set({
  305          tasks: newTasks,

  308    },
  309:   setProgress: async (
  310      taskId: string,

  337          if (options?.hasFailed) {
  338:           set({
  339              tasks: {

  355  
  356:           set({
  357              tasks: {

  376      get().cancel()
  377:     set({ tasks: {} })
  378    },
  379    success: (taskId: string) => {
  380:     get().setProgress(taskId, { isFinished: true })
  381:     get().setStatus(TaskStatus.SUCCESS, taskId)
  382    },

  385  
  386:     get().setProgress(taskId, {
  387        message,

  390      })
  391:     get().setStatus(TaskStatus.ERROR, taskId)
  392  

  395    cancel: (taskId?: string) => {
  396:     get().setStatus(TaskStatus.CANCELLED, taskId)
  397    },

packages\app\src\components\toolbars\bottom-bar\BottomMenuItem.tsx:
   5  import { useEditors } from '@/services/editors/useEditors'
   6: import { useTheme } from '@/services/ui/useTheme'
   7  import { useUI } from '@/services'

  31  }) {
  32:   const theme = useTheme()
  33    const view = useEditors((s) => s.view)
  34:   const setView = useEditors((s) => s.setView)
  35:   const setShowExplorer = useUI((s) => s.setShowExplorer)
  36:   const setShowVideoPlayer = useUI((s) => s.setShowVideoPlayer)
  37  

  48      }
  49:     setView(expectedView)
  50:     setShowExplorer(true)
  51:     setShowVideoPlayer(false)
  52    }

packages\app\src\components\toolbars\bottom-bar\DesktopBottomBar.tsx:
   1  import { cn } from '@/lib/utils'
   2: import { useTheme } from '@/services/ui/useTheme'
   3  

   5  import { Tasks } from './tasks'
   6: import { useTimeline } from '@aitube/timeline'
   7  import { TimelineZoom } from '@/components/core/timeline/TimelineZoom'

   9  export function DesktopBottomBar() {
  10:   const theme = useTheme()
  11:   const bpm = useTimeline((s) => s.bpm)
  12:   const frameRate = useTimeline((s) => s.frameRate)
  13  

packages\app\src\components\toolbars\bottom-bar\MobileBottomBar.tsx:
   3  import { GoVideo } from 'react-icons/go'
   4: import { GrUserSettings } from 'react-icons/gr'
   5  import { PiBookOpenTextLight, PiTreeStructureLight } from 'react-icons/pi'
   6: import { EditorView, SettingsCategory } from '@aitube/clapper-services'
   7  

   9  import { useEditors, useUI } from '@/services'
  10: import { useTheme } from '@/services/ui/useTheme'
  11  

  17  export function MobileBottomBar() {
  18:   const theme = useTheme()
  19:   const setView = useEditors((s) => s.setView)
  20:   const setShowExplorer = useUI((s) => s.setShowExplorer)
  21:   const setShowVideoPlayer = useUI((s) => s.setShowVideoPlayer)
  22:   const setShowAssistant = useUI((s) => s.setShowAssistant)
  23:   const setShowSettings = useUI((s) => s.setShowSettings)
  24  

  28      if (isMd) {
  29:       setShowExplorer(true)
  30:       setShowVideoPlayer(true)
  31      } else {
  32:       setShowAssistant(false)
  33:       setShowExplorer(false)
  34:       setShowVideoPlayer(true)
  35      }
  36:   }, [isMd, setShowExplorer, setShowVideoPlayer, setShowAssistant])
  37  

  56          view={EditorView.PROJECT}
  57:         label="Project settings"
  58          onClick={() => {
  59:           setShowExplorer(false)
  60          }}

  76          onClick={() => {
  77:           setShowExplorer(false)
  78          }}

  84          onClick={() => {
  85:           setShowExplorer(false)
  86:           setShowVideoPlayer(true)
  87          }}

  92          label="Preferences"
  93:         onClick={() => setShowSettings(SettingsCategory.PROVIDER)}
  94        >
  95:         <GrUserSettings className="h-6 w-6" />
  96        </BottomMenuItem>

packages\app\src\components\toolbars\bottom-bar\tasks\index.tsx:
   8  import { cn } from '@/lib/utils'
   9: import { useTasks } from '@/services'
  10  
  11  export function Tasks() {
  12:   const { find, tasks } = useTasks()
  13  

packages\app\src\components\toolbars\editors-menu\EditorsSideMenu.tsx:
  22  
  23: import { useTheme } from '@/services/ui/useTheme'
  24  import { EditorsSideMenuItem } from './EditorsSideMenuItem'

  28  export function EditorsSideMenu() {
  29:   const theme = useTheme()
  30    return (

  45        <div className="flex h-full w-full flex-col items-center transition-all duration-200 ease-in-out">
  46:         <EditorsSideMenuItem view={EditorView.PROJECT} label="Project settings">
  47            <MdMovieEdit />

packages\app\src\components\toolbars\editors-menu\EditorsSideMenuItem.tsx:
  11  import { useEditors } from '@/services/editors/useEditors'
  12: import { useTheme } from '@/services/ui/useTheme'
  13  

  36  }) {
  37:   const theme = useTheme()
  38    const view = useEditors((s) => s.view)
  39:   const setView = useEditors((s) => s.setView)
  40  

  51      console.log(`handleClick("${expectedView}")`)
  52:     setView(expectedView)
  53    }

packages\app\src\components\toolbars\system-menu\index.tsx:
   51    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
   52:     inset?: boolean
   53    }
   54: >(({ className, inset, children, ...props }, ref) => (
   55    <MenubarPrimitive.SubTrigger

   58        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-neutral-100 data-[state=open]:text-neutral-900 focus:bg-neutral-100 focus:text-neutral-900 dark:data-[state=open]:bg-neutral-800 dark:data-[state=open]:text-neutral-100 dark:focus:bg-neutral-700 dark:focus:text-neutral-50',
   59:       inset && 'pl-8',
   60        className

   89    (
   90:     { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },
   91      ref

   96          align={align}
   97:         alignOffset={alignOffset}
   98:         sideOffset={sideOffset}
   99          className={cn(

  112    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
  113:     inset?: boolean
  114    }
  115: >(({ className, inset, ...props }, ref) => (
  116    <MenubarPrimitive.Item

  119        'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-neutral-100 focus:text-neutral-900 dark:focus:bg-neutral-700 dark:focus:text-neutral-50',
  120:       inset && 'pl-8',
  121        className

  175    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
  176:     inset?: boolean
  177    }
  178: >(({ className, inset, ...props }, ref) => (
  179    <MenubarPrimitive.Label

  182        'px-2 py-1.5 text-sm font-semibold',
  183:       inset && 'pl-8',
  184        className

packages\app\src\components\toolbars\top-bar\index.tsx:
   2  
   3: import { useTheme } from '@/services'
   4  import { cn } from '@/lib/utils'

  16  ) {
  17:   const theme = useTheme()
  18  

packages\app\src\components\toolbars\top-menu\index.tsx:
   39    const showTimeline = useUI((s) => s.showTimeline)
   40:   const setShowTimeline = useUI((s) => s.setShowTimeline)
   41    const showExplorer = useUI((s) => s.showExplorer)
   42:   const setShowExplorer = useUI((s) => s.setShowExplorer)
   43    const showVideoPlayer = useUI((s) => s.showVideoPlayer)
   44:   const setShowVideoPlayer = useUI((s) => s.setShowVideoPlayer)
   45    const showAssistant = useUI((s) => s.showAssistant)
   46:   const setShowAssistant = useUI((s) => s.setShowAssistant)
   47:   const setIsTopMenuOpen = useUI((s) => s.setIsTopMenuOpen)
   48    const windowLayout = useUI((s) => s.windowLayout)
   49:   const setWindowLayout = useUI((s) => s.setWindowLayout)
   50    const hasBetaAccess = useUI((s) => s.hasBetaAccess)

   55        onValueChange={(value) => {
   56:         setIsTopMenuOpen(!!value)
   57        }}

  104                isVisible={showExplorer}
  105:               setVisible={setShowExplorer}
  106              >

  112              isVisible={showTimeline}
  113:             setVisible={setShowTimeline}
  114            >

  121                isVisible={showVideoPlayer}
  122:               setVisible={setShowVideoPlayer}
  123              >

  128                isVisible={showAssistant}
  129:               setVisible={setShowAssistant}
  130              >

packages\app\src\components\toolbars\top-menu\assistant\index.tsx:
  14  import { useUI } from '@/services/ui'
  15: import { SettingsCategory } from '@aitube/clapper-services'
  16  import { AssistantWorkflows } from '../lists/AssistantWorkflows'

  19  export function TopMenuAssistant() {
  20:   const setShowSettings = useUI((s) => s.setShowSettings)
  21    const convertImagesToStory = useAutocomplete((s) => s.convertImagesToStory)

  31              onClick={() => {
  32:               setShowSettings(SettingsCategory.ASSISTANT)
  33              }}
  34            >
  35:             Show advanced settings
  36            </MenubarItem>

packages\app\src\components\toolbars\top-menu\edit\index.tsx:
   2  
   3: import { EditorView, SettingsCategory } from '@aitube/clapper-services'
   4  import { useHotkeys } from 'react-hotkeys-hook'

  23  export function TopMenuEdit() {
  24:   const setShowSettings = useUI((s) => s.setShowSettings)
  25    const view = useEditors((s) => s.view)

  65            onClick={() => {
  66:             setShowSettings(SettingsCategory.EDITORS)
  67            }}
  68          >
  69:           Show advanced settings
  70          </MenubarItem>

packages\app\src\components\toolbars\top-menu\file\index.tsx:
    2  import { useEffect } from 'react'
    3: import { useTimeline } from '@aitube/timeline'
    4  import { useHotkeys } from 'react-hotkeys-hook'

   23  export function TopMenuFile() {
   24:   const isTimelineLoading: boolean = useTimeline((s) => s.isLoading)
   25:   const clap = useTimeline((s) => s.clap)
   26:   const setClap = useTimeline((s) => s.setClap)
   27:   //const saveClapAs = useTimeline(s => s.saveClapAs)
   28:   //const setFullVideo = useTimeline(s => s.fullVideo)
   29  

   43    const showWelcomeScreen = useUI((s) => s.showWelcomeScreen)
   44:   const setShowWelcomeScreen = useUI((s) => s.setShowWelcomeScreen)
   45  
   46:   // const setShowSettings = useUISettings(s => s.setShowSettings)
   47    useHotkeys('ctrl+o', () => openFilePicker(), { preventDefault: true }, [])

   60              onClick={() => {
   61:               setClap(newClap())
   62:               setShowWelcomeScreen(false)
   63              }}

   88                    onClick={() => {
   89:                     setClap(getDemoGame())
   90                    }}

  195            >
  196:             Export all assets (.zip)
  197            </MenubarItem>

packages\app\src\components\toolbars\top-menu\image\index.tsx:
  13  } from '@/components/ui/menubar'
  14: import { useSettings } from '@/services/settings'
  15  import { useUI } from '@/services/ui'

  21  
  22: import { SettingsCategory } from '@aitube/clapper-services'
  23  import { useResolver } from '@/services/resolver/useResolver'

  33    )
  34:   const setShowSettings = useUI((s) => s.setShowSettings)
  35  
  36:   const imageRenderingStrategy = useSettings((s) => s.imageRenderingStrategy)
  37:   const setImageRenderingStrategy = useSettings(
  38:     (s) => s.setImageRenderingStrategy
  39    )

  49              onClick={() => {
  50:               setShowSettings(SettingsCategory.IMAGE)
  51              }}
  52            >
  53:             Show advanced settings
  54            </MenubarItem>

  66              current={imageRenderingStrategy}
  67:             setter={setImageRenderingStrategy}
  68            />

packages\app\src\components\toolbars\top-menu\lists\AssistantWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function AssistantWorkflows() {
  29:   const assistantWorkflow = useSettings((s) => s.assistantWorkflow)
  30:   const setAssistantWorkflow = useSettings((s) => s.setAssistantWorkflow)
  31    const availableWorkflows = useWorkflowEditor((s) => s.availableWorkflows)

  80                      }
  81:                     setAssistantWorkflow(w)
  82                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\formatProvider.ts:
  2  
  3: import { ClapWorkflowProviderShortNames } from '@/components/settings/constants'
  4  

packages\app\src\components\toolbars\top-menu\lists\ImageDepthWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function ImageDepthWorkflows() {
  29:   const imageDepthWorkflow = useSettings((s) => s.imageDepthWorkflow)
  30:   const setImageDepthWorkflow = useSettings((s) => s.setImageDepthWorkflow)
  31    const availableWorkflows = useWorkflowEditor((s) => s.availableWorkflows)

  80                      }
  81:                     setImageDepthWorkflow(w)
  82                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\ImageFaceswapWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function ImageFaceswapWorkflows() {
  29:   const imageFaceswapWorkflow = useSettings((s) => s.imageFaceswapWorkflow)
  30:   const setImageFaceswapWorkflow = useSettings(
  31:     (s) => s.setImageFaceswapWorkflow
  32    )

  82                      }
  83:                     setImageFaceswapWorkflow(w)
  84                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\ImageGenerationWorkflows.tsx:
   17  import { Tag } from '@/components/tags/Tag'
   18: import { useSettings } from '@/services/settings'
   19  import { cn } from '@/lib/utils'

   27  } from '@/components/core/providers'
   28: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
   29  import { Lora } from '@/services/editors/workflow-editor/workflows/common/types'

   37  export function ImageGenerationWorkflows() {
   38:   const imageGenerationWorkflow = useSettings((s) => s.imageGenerationWorkflow)
   39:   const setImageGenerationWorkflow = useSettings(
   40:     (s) => s.setImageGenerationWorkflow
   41    )

  107                          })
  108:                         setImageGenerationWorkflow({
  109                            ...w,

  130                        }
  131:                       setImageGenerationWorkflow(w)
  132                        e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\ImageSegmentationWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function ImageSegmentationWorkflows() {
  29:   const imageSegmentationWorkflow = useSettings(
  30      (s) => s.imageSegmentationWorkflow
  31    )
  32:   const setImageSegmentationWorkflow = useSettings(
  33:     (s) => s.setImageSegmentationWorkflow
  34    )

  84                      }
  85:                     setImageSegmentationWorkflow(w)
  86                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\ImageUpscalingWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function ImageUpscalingWorkflows() {
  29:   const imageUpscalingWorkflow = useSettings((s) => s.imageUpscalingWorkflow)
  30:   const setImageUpscalingWorkflow = useSettings(
  31:     (s) => s.setImageUpscalingWorkflow
  32    )

  82                      }
  83:                     setImageUpscalingWorkflow(w)
  84                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\MusicGenerationWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function MusicGenerationWorkflows() {
  29:   const musicGenerationWorkflow = useSettings((s) => s.musicGenerationWorkflow)
  30:   const setMusicGenerationWorkflow = useSettings(
  31:     (s) => s.setMusicGenerationWorkflow
  32    )

  82                      }
  83:                     setMusicGenerationWorkflow(w)
  84                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\RenderingStrategyList.tsx:
  25    current,
  26:   setter,
  27  }: {

  29    current?: RenderingStrategy
  30:   setter: (strategy: RenderingStrategy) => void
  31  }) {

  46              onClick={(e) => {
  47:               setter(strategy)
  48                e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\SoundGenerationWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function SoundGenerationWorkflows() {
  29:   const soundGenerationWorkflow = useSettings((s) => s.soundGenerationWorkflow)
  30:   const setSoundGenerationWorkflow = useSettings(
  31:     (s) => s.setSoundGenerationWorkflow
  32    )

  82                      }
  83:                     setSoundGenerationWorkflow(w)
  84                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\ThemeList.tsx:
  18  import { themes } from '@/services/ui/theme'
  19: import { useTheme } from '@/services/ui/useTheme'
  20  
  21  export function ThemeList() {
  22:   const theme = useTheme()
  23:   const setThemeName = useUI((s) => s.setThemeName)
  24  

  38              onClick={(e) => {
  39:               setThemeName(id as UIThemeName)
  40                e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\VideoDepthWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function VideoDepthWorkflows() {
  29:   const videoDepthWorkflow = useSettings((s) => s.videoDepthWorkflow)
  30:   const setVideoDepthWorkflow = useSettings((s) => s.setVideoDepthWorkflow)
  31    const availableWorkflows = useWorkflowEditor((s) => s.availableWorkflows)

  80                      }
  81:                     setVideoDepthWorkflow(w)
  82                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\VideoGenerationWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function VideoGenerationWorkflows() {
  29:   const videoGenerationWorkflow = useSettings((s) => s.videoGenerationWorkflow)
  30:   const setVideoGenerationWorkflow = useSettings(
  31:     (s) => s.setVideoGenerationWorkflow
  32    )

  82                      }
  83:                     setVideoGenerationWorkflow(w)
  84                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\VideoLipsyncWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function VideoLipsyncWorkflows() {
  29:   const videoLipsyncWorkflow = useSettings((s) => s.videoLipsyncWorkflow)
  30:   const setVideoLipsyncWorkflow = useSettings((s) => s.setVideoLipsyncWorkflow)
  31    const availableWorkflows = useWorkflowEditor((s) => s.availableWorkflows)

  80                      }
  81:                     setVideoLipsyncWorkflow(w)
  82                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\VideoSegmentationWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function VideoSegmentationWorkflows() {
  29:   const videoSegmentationWorkflow = useSettings(
  30      (s) => s.videoSegmentationWorkflow
  31    )
  32:   const setVideoSegmentationWorkflow = useSettings(
  33:     (s) => s.setVideoSegmentationWorkflow
  34    )

  84                      }
  85:                     setVideoSegmentationWorkflow(w)
  86                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\VideoUpscalingWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function VideoUpscalingWorkflows() {
  29:   const videoUpscalingWorkflow = useSettings((s) => s.videoUpscalingWorkflow)
  30:   const setVideoUpscalingWorkflow = useSettings(
  31:     (s) => s.setVideoUpscalingWorkflow
  32    )

  82                      }
  83:                     setVideoUpscalingWorkflow(w)
  84                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\lists\VoiceGenerationWorkflows.tsx:
  13  import { Tag } from '@/components/tags/Tag'
  14: import { useSettings } from '@/services/settings'
  15  import { cn } from '@/lib/utils'

  23  } from '@/components/core/providers'
  24: import { parseWorkflow } from '@/services/settings/workflows/parseWorkflow'
  25  

  28  export function VoiceGenerationWorkflows() {
  29:   const voiceGenerationWorkflow = useSettings((s) => s.voiceGenerationWorkflow)
  30:   const setVoiceGenerationWorkflow = useSettings(
  31:     (s) => s.setVoiceGenerationWorkflow
  32    )

  82                      }
  83:                     setVoiceGenerationWorkflow(w)
  84                      e.stopPropagation()

packages\app\src\components\toolbars\top-menu\music\index.tsx:
  13  } from '@/components/ui/menubar'
  14: import { useSettings } from '@/services/settings'
  15  import { useUI } from '@/services/ui'

  17  import { RenderingStrategyList } from '../lists/RenderingStrategyList'
  18: import { SettingsCategory } from '@aitube/clapper-services'
  19  import { MusicGenerationWorkflows } from '../lists/MusicGenerationWorkflows'

  26    )
  27:   const setShowSettings = useUI((s) => s.setShowSettings)
  28:   const musicRenderingStrategy = useSettings((s) => s.musicRenderingStrategy)
  29:   const setMusicRenderingStrategy = useSettings(
  30:     (s) => s.setMusicRenderingStrategy
  31    )

  42              onClick={() => {
  43:               setShowSettings(SettingsCategory.MUSIC)
  44              }}
  45            >
  46:             Show advanced settings
  47            </MenubarItem>

  51              current={musicRenderingStrategy}
  52:             setter={setMusicRenderingStrategy}
  53            />

packages\app\src\components\toolbars\top-menu\sound\index.tsx:
  13  } from '@/components/ui/menubar'
  14: import { useSettings } from '@/services/settings'
  15  import { useUI } from '@/services/ui'

  17  import { RenderingStrategyList } from '../lists/RenderingStrategyList'
  18: import { SettingsCategory } from '@aitube/clapper-services'
  19  import { SoundGenerationWorkflows } from '../lists/SoundGenerationWorkflows'

  26    )
  27:   const setShowSettings = useUI((s) => s.setShowSettings)
  28:   const soundRenderingStrategy = useSettings((s) => s.soundRenderingStrategy)
  29:   const setSoundRenderingStrategy = useSettings(
  30:     (s) => s.setSoundRenderingStrategy
  31    )

  41              onClick={() => {
  42:               setShowSettings(SettingsCategory.SOUND)
  43              }}
  44            >
  45:             Show advanced settings
  46            </MenubarItem>

  50              current={soundRenderingStrategy}
  51:             setter={setSoundRenderingStrategy}
  52            />

packages\app\src\components\toolbars\top-menu\ToggleFullScreen\index.tsx:
  16  } = {}) {
  17:   const [isFullscreen, setFullscreen, ref] = useFullscreenStatus()
  18  

  35            onClick={() => {
  36:             setFullscreen(!isFullscreen)
  37            }}

packages\app\src\components\toolbars\top-menu\ToggleView\index.tsx:
  12    isVisible = false,
  13:   setVisible,
  14    className = '',

  17    isVisible?: boolean
  18:   setVisible: (isVisible: boolean) => void
  19    className?: string

  28            onClick={() => {
  29:             setVisible(!isVisible)
  30            }}

packages\app\src\components\toolbars\top-menu\ToggleWindowLayout\index.tsx:
  21    const windowLayout = useUI((s) => s.windowLayout)
  22:   const setWindowLayout = useUI((s) => s.setWindowLayout)
  23  

  32            onClick={() => {
  33:             setWindowLayout(
  34                windowLayout === UIWindowLayout.FLYING

packages\app\src\components\toolbars\top-menu\TopMenuLogo\index.tsx:
  15  import { cn } from '@aitube/timeline'
  16: import { useTheme } from '@/services/ui/useTheme'
  17  
  18  export function TopMenuLogo() {
  19:   const theme = useTheme()
  20    const isPaused = useResolver((s) => s.isPaused)

  25    // it would be more useful to display things like:
  26:   // nb remaining assets to process per category (10 images, 40 videos..)
  27    // estimated total time

packages\app\src\components\toolbars\top-menu\video\index.tsx:
  13  } from '@/components/ui/menubar'
  14: import { useSettings } from '@/services/settings'
  15  import { useUI } from '@/services/ui'

  19  import { VideoUpscalingWorkflows } from '../lists/VideoUpscalingWorkflows'
  20: import { SettingsCategory } from '@aitube/clapper-services'
  21  import { useResolver } from '@/services/resolver/useResolver'

  30    )
  31:   const setShowSettings = useUI((s) => s.setShowSettings)
  32  
  33:   const videoRenderingStrategy = useSettings((s) => s.videoRenderingStrategy)
  34:   const setVideoRenderingStrategy = useSettings(
  35:     (s) => s.setVideoRenderingStrategy
  36    )

  47              onClick={() => {
  48:               setShowSettings(SettingsCategory.VIDEO)
  49              }}
  50            >
  51:             Show advanced settings
  52            </MenubarItem>

  60              current={videoRenderingStrategy}
  61:             setter={setVideoRenderingStrategy}
  62            />

packages\app\src\components\toolbars\top-menu\view\index.tsx:
   22  export function TopMenuView() {
   23:   const [isFullscreen, setFullscreen, ref] = useFullscreenStatus()
   24  

   33    const windowLayout = useUI((s) => s.windowLayout)
   34:   const setWindowLayout = useUI((s) => s.setWindowLayout)
   35  
   36    const showTimeline = useUI((s) => s.showTimeline)
   37:   const setShowTimeline = useUI((s) => s.setShowTimeline)
   38  
   39    const showExplorer = useUI((s) => s.showExplorer)
   40:   const setShowExplorer = useUI((s) => s.setShowExplorer)
   41  
   42    const showAssistant = useUI((s) => s.showAssistant)
   43:   const setShowAssistant = useUI((s) => s.setShowAssistant)
   44  
   45    const showVideoPlayer = useUI((s) => s.showVideoPlayer)
   46:   const setShowVideoPlayer = useUI((s) => s.setShowVideoPlayer)
   47  
   48    const followCursor = useUI((s) => s.followCursor)
   49:   const setFollowCursor = useUI((s) => s.setFollowCursor)
   50  

   58            onClick={(e) => {
   59:             setFullscreen()
   60  

   92            onClick={(e) => {
   93:             setWindowLayout(
   94                windowLayout === UIWindowLayout.FLYING

  137            onClick={(e) => {
  138:             setShowTimeline(!showTimeline)
  139              e.stopPropagation()

  147            onClick={(e) => {
  148:             setShowExplorer(!showExplorer)
  149              e.stopPropagation()

  152            }}
  153:           >Show asset explorer</MenubarCheckboxItem>
  154        */}

  162            onClick={(e) => {
  163:             setFollowCursor(!followCursor)
  164              e.stopPropagation()

  175            onClick={(e) => {
  176:             setShowVideoPlayer(!showVideoPlayer)
  177              e.stopPropagation()

packages\app\src\components\toolbars\top-menu\voice\index.tsx:
  13  } from '@/components/ui/menubar'
  14: import { useSettings } from '@/services/settings'
  15  import { useUI } from '@/services/ui'

  18  import { VoiceGenerationWorkflows } from '../lists/VoiceGenerationWorkflows'
  19: import { SettingsCategory } from '@aitube/clapper-services'
  20  import { useResolver } from '@/services/resolver/useResolver'

  26    )
  27:   const setShowSettings = useUI((s) => s.setShowSettings)
  28:   const voiceRenderingStrategy = useSettings((s) => s.voiceRenderingStrategy)
  29:   const setVoiceRenderingStrategy = useSettings(
  30:     (s) => s.setVoiceRenderingStrategy
  31    )

  41              onClick={() => {
  42:               setShowSettings(SettingsCategory.VOICE)
  43              }}
  44            >
  45:             Show advanced settings
  46            </MenubarItem>

  50              current={voiceRenderingStrategy}
  51:             setter={setVoiceRenderingStrategy}
  52            />

packages\app\src\components\tree-browsers\types.ts:
   17  // ------------------------------------------
   18: export type CommunityTreeNodeDataset = 'COMMUNITY_TREE_NODE_LIST_DATASET'
   19  export type CommunityTreeNodeList = 'COMMUNITY_TREE_NODE_LIST_FOLDER'

   22  export type CommunityTreeNode =
   23:   | CommunityTreeNodeDataset
   24    | CommunityTreeNodeList

   51  export type FilterTreeNodeItem = 'FILTER_TREE_NODE_ITEM_FILTER'
   52: export type FilterTreeNodeItemPreset = 'FILTER_TREE_NODE_ITEM_FILTER_PRESET'
   53  

   56    | FilterTreeNodeItem
   57:   | FilterTreeNodeItemPreset
   58  

  106    id: string // can be the path for now (so not a uuid)
  107:   assetUrl: string // full URL to download the content (eg. to use with wget)
  108:   datasetName: string
  109    userName: string

  126    userName: string
  127:   datasetName: string
  128    repository: string

packages\app\src\components\tree-browsers\utils\isSomething.ts:
  15  
  16: // a tree can mix nodes of various nature (list, leaf) and type (segment, entity, filter, filter with preset params..)
  17  // the purpose of all those type guards is to be able to rect the type of a node,

  40  ): data is CommunityEntityCollection => {
  41:   return nodeType === 'COMMUNITY_TREE_NODE_LIST_DATASET'
  42  }

  71  ): data is FilterWithParams => {
  72:   return nodeType === 'FILTER_TREE_NODE_ITEM_FILTER_PRESET'
  73  }

packages\app\src\components\ui\badge.tsx:
  6  const badgeVariants = cva(
  7:   'inline-flex items-center rounded-full border border-neutral-200 px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-neutral-400 focus:ring-offset-2 dark:border-neutral-800 dark:focus:ring-neutral-800',
  8    {

packages\app\src\components\ui\button.tsx:
   7  const buttonVariants = cva(
   8:   'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-800',
   9    {

  21            'hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
  22:         link: 'text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50',
  23        },

packages\app\src\components\ui\checkbox.tsx:
  15      className={cn(
  16:       'peer h-4 w-4 shrink-0 rounded-sm border border-neutral-200 border-neutral-900 ring-offset-white data-[state=checked]:bg-neutral-900 data-[state=checked]:text-neutral-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-50 dark:border-neutral-800 dark:ring-offset-neutral-950 dark:data-[state=checked]:bg-neutral-50 dark:data-[state=checked]:text-neutral-900 dark:focus-visible:ring-neutral-800',
  17        className

packages\app\src\components\ui\dialog.tsx:
  24      className={cn(
  25:       'fixed inset-0 z-50 blur-sm backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 dark:bg-neutral-900/50',
  26        className

  47        {children}
  48:       <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity data-[state=open]:bg-neutral-100 data-[state=open]:text-neutral-500 hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-neutral-400 focus:ring-offset-2 disabled:pointer-events-none dark:ring-offset-neutral-950 dark:data-[state=open]:bg-neutral-800 dark:data-[state=open]:text-neutral-400 dark:focus:ring-neutral-800">
  49          <X className="h-6 w-6 md:h-5 md:w-5" />

packages\app\src\components\ui\dropdown-menu.tsx:
   23    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
   24:     inset?: boolean
   25    }
   26: >(({ className, inset, children, ...props }, ref) => (
   27    <DropdownMenuPrimitive.SubTrigger

   30        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-neutral-100 focus:bg-neutral-100 dark:data-[state=open]:bg-neutral-800 dark:focus:bg-neutral-800',
   31:       inset && 'pl-8',
   32        className

   61    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
   62: >(({ className, sideOffset = 4, ...props }, ref) => (
   63    <DropdownMenuPrimitive.Portal>

   65        ref={ref}
   66:       sideOffset={sideOffset}
   67        className={cn(

   79    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
   80:     inset?: boolean
   81    }
   82: >(({ className, inset, ...props }, ref) => (
   83    <DropdownMenuPrimitive.Item

   86        'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-neutral-100 focus:text-neutral-900 dark:focus:bg-neutral-800 dark:focus:text-neutral-50',
   87:       inset && 'pl-8',
   88        className

  143    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
  144:     inset?: boolean
  145    }
  146: >(({ className, inset, ...props }, ref) => (
  147    <DropdownMenuPrimitive.Label

  150        'px-2 py-1.5 text-sm font-semibold',
  151:       inset && 'pl-8',
  152        className

packages\app\src\components\ui\input.tsx:
  16  
  17:           'focus-visible:ring-blue-[rgb(59,134,247)] flex h-full w-full rounded-md border border-neutral-50/80 bg-white px-3 py-2 text-xs ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-400/80 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-30 dark:border-neutral-100/30 dark:bg-black/20 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-800',
  18            className

packages\app\src\components\ui\menubar-legacy.tsx:
   51    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
   52:     inset?: boolean
   53    }
   54: >(({ className, inset, children, ...props }, ref) => (
   55    <MenubarPrimitive.SubTrigger

   58        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-neutral-100 data-[state=open]:text-neutral-900 focus:bg-neutral-100 focus:text-neutral-900 dark:data-[state=open]:bg-neutral-800 dark:data-[state=open]:text-neutral-200 dark:focus:bg-neutral-800 dark:focus:text-neutral-200',
   59:       inset && 'pl-8',
   60        className

   89    (
   90:     { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },
   91      ref

   96          align={align}
   97:         alignOffset={alignOffset}
   98:         sideOffset={sideOffset}
   99          className={cn(

  112    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
  113:     inset?: boolean
  114    }
  115: >(({ className, inset, ...props }, ref) => (
  116    <MenubarPrimitive.Item

  119        'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-45 focus:bg-neutral-100 focus:text-neutral-900 dark:focus:bg-neutral-800 dark:focus:text-neutral-200',
  120:       inset && 'pl-8',
  121        className

  175    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
  176:     inset?: boolean
  177    }
  178: >(({ className, inset, ...props }, ref) => (
  179    <MenubarPrimitive.Label

  182        'px-2 py-1.5 text-sm font-semibold',
  183:       inset && 'pl-8',
  184        className

packages\app\src\components\ui\menubar.tsx:
   56      className={cn(
   57:       'fixed inset-y-0 left-0 z-50 w-64 transform bg-white shadow-lg transition-transform duration-300 ease-in-out dark:bg-neutral-900',
   58        isOpen ? 'translate-x-0' : '-translate-x-full',

  102  }> = ({ label, children, onClick }) => {
  103:   const [isOpen, setIsOpen] = React.useState(false)
  104  

  106      if (children) {
  107:       setIsOpen(!isOpen)
  108      } else if (onClick) {

  139  >(({ className, children, ...props }, ref) => {
  140:   const [isMobileMenuOpen, setIsMobileMenuOpen] = React.useState(false)
  141    const { isMd } = useBreakpoints()

  169                  }
  170:                 setIsMobileMenuOpen(false)
  171                }}

  201          <button
  202:           onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
  203            className="rounded-md p-2 hover:bg-neutral-100 dark:hover:bg-neutral-800"

  210            className={cn(
  211:             'fixed inset-0 z-50 transform overflow-y-auto bg-white transition-transform duration-300 ease-in-out dark:bg-neutral-900',
  212              isMobileMenuOpen ? 'translate-x-0' : 'translate-x-full'

  218                <button
  219:                 onClick={() => setIsMobileMenuOpen(false)}
  220                  className="p-2"

  258    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
  259:     inset?: boolean
  260    }
  261: >(({ className, inset, children, ...props }, ref) => (
  262    <MenubarPrimitive.SubTrigger

  265        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-neutral-100 data-[state=open]:text-neutral-900 focus:bg-neutral-100 focus:text-neutral-900 dark:data-[state=open]:bg-neutral-800 dark:data-[state=open]:text-neutral-200 dark:focus:bg-neutral-800 dark:focus:text-neutral-200',
  266:       inset && 'pl-8',
  267        className

  296    (
  297:     { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },
  298      ref

  303          align={align}
  304:         alignOffset={alignOffset}
  305:         sideOffset={sideOffset}
  306          className={cn(

  319    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
  320:     inset?: boolean
  321    }
  322: >(({ className, inset, ...props }, ref) => (
  323    <MenubarPrimitive.Item

  326        'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-45 focus:bg-neutral-100 focus:text-neutral-900 dark:focus:bg-neutral-800 dark:focus:text-neutral-200',
  327:       inset && 'pl-8',
  328        className

  382    React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
  383:     inset?: boolean
  384    }
  385: >(({ className, inset, ...props }, ref) => (
  386    <MenubarPrimitive.Label

  389        'px-2 py-1.5 text-sm font-semibold',
  390:       inset && 'pl-8',
  391        className

packages\app\src\components\ui\popover.tsx:
  14    React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
  15: >(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  16    <PopoverPrimitive.Portal>

  19        align={align}
  20:       sideOffset={sideOffset}
  21        className={cn(

packages\app\src\components\ui\select.tsx:
  21      className={cn(
  22:       'flex h-10 w-full items-center justify-between rounded-md border border-neutral-200 bg-transparent px-3 py-2 text-sm ring-offset-white placeholder:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-neutral-400 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus:ring-neutral-800',
  23        className

packages\app\src\components\ui\sheet.tsx:
  23      className={cn(
  24:       'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
  25        className

  37        side: {
  38:         top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
  39          bottom:
  40:           'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
  41:         left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
  42          right:
  43:           'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
  44        },

  67        {children}
  68:       <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity data-[state=open]:bg-neutral-100 hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 disabled:pointer-events-none dark:ring-offset-neutral-950 dark:data-[state=open]:bg-neutral-800 dark:focus:ring-neutral-300">
  69          <X className="h-4 w-4" />

packages\app\src\components\ui\slider.tsx:
  22      </SliderPrimitive.Track>
  23:     <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-neutral-700 bg-neutral-300 ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:border-neutral-50 dark:bg-neutral-700 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300" />
  24    </SliderPrimitive.Root>

packages\app\src\components\ui\sonner.tsx:
  2  
  3: import { useTheme } from 'next-themes'
  4  import { Toaster as Sonner } from 'sonner'

  8  const Toaster = ({ ...props }: ToasterProps) => {
  9:   const { theme = 'system' } = useTheme()
  10  

packages\app\src\components\ui\switch.tsx:
  13      className={cn(
  14:       'peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors data-[state=checked]:bg-neutral-950/70 data-[state=unchecked]:bg-neutral-100/80 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 focus-visible:ring-offset-white disabled:cursor-not-allowed disabled:opacity-50 dark:data-[state=checked]:bg-neutral-50/80 dark:data-[state=unchecked]:bg-neutral-500/80 dark:focus-visible:ring-neutral-800/80 dark:focus-visible:ring-offset-neutral-950/80',
  15        className

packages\app\src\components\ui\tabs.tsx:
  31      className={cn(
  32:       'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all data-[state=active]:bg-white data-[state=active]:text-neutral-950 data-[state=active]:shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:ring-offset-neutral-950 dark:data-[state=active]:bg-neutral-950 dark:data-[state=active]:text-neutral-50 dark:focus-visible:ring-neutral-300',
  33        className

  46      className={cn(
  47:       'mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300',
  48        className

packages\app\src\components\ui\textarea.tsx:
  12          className={cn(
  13:           'flex min-h-[80px] w-full rounded-md border border-neutral-200 bg-transparent px-3 py-2 text-sm ring-offset-white placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-800',
  14            className

packages\app\src\components\ui\toast.tsx:
  63      className={cn(
  64:       'inline-flex h-8 shrink-0 items-center justify-center rounded-md border border-neutral-200 bg-transparent px-3 text-sm font-medium ring-offset-white transition-colors group-[.destructive]:border-neutral-100/40 hover:bg-neutral-100 group-[.destructive]:hover:border-red-500/30 group-[.destructive]:hover:bg-red-500 group-[.destructive]:hover:text-neutral-50 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 group-[.destructive]:focus:ring-red-500 disabled:pointer-events-none disabled:opacity-50 dark:border-neutral-800 dark:ring-offset-neutral-950 dark:group-[.destructive]:border-neutral-800/40 dark:hover:bg-neutral-800 dark:group-[.destructive]:hover:border-red-900/30 dark:group-[.destructive]:hover:bg-red-900 dark:group-[.destructive]:hover:text-neutral-50 dark:focus:ring-neutral-300 dark:group-[.destructive]:focus:ring-red-900',
  65        className

  78      className={cn(
  79:       'absolute right-2 top-2 rounded-md p-1 text-neutral-950/50 opacity-0 transition-opacity group-hover:opacity-100 group-[.destructive]:text-red-300 hover:text-neutral-950 group-[.destructive]:hover:text-red-50 focus:opacity-100 focus:outline-none focus:ring-2 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600 dark:text-neutral-50/50 dark:hover:text-neutral-50',
  80        className

packages\app\src\components\ui\toaster.tsx:
  10  } from '@/components/ui/toast'
  11: import { useToast } from '@/components/ui/use-toast'
  12  
  13  export function Toaster() {
  14:   const { toasts } = useToast()
  15  

packages\app\src\components\ui\tooltip.tsx:
  16    React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
  17: >(({ className, sideOffset = 4, ...props }, ref) => (
  18    <TooltipPrimitive.Content
  19      ref={ref}
  20:     sideOffset={sideOffset}
  21      className={cn(

packages\app\src\components\ui\use-toast.ts:
   53  
   54: const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
   55  

   60  
   61:   const timeout = setTimeout(() => {
   62      toastTimeouts.delete(toastId)

   68  
   69:   toastTimeouts.set(toastId, timeout)
   70  }

  168  
  169: function useToast() {
  170:   const [state, setState] = React.useState<State>(memoryState)
  171  
  172    React.useEffect(() => {
  173:     listeners.push(setState)
  174      return () => {
  175:       const index = listeners.indexOf(setState)
  176        if (index > -1) {

  188  
  189: export { useToast, toast }

packages\app\src\components\ui\vertical-slider.tsx:
  22      </SliderPrimitive.Track>
  23:     <SliderPrimitive.Thumb className="-ml-1.5 block h-5 w-5 rounded-full border-2 border-neutral-700 bg-neutral-300 ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:border-neutral-50 dark:bg-neutral-700 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300" />
  24    </SliderPrimitive.Root>

packages\app\src\components\uikit\default\button.tsx:
  65      },
  66:   }, //TODO: underline-offset-4 hover:underline",
  67  }

packages\app\src\components\uikit\default\theme.tsx:
   9  function hsl(h: number, s: number, l: number) {
  10:   return new Color().setHSL(h / 360, s / 100, l / 100, 'srgb')
  11  }

packages\app\src\components\windows\index.tsx:
   13  import { cn } from '@/lib/utils'
   14: import { useSettings, useTheme } from '@/services'
   15  import { useWindows } from '@/services/windows/useWindows'

   75    }) => {
   76:     const theme = useTheme()
   77      const windowRef = useRef<HTMLDivElement>(null)
   78      const headerRef = useRef<HTMLDivElement>(null)
   79:     const [isEditing, setIsEditing] = useState(false)
   80:     const [isDragging, setIsDragging] = useState(false)
   81:     const [isResizing, setIsResizing] = useState(false)
   82:     const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })
   83:     const [resizeDirection, setResizeDirection] = useState('')
   84  
   85:     const interfaceSnapWindowsToGrid = useSettings(
   86        (s) => s.interfaceSnapWindowsToGrid

   95      const removeWindow = useWindows((s) => s.removeWindow)
   96:     const setSnapToGrid = useWindows((s) => s.setSnapToGrid)
   97  
   98:     const [isFullscreen, setFullscreen, fullscreenRef] = useFullscreenStatus()
   99  

  101        // commented because for now this doesn't work well
  102:       // setSnapToGrid(interfaceSnapWindowsToGrid)
  103:     }, [interfaceSnapWindowsToGrid, setSnapToGrid])
  104  

  147          if (isValidNumber(win?.x) && isValidNumber(win?.y)) {
  148:           setIsDragging(true)
  149:           setDragOffset({
  150              x: e.clientX,

  160          if (isDragging && win) {
  161:           const dx = e.clientX - dragOffset.x
  162:           const dy = e.clientY - dragOffset.y
  163            const newX = win.x + dx

  165            updateWindowPosition(id, newX, newY)
  166:           setDragOffset({ x: e.clientX, y: e.clientY })
  167          }
  168        },
  169:       [dragOffset.x, dragOffset.y, id, isDragging, updateWindowPosition, win]
  170      )

  172      const handleDragEnd = useCallback(() => {
  173:       setIsDragging(false)
  174      }, [])

  193          if (win) {
  194:           setIsResizing(true)
  195:           setResizeDirection(direction)
  196:           setDragOffset({
  197              x: e.clientX,

  207          if (isResizing && win) {
  208:           const dx = e.clientX - dragOffset.x
  209:           const dy = e.clientY - dragOffset.y
  210            let newWidth = win.width

  234            updateWindowSize(id, newWidth, newHeight)
  235:           setDragOffset({ x: e.clientX, y: e.clientY })
  236          }

  238        [
  239:         dragOffset,
  240          id,

  251      const handleResizeEnd = useCallback(() => {
  252:       setIsResizing(false)
  253:       setResizeDirection('')
  254      }, [])

  319                isFocused ? 'shadow-xl' : '',
  320:               isFullscreen ? 'fixed inset-0' : ''
  321              )

  346                  onChange={(e) => updateWindow(id, { title: e.target.value })}
  347:                 onBlur={() => setIsEditing(false)}
  348                  onKeyDown={(e) => {
  349:                   if (e.key === 'Enter') setIsEditing(false)
  350                  }}

  364                  <button
  365:                   onClick={() => setFullscreen(true)}
  366                    className="text-white/60 hover:text-white/80"

packages\app\src\components\wizards\project\index.tsx:
  37    const projectCreationWizardStep = useUI((s) => s.projectCreationWizardStep)
  38:   const setProjectCreationWizardStep = useUI(
  39:     (s) => s.setProjectCreationWizardStep
  40    )

  45        onOpenChange={(open) =>
  46:         setProjectCreationWizardStep(
  47            open

  68                  onClick={() =>
  69:                   setProjectCreationWizardStep(key as ProjectCreationWizardStep)
  70                  }

  86                onClick={() => {
  87:                 setProjectCreationWizardStep(ProjectCreationWizardStep.NONE)
  88                }}

packages\app\src\experiments\humanizer\findRealisticDrivingVideo.ts:
   9  function formatVideoForDownload(video: string) {
  10:   return `https://huggingface.co/datasets/jbilcke-hf/open-identities/resolve/main/driving-videos/${video}.mp4?download=true`
  11  }

packages\app\src\experiments\moodboard\MoodboardView.tsx:
  55  export function MoodboardView() {
  56:   const [nodes, setNodes, onNodesChange] = useNodesState(initNodes)
  57:   const [edges, setEdges, onEdgesChange] = useEdgesState(initEdges)
  58  
  59    const onConnect: OnConnect = useCallback(
  60:     (params) => setEdges((eds) => addEdge(params, eds)),
  61:     [setEdges]
  62    )

packages\app\src\lib\core\constants.ts:
   2  // who is seriously ready to spawn 32 GPUs in parallel for this?
   3: export const HARD_LIMIT_NB_MAX_ASSETS_TO_GENERATE_IN_PARALLEL = 32
   4  

  12  
  13: // default assets, see: https://huggingface.co/datasets/jbilcke-hf/open-identities
  14  export const sampleVoice =
  15:   'https://huggingface.co/datasets/jbilcke-hf/open-identities/resolve/main/voice-identities/fr-bedtime-story-cloee.mp3?download=true'
  16  
  17  export const sampleDrivingVideo =
  18:   'https://huggingface.co/datasets/jbilcke-hf/open-identities/resolve/main/driving-videos/sample-0001.mp4?download=true'
  19  
  20  export const sampleFace =
  21:   'https://huggingface.co/datasets/jbilcke-hf/open-identities/resolve/main/face-identities/3fe3fcb2-dcf0-4532-af58-affd3740aa90.jpeg?download=true'

packages\app\src\lib\hf\useMyGradioSpaces.ts:
   2  
   3: import { useSettings } from '@/services/settings'
   4  

   8  export function useMyGradioSpaces(): HFSpace[] {
   9:   const [gradioSpaces, setGradioSpaces] = useState<HFSpace[]>([])
  10  
  11:   const huggingFaceApiKey = useSettings((s) => s.huggingFaceApiKey)
  12  

  19          })
  20:         setGradioSpaces(newSpaces)
  21        } catch (err) {

packages\app\src\lib\hooks\useBreakpoints.ts:
  11  export function useBreakpoints(): Breakpoints {
  12:   const [breakpoints, setBreakpoints] = useState<Breakpoints>({
  13      isSm: false,

  22        const width = window.innerWidth
  23:       setBreakpoints({
  24          isSm: width >= 640,

packages\app\src\lib\hooks\useDebounce.ts:
  3  export function useDebounce<T>(value: T, delay?: number): T {
  4:   const [debouncedValue, setDebouncedValue] = useState<T>(value)
  5  
  6    useEffect(() => {
  7:     const timer = setTimeout(() => setDebouncedValue(value), delay || 500)
  8  

packages\app\src\lib\hooks\useDebounceFn.ts:
   2  
   3: type Timer = ReturnType<typeof setTimeout>
   4  type SomeFunction = (...args: any[]) => void

  25    const debouncedFunction = ((...args) => {
  26:     const newTimer = setTimeout(() => {
  27        func(...args)

packages\app\src\lib\hooks\useFullscreenStatus.ts:
  27    const elRef = useRef<Element | null>(null)
  28:   const [isFullscreen, setIsFullscreen] = useState(false)
  29  

  37      const fullscreenElement = getFullscreenElement()
  38:     setIsFullscreen(
  39        !!elRef.current &&

  44  
  45:   const setFullscreen = useCallback(
  46      async (requestedValue?: boolean) => {

  89  
  90:   return [isFullscreen, setFullscreen, elRef]
  91  }

packages\app\src\lib\hooks\useOpenFilePicker.ts:
  17  ) {
  18:   const [isLoading, setIsLoading] = useState(false)
  19    const openClapBlob = useIO((s) => s.openClapBlob)

  47          try {
  48:           setIsLoading(true)
  49            await openClapBlob(projectName, fileName, blob)

  52          } finally {
  53:           setIsLoading(false)
  54          }

  56          try {
  57:           setIsLoading(true)
  58            await openScreenplay(projectName, fileName, blob)

  61          } finally {
  62:           setIsLoading(false)
  63          }

  65          try {
  66:           setIsLoading(true)
  67            await openVideo(projectName, fileName, blob)

  70          } finally {
  71:           setIsLoading(false)
  72          }

packages\app\src\lib\hooks\usePerformanceMeter.ts:
  16  }: PerformanceMeterOptions): PerformanceMeterResult => {
  17:   const [isAvailable, setIsAvailable] = useState<boolean>(false)
  18:   const [isMeasuring, setIsMeasuring] = useState<boolean>(false)
  19:   const [bytes, setBytes] = useState<number | null>(null)
  20:   const [humanReadableString, setHumanReadableString] = useState<string | null>(
  21      null

  26  
  27:     setIsMeasuring(true)
  28      try {
  29        const result = await (performance as any).measureUserAgentSpecificMemory()
  30:       setBytes(result.bytes)
  31:       setHumanReadableString(formatBytes(result.bytes))
  32      } catch (error) {

  34      } finally {
  35:       setIsMeasuring(false)
  36      }

  41        const available = 'measureUserAgentSpecificMemory' in performance
  42:       setIsAvailable(available)
  43        return available

  47        measureMemory() // Start measuring immediately
  48:       const intervalId = setInterval(measureMemory, delayBetweenMeasures * 1000)
  49        return () => clearInterval(intervalId)

packages\app\src\lib\hooks\useTitle.ts:
   2  
   3: export const useTitle = (): {
   4    title: string

   6  } => {
   7:   const [title, setTitle] = useState<string>(document.title)
   8  

  12  
  13:   const changeTitle = (newTitle: string) => setTitle(newTitle)
  14  

packages\app\src\lib\kdenlive\producer_original.ts:
  57        '</producer>',
  58:       ` <property name="set.test_audio">0</property>
  59:         <property name="set.test_image">1</property>
  60         </producer>`

  69        '</producer>',
  70:       ` <property name="set.test_audio">1</property>
  71:         <property name="set.test_image">0</property>
  72         </producer>`

  93        <property name="mlt_image_format">rgb24a</property>
  94:       <property name="set.test_audio">0</property>
  95      </producer>`

packages\app\src\lib\kdenlive\producer.ts:
  55        '</producer>',
  56:       ` <property name="set.test_audio">0</property>
  57:         <property name="set.test_image">1</property>
  58         </producer>`

  67        '</producer>',
  68:       ` <property name="set.test_audio">1</property>
  69:         <property name="set.test_image">0</property>
  70         </producer>`

  91        <property name="mlt_image_format">rgb24a</property>
  92:       <property name="set.test_audio">0</property>
  93      </producer>`

packages\app\src\lib\utils\debounceAsync.ts:
   8    return new Promise((resolve) => {
   9:     setTimeout(() => {
  10        resolve(`Results for ${query}`);

  47  
  48:       timeout = setTimeout(async () => {
  49          try {

packages\app\src\lib\utils\debounceSync.ts:
  44      let result: R | undefined
  45:     timeout = setTimeout(() => {
  46        result = func(...args)

packages\app\src\lib\utils\formatSegmentForExport.test.ts:
  24      id: '301a3e6f-cb59-4a85-afd6-4737eeeee356',
  25:     assetSourceType: 'EMPTY',
  26:     assetUrl: '',
  27      category: 'generic',

  36      segment: {
  37:       assetDurationInMs: 1000,
  38:       assetFileFormat: '',
  39:       assetSourceType: 'EMPTY',
  40:       assetUrl: '',
  41        category: ClapSegmentCategory.GENERIC,

packages\app\src\lib\utils\formatSegmentForExport.ts:
   1: import { ClapAssetSource, ClapSegmentCategory } from '@aitube/clap'
   2  import { TimelineSegment } from '@aitube/timeline'

  32  
  33:   assetUrl: string
  34  
  35:   assetSourceType: ClapAssetSource
  36  

  49  
  50:   if (segment.assetUrl.startsWith('data:')) {
  51      const reg = new RegExp(/data:(.*);base64/gi)
  52:     fallbackFileFormat = `${reg.exec(segment.assetUrl)?.[1] || notFoundFileFormat}`
  53    }
  54  
  55:   // old .clap files might not have the `assetFileFormat`
  56    // which is why we perform a fallback check
  57:   let mimetype = `${segment.assetFileFormat || fallbackFileFormat}`
  58    if (mimetype === 'audio/mpeg') {

  63    const filePath = `${directory}/${fileName}`
  64:   let assetUrl = segment.assetUrl || ''
  65:   let assetSourceType = segment.assetSourceType || ClapAssetSource.EMPTY
  66  

  73      format !== 'unknown' &&
  74:     segment.assetUrl.startsWith('data:')
  75  

  89      fileName,
  90:     assetUrl,
  91:     assetSourceType,
  92      isExportableToFile,

packages\app\src\lib\utils\getTypeAndExtension.test.ts:
  13    expect(getTypeAndExtension(gifUri)).toStrictEqual({
  14:     assetFileFormat: 'image/gif',
  15      category: 'image',

  19    expect(getTypeAndExtension(pngUri)).toStrictEqual({
  20:     assetFileFormat: 'image/png',
  21      category: 'image',

  25    expect(getTypeAndExtension(mp4Uri)).toStrictEqual({
  26:     assetFileFormat: 'video/mp4',
  27      category: 'video',

  47    expect(result).toStrictEqual({
  48:     assetFileFormat: 'image/png',
  49      category: 'image',

packages\app\src\lib\utils\getTypeAndExtension.ts:
  10    // file format eg. video/mp4 text/html audio/wave
  11:   assetFileFormat: string
  12  

  39      category,
  40:     assetFileFormat: mimeType,
  41      extension,

packages\app\src\lib\utils\sleep.ts:
  2    new Promise((resolve) => {
  3:     setTimeout(() => {
  4        resolve(true)

packages\app\src\services\debug.ts:
   1: import { useTimeline } from '@aitube/timeline'
   2: import { useTasks } from '@/components/tasks/useTasks'
   3  import { useAssistant } from './assistant/useAssistant'

  20  import { useResolver } from './resolver/useResolver'
  21: import { useSettings } from './settings/useSettings'
  22  import { useSimulator } from './simulator/useSimulator'

  30    const w = window as any
  31:   w.useTasks = useTasks
  32    w.useAssistant = useAssistant

  41    // w.useIO = useIO
  42:   // w.useSettings = useSettings
  43  

  55    w.useWindows = useWindows
  56:   w.useTimeine = useTimeline
  57  }

packages\app\src\services\index.ts:
   1: export { useTasks } from '@/components/tasks/useTasks'
   2  export { useAssistant } from './assistant/useAssistant'

  18  export { useResolver } from './resolver/useResolver'
  19: export { useSettings } from './settings/useSettings'
  20  export { useUI } from './ui/useUI'
  21: export { useTheme } from './ui/useTheme'
  22  

packages\app\src\services\README.md:
   6  
   7: For instance multiple services might need to tap into the Settings service to pull parameters or default values.
   8  

  61  
  62: ## Settings
  63  

  69  ```typescript
  70: useSettings()
  71  ```

packages\app\src\services\api\resolve.ts:
  13    TimelineStore,
  14:   useTimeline,
  15  } from '@aitube/timeline'

  18    ResolveRequestPrompts,
  19:   SettingsStore,
  20  } from '@aitube/clapper-services'
  21  
  22: import { useSettings } from '../settings'
  23  import { getDefaultResolveRequestPrompts } from '../resolver/getDefaultResolveRequestPrompts'

  27  ): Promise<TimelineSegment> {
  28:   const { getRequestSettings }: SettingsStore = useSettings.getState()
  29:   const timeline: TimelineStore = useTimeline.getState()
  30  

  50    const request: ResolveRequest = {
  51:     settings: getRequestSettings(),
  52      segment,

  82    if (
  83:     request.settings.imageGenerationWorkflow.provider ===
  84        ClapWorkflowProvider.ANTHROPIC &&
  85:     request.settings.imageGenerationWorkflow.engine ===
  86        ClapWorkflowEngine.REST_API

packages\app\src\services\assistant\parseRawInputToAction.ts:
  82      case 'aux débuts':
  83:     case 'reset':
  84      case 'go back to the start':
  85:       // console.log(`voice order detected: setCursorAt(0 ms)`)
  86:       // console.log(" -> the reset command isn't supported yet")
  87        return AssistantAction.NONE

packages\app\src\services\assistant\updateStoryAndScene.ts:
   15    TimelineStore,
   16:   useTimeline,
   17  } from '@aitube/timeline'

   29    const { addEventToHistory } = useAssistant.getState()
   30:   const timeline: TimelineStore = useTimeline.getState()
   31    const {

   35      trackSilentChangeInSegment,
   36:     fitSegmentToAssetDuration,
   37    } = timeline

   79        endTimeInMs,
   80:       assetDurationInMs: endTimeInMs - startTimeInMs,
   81        prompt: prompt,

  139          if (segmentLengthHasChanged) {
  140:           await timeline.fitSegmentToAssetDuration(
  141              existingSegment,

packages\app\src\services\assistant\useAssistant.ts:
   12  import {
   13:   ClapAssetSource,
   14    ClapOutputType,

   26    TimelineStore,
   27:   useTimeline,
   28  } from '@aitube/timeline'

   30  import { getDefaultAssistantState } from './getDefaultAssistantState'
   31: import { useSettings } from '../settings'
   32  

   39  
   40: export const useAssistant = create<AssistantStore>((set, get) => ({
   41    ...getDefaultAssistantState(),

  165  
  166:     set({
  167        history: history.concat(newEvent),

  173    clearHistory: () => {
  174:     set({ history: [] })
  175    },

  188      } = useRenderer.getState()
  189:     const timeline: TimelineStore = useTimeline.getState()
  190      const { description, scenes, entityIndex } = timeline
  191  
  192:     // note: here `settings` is not the store's state itself (with methods etc)
  193      // but a snapshot of the serializable state values only
  194      //
  195:     // when need that because we are going send those settings in HTTPS to our gateway
  196:     const settings = useSettings.getState().getRequestSettings()
  197  

  217      console.log(
  218:       'uh oh.. where are the scene? TODO @julian add them back to useTimeline'
  219      )

  226      // - we need to remove elements that are specific to the browser (eg. audio context nodes)
  227:     // - we may need to remove binary files (base64 assets) like for sound and music,
  228      //  although some AI models could support it

  259          // as the most advanced LLMs can handle images and sound files
  260:         assetUrl: '',
  261:         assetSourceType: ClapAssetSource.EMPTY,
  262        })

  265      const request: AssistantRequest = {
  266:       settings,
  267        prompt: message,

packages\app\src\services\audio\startAudioSourceNode.ts:
  72  
  73:   // set the buffer in the AudioBufferSourceNode
  74    source.buffer = segment.audioBuffer

packages\app\src\services\audio\useAudio.ts:
    3  import { create } from 'zustand'
    4: import { TimelineStore, useTimeline, TimelineSegment } from '@aitube/timeline'
    5  import {

   13  
   14: export const useAudio = create<AudioStore>((set, get) => ({
   15    ...getDefaultAudioState(),

   47  
   48:   setUserDefinedGain: (userDefinedGain: number) => {
   49:     // console.log(`useAudio: setUserDefinedGain(${userDefinedGain})`)
   50:     const { setCurrentGain } = get()
   51:     set({ userDefinedGain })
   52:     setCurrentGain(userDefinedGain)
   53    },
   54  
   55:   setCurrentGain: (currentGain: number) => {
   56:     // console.log(`useAudio: setCurrentGain(${currentGain})`)
   57      const { currentlyPlaying } = get()
   58:     set({ currentGain, isMuted: currentGain === 0 })
   59      currentlyPlaying.forEach((p) => {

   65      // console.log("useAudio: mute()")
   66:     const { setCurrentGain } = get()
   67:     setCurrentGain(0)
   68    },

   71      // console.log("useAudio: unmute()")
   72:     const { setCurrentGain, userDefinedGain } = get()
   73:     setCurrentGain(userDefinedGain)
   74    },

   85  
   86:     const timelineStore: TimelineStore = useTimeline.getState()
   87      const { cursorTimestampAtInMs } = timelineStore

  107              //it is vital to import a fresh store state using useAudio.getState()
  108:             set({
  109                // then we can finally we remove the source from the list, synchronously

  118  
  119:     set({
  120        currentlyPlaying: [

packages\app\src\services\autocomplete\extractCaptionFromFrameMoondream.ts:
  24  
  25: 2.3 For Firefox Nightly: Type about:config in the address bar and set 'dom.webgpu.enabled" to true
  26  `)

packages\app\src\services\autocomplete\extractCaptionsFromFrames.ts:
  82  
  83: // 2.3 For Firefox Nightly: Type about:config in the address bar and set 'dom.webgpu.enabled" to true
  84  // `)

packages\app\src\services\autocomplete\useAutocomplete.ts:
    5  import {
    6:   ClapAssetSource,
    7    ClapSegmentCategory,

   16    TimelineStore,
   17:   useTimeline,
   18  } from '@aitube/timeline'
   19  
   20: import { useTasks } from '@/components/tasks/useTasks'
   21  import { isValidNumber } from '@/lib/utils'

   25  
   26: export const useAutocomplete = create<AutocompleteStore>((set, get) => ({
   27    ...getDefaultAutocompleteState(),

   41  
   42:     const timeline: TimelineStore = useTimeline.getState()
   43  

   52  
   53:     const task = useTasks.getState().add({
   54        category: TaskCategory.IMPORT,

   63  
   64:     set({ isRunning: true })
   65  

   72        ).filter((storyboardImage) =>
   73:         storyboardImage.assetUrl.startsWith('data:')
   74        )

   86            console.log(`analyzing storyboard image:`, storyboardImage)
   87:           const frames = [storyboardImage.assetUrl]
   88            const captions = await extractCaptionsFromFrames(

   96                // so TODO @Julian: adjust this for the right calculation
   97:               // task.setProgress({
   98                //   message: `Analyzing storyboard images (${progress}%)`,

  109  
  110:           task.setProgress({
  111              message: `Analyzing images (${Math.round(progress)}%)`,

  215        task.success()
  216:       set({ isRunning: false })
  217      }

packages\app\src\services\broadcast\useBroadcast.ts:
  18   */
  19: export const useBroadcast = create<BroadcastStore>((set, get) => ({
  20    ...getDefaultBroadcastState(),

  31  
  32:     set({ isBroadcasting })
  33      return isBroadcasting

packages\app\src\services\editors\useEditors.ts:
   7  
   8: export const useEditors = create<EditorsStore>((set, get) => ({
   9    ...getDefaultEditorsState(),
  10:   setView: (view: EditorView) => {
  11:     set({ view })
  12    },

packages\app\src\services\editors\entity-editor\useEntityEditor.ts:
   3  import { EntityEditorStore } from '@aitube/clapper-services'
   4: import { TimelineStore, useTimeline } from '@aitube/timeline'
   5  

   7  
   8: export const useEntityEditor = create<EntityEditorStore>((set, get) => ({
   9    ...getDefaultEntityEditorState(),
  10:   setCurrent: (current?: ClapEntity) => set({ current }),
  11    undo: () => {},
  12    redo: () => {},
  13:   setDraft: (draft?: ClapEntity) => set({ draft }),
  14    selectEntity: (id: string) => {
  15:     const { entityIndex }: TimelineStore = useTimeline.getState()
  16:     set({ current: entityIndex[id] })
  17    },
  18    addEntity: (entity: ClapEntity) => {
  19:     const { addEntities }: TimelineStore = useTimeline.getState()
  20      addEntities([entity])
  21:     get().setCurrent(entity)
  22    },
  23    removeEntity: (id: string) => {
  24:     const { deleteEntities }: TimelineStore = useTimeline.getState()
  25      deleteEntities([id])
  26:     get().setCurrent(undefined)
  27    },
  28:   setShowEntityList: (showEntityList: boolean) => {
  29:     set({ showEntityList })
  30    },

packages\app\src\services\editors\filter-editor\demo.ts:
   78          parameters: {
   79:           preset: 'Blade Runner',
   80            intensity: 0.6,

  113          parameters: {
  114:           preset: 'Kodachrome 64',
  115            intensity: 0.8,

packages\app\src\services\editors\filter-editor\getDefaultFilterEditorState.ts:
  19          parameters: {
  20:           preset: 'Blade Runner',
  21            intensity: 0.6,

packages\app\src\services\editors\filter-editor\runFilterPipeline.ts:
   38  
   39:     debounceTimer = setTimeout(async () => {
   40        try {

  327    const passEncoder = commandEncoder.beginComputePass()
  328:   passEncoder.setPipeline(pipeline)
  329:   passEncoder.setBindGroup(0, bindGroup)
  330    passEncoder.dispatchWorkgroups(

  377    for (let y = 0; y < height; y++) {
  378:     const srcOffset = y * bytesPerRow
  379:     const dstOffset = y * width * 4
  380:     unpaddedBuffer.set(
  381:       new Uint8Array(arrayBuffer, srcOffset, width * 4),
  382:       dstOffset
  383      )

packages\app\src\services\editors\filter-editor\useFilterEditor.ts:
  13  
  14: export const useFilterEditor = create<FilterEditorStore>()((set, get) => ({
  15    ...getDefaultFilterEditorState(),
  16  
  17:   setEnabled: (isEnabled: boolean) => {
  18:     set({ isEnabled })
  19    },

  32  
  33:   setCurrent: (current?: FilterWithParams[]) => {
  34:     set({ current })
  35    },

  37    undo: () => {
  38:     set({
  39        ...undo<FilterWithParams[]>({

  45    redo: () => {
  46:     set({
  47        ...redo<FilterWithParams[]>({

packages\app\src\services\editors\filter-editor\filters\analogLens.ts:
  170          for (var j = -4; j <= 4; j++) {
  171:             let offset = vec2<f32>(f32(i), f32(j)) * pixel_size * radius;
  172:             let sample_coord = vec2<i32>((uv + offset) * vec2<f32>(dimensions));
  173              let sample = sample_texture(sample_coord).rgb;
  174:             let weight = 1.0 - length(offset) / (radius * 5.0 * length(pixel_size));
  175              bloom += max(vec3<f32>(0.0), sample - 0.5) * weight;

  196          for (var j = -4; j <= 4; j++) {
  197:             let offset = vec2<f32>(f32(i), f32(j)) * pixel_size * blur_amount;
  198:             let sample_coord = vec2<i32>((uv + offset) * vec2<f32>(dimensions));
  199              blurred_color += sample_texture(sample_coord).rgb;

packages\app\src\services\editors\filter-editor\filters\cinematic.ts:
    8      {
    9:       id: 'preset',
   10:       label: 'Preset',
   11:       description: 'Cinematic color preset',
   12        category: ClapInputCategory.UNKNOWN,

   65  struct Params {
   66:     preset: i32,
   67      intensity: f32,

   78  
   79: fn apply_preset(color: vec3<f32>, preset: i32) -> vec3<f32> {
   80:     switch preset {
   81          case 0: { // Blade Runner

  129      
  130:     // Apply preset
  131:     let graded = apply_preset(contrasted, params.preset);
  132      

packages\app\src\services\editors\filter-editor\filters\index.ts:
   40  
   41: export const presets: FilterWithParams[] = [
   42    {

   92      parameters: {
   93:       preset: 'Blade Runner',
   94        intensity: 0.6,

  127      parameters: {
  128:       preset: 'Kodachrome 64',
  129        intensity: 0.8,

packages\app\src\services\editors\filter-editor\filters\vintageFilm.ts:
    8      {
    9:       id: 'preset',
   10:       label: 'Preset',
   11:       description: 'Vintage film stock preset',
   12        category: ClapInputCategory.UNKNOWN,

  110  struct Params {
  111:     preset: i32,
  112      intensity: f32,

  190  
  191: fn apply_film_preset(color: vec3<f32>, preset: i32) -> vec3<f32> {
  192:     switch preset {
  193          case 0: { return color * vec3<f32>(1.1, 1.0, 0.9) + vec3<f32>(0.0, 0.03, 0.07); } // Kodachrome 64

  224  
  225:     // Apply film preset
  226:     color = mix(color, apply_film_preset(color, params.preset), params.intensity);
  227  

packages\app\src\services\editors\project-editor\useProjectEditor.ts:
   7  import { getDefaultProjectEditorState } from './getDefaultProjectEditorState'
   8: import { TimelineStore, useTimeline } from '@aitube/timeline'
   9  
  10: export const useProjectEditor = create<ProjectEditorStore>((set, get) => ({
  11    ...getDefaultProjectEditorState(),
  12:   setCurrent: (current?: ClapMeta) => {
  13:     const timeline: TimelineStore = useTimeline.getState()
  14:     set({ current })
  15      if (current && timeline) {

packages\app\src\services\editors\script-editor\useScriptEditor.ts:
    8    TimelineStore,
    9:   useTimeline,
   10    leftBarTrackScaleWidth,

   22  
   23: export const useScriptEditor = create<ScriptEditorStore>((set, get) => ({
   24    ...getDefaultScriptEditorState(),
   25:   setMonaco: (monaco?: Monaco) => {
   26:     set({ monaco })
   27    },
   28:   setTextModel: (textModel?: MonacoEditor.editor.ITextModel) => {
   29:     set({ textModel })
   30    },
   31:   setStandaloneCodeEditor: (
   32      standaloneCodeEditor?: MonacoEditor.editor.IStandaloneCodeEditor
   33    ) => {
   34:     set({ standaloneCodeEditor })
   35    },
   36:   setMouseIsInside: (mouseIsInside: boolean) => {
   37:     set({ mouseIsInside })
   38    },

   41  
   42:     set({
   43        current: clap.meta.storyPrompt,

   48        // we need to update the model
   49:       textModel?.setValue(clap.meta.storyPrompt)
   50      } catch (err) {

   64      const { current, lastPublished } = get()
   65:     set({
   66        lastPublished: current,

  116  
  117:     set({
  118        scrollHeight,

  126      if (mouseIsInside) {
  127:       const timeline: TimelineStore = useTimeline.getState()
  128        if (!timeline.timelineCamera || !timeline.timelineControls) {

  148  
  149:       if (useTimeline.getState().scrolX !== scrollX) {
  150:         useTimeline.setState({ scrollX })
  151:         timeline.timelineCamera.position.setX(scrollX)
  152:         timeline.timelineControls.target.setX(scrollX)
  153        }

  159      }
  160:     const timeline: TimelineStore = useTimeline.getState()
  161  

  173  
  174:     timeline.setCursorTimestampAtInMs(startTimeInMs)
  175    },

  177    highlightElements: () => {
  178:     const timeline: TimelineStore = useTimeline.getState()
  179      const { entities } = timeline

  224        const matches: MonacoEditor.editor.FindMatch[] = textModel.findMatches(
  225:         // searchString — The string used to search. If it is a regular expression, set isRegex to true.
  226          // searchString: string,

  265    },
  266:   setCurrent: (current?: string) => {
  267:     set({ current })
  268    },
  269    undo: () => {
  270:     set(undo(get()))
  271    },
  272    redo: () => {
  273:     set(redo(get()))
  274    },

packages\app\src\services\editors\segment-editor\useSegmentEditor.ts:
   8  
   9: export const useSegmentEditor = create<SegmentEditorStore>((set, get) => ({
  10    ...getDefaultSegmentEditorState(),
  11:   setCurrent: (current?: TimelineSegment) => {
  12:     set({ current })
  13    },

packages\app\src\services\editors\workflow-editor\getSegmentWorkflowProviderAndEngine.ts:
   6  } from '@aitube/clap'
   7: import { RequestSettings } from '@aitube/clapper-services'
   8  import { TimelineSegment } from '@aitube/timeline'

  11    segment,
  12:   settings,
  13  }: {
  14    segment: TimelineSegment
  15:   settings: RequestSettings
  16  }): {

  28      segment.category === ClapSegmentCategory.IMAGE
  29:       ? settings.imageGenerationWorkflow
  30        : segment.category === ClapSegmentCategory.VIDEO
  31:         ? settings.videoGenerationWorkflow
  32          : segment.category === ClapSegmentCategory.DIALOGUE
  33:           ? settings.voiceGenerationWorkflow
  34            : segment.category === ClapSegmentCategory.SOUND
  35:             ? settings.soundGenerationWorkflow
  36              : segment.category === ClapSegmentCategory.MUSIC
  37:               ? settings.musicGenerationWorkflow
  38                : undefined

  47      segment.category === ClapSegmentCategory.IMAGE
  48:       ? settings.imageFaceswapWorkflow
  49        : segment.category === ClapSegmentCategory.VIDEO
  50:         ? settings.videoFaceswapWorkflow
  51          : undefined

  60      segment.category === ClapSegmentCategory.VIDEO
  61:       ? settings.videoLipsyncWorkflow
  62        : undefined

packages\app\src\services\editors\workflow-editor\useDynamicWorkflows.ts:
   2  
   3: import { useSettings } from '@/services/settings'
   4  

  13  export function useDynamicWorkflows() {
  14:   const comfyClapWorkflowForImage = useSettings(
  15      (s) => s.comfyClapWorkflowForImage
  16    )
  17:   const comfyClapWorkflowForVideo = useSettings(
  18      (s) => s.comfyClapWorkflowForVideo
  19    )
  20:   const comfyWorkflowForMusic = useSettings((s) => s.comfyWorkflowForMusic)
  21:   const comfyWorkflowForSound = useSettings((s) => s.comfyWorkflowForSound)
  22:   const comfyWorkflowForVoice = useSettings((s) => s.comfyWorkflowForVoice)
  23  

packages\app\src\services\editors\workflow-editor\useWorkflowEditor.ts:
   9  
  10: export const useWorkflowEditor = create<WorkflowEditorStore>((set, get) => ({
  11    ...getDefaultWorkflowEditorState(),
  12:   setCurrent: (current?: ClapWorkflow) => {
  13:     set({ current })
  14    },

  28  
  29:     set({
  30        availableWorkflows,

packages\app\src\services\editors\workflow-editor\workflows\index.ts:
  30  // (eg. utilities for segmentation etc)
  31: // https://github.com/jbilcke-hf/clapper/blob/872298838ea3721f9945140fb00f0239b253b172/src/components/settings/constants.ts#L329
  32  

packages\app\src\services\editors\workflow-editor\workflows\_documentation_\demo_examples.ts:
  25  // it will save you headaches
  26: const justAnExample_DoNotUseThis: ClapWorkflow[] = [
  27    {

  30      // done once and for all (ie. you cannot do `id: generateUUID()` or else
  31:     // the user will lose their settings each time they restart the app)
  32      id: '<something globally unique>',

packages\app\src\services\editors\workflow-editor\workflows\aitube\index.ts:
  18  // ------------------------------------------------------------------------------
  19: // if a user is already using one of those workflows and you change its settings,
  20  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\anthropic\index.ts:
  18  // ------------------------------------------------------------------------------
  19: // if a user is already using one of those workflows and you change its settings,
  20  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\bigmodel\index.ts:
   9  // ------------------------------------------------------------------------------
  10: // if a user is already using one of those workflows and you change its settings,
  11  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\civitai\index.ts:
  13  // ------------------------------------------------------------------------------
  14: // if a user is already using one of those workflows and you change its settings,
  15  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\cohere\index.ts:
  18  // ------------------------------------------------------------------------------
  19: // if a user is already using one of those workflows and you change its settings,
  20  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\comfydeploy\index.ts:
  8  // ------------------------------------------------------------------------------
  9: // if a user is already using one of those workflows and you change its settings,
  10  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\comfyicu\index.ts:
  13  // ------------------------------------------------------------------------------
  14: // if a user is already using one of those workflows and you change its settings,
  15  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\comfyui\getComfyWorkflow.ts:
   1  import { ClapSegmentCategory } from '@aitube/clap'
   2: import { useSettings } from '@/services'
   3  
   4  export function getComfyWorkflow(category: ClapSegmentCategory) {
   5:   const settings = useSettings.getState()
   6  

   9    if (category === ClapSegmentCategory.IMAGE) {
  10:     comfyWorkflow = settings.comfyClapWorkflowForImage
  11    } else if (category === ClapSegmentCategory.VIDEO) {
  12:     comfyWorkflow = settings.comfyClapWorkflowForVideo
  13    }

packages\app\src\services\editors\workflow-editor\workflows\comfyui\index.ts:
    9  import { text_to_image_demo_workflow } from '../common/comfyui/text_to_image_demo_workflow'
   10: import { useSettings } from '@/services'
   11  
   12  // ------------------------------------------------------------------------------
   13: // if a user is already using one of those workflows and you change its settings,
   14  // they will have to reselect it in the UI for changes to be taken into account.

   47  export async function getDynamicComfyuiWorkflows(): Promise<ClapWorkflow[]> {
   48:   const settings = useSettings.getState()
   49  

   51      {
   52:       id: 'comfyui://settings.comfyWorkflowForImage',
   53        label: 'Custom Image Workflow',

   61        category: ClapWorkflowCategory.IMAGE_GENERATION,
   62:       data: settings.comfyClapWorkflowForImage?.data,
   63        schema: '',
   64:       inputFields: settings.comfyClapWorkflowForImage?.inputFields || [
   65          genericPrompt,
   66        ],
   67:       inputValues: settings.comfyClapWorkflowForImage?.inputValues || {
   68          [genericPrompt.id]: genericPrompt.defaultValue,

   71      {
   72:       id: 'comfyui://settings.comfyWorkflowForVideo',
   73        label: 'Custom Video Workflow',

   81        category: ClapWorkflowCategory.VIDEO_GENERATION,
   82:       data: settings.comfyClapWorkflowForVideo.data,
   83        schema: '',
   84:       inputFields: settings.comfyClapWorkflowForVideo.inputFields || [
   85          genericImage,
   86        ],
   87:       inputValues: settings.comfyClapWorkflowForVideo.inputValues || {
   88          [genericImage.id]: genericImage.defaultValue,

   91      {
   92:       id: 'comfyui://settings.comfyWorkflowForVoice',
   93        label: 'Custom Voice Workflow',

  101        category: ClapWorkflowCategory.VOICE_GENERATION,
  102:       data: settings.comfyWorkflowForVoice,
  103        schema: '',

  109      {
  110:       id: 'comfyui://settings.comfyWorkflowForMusic',
  111        label: 'Custom Music Workflow',

  119        category: ClapWorkflowCategory.MUSIC_GENERATION,
  120:       data: settings.comfyWorkflowForMusic,
  121        schema: '',

  127      {
  128:       id: 'comfyui://settings.comfyWorkflowForSound',
  129        label: 'Custom Sound Workflow',

  137        category: ClapWorkflowCategory.SOUND_GENERATION,
  138:       data: settings.comfyWorkflowForSound,
  139        schema: '',

packages\app\src\services\editors\workflow-editor\workflows\common\comfyui\flux_plus_ultimatesdupscale.ts:
  189        widgets_values: [
  190:         'Note that Flux dev and schnell do not have any negative prompt so CFG should be set to 1.0. Setting CFG to 1.0 means the negative prompt is ignored.',
  191        ],

  853        scale: 0.6830134553650705,
  854:       offset: [-1420.2171836433743, 117.31047235297616],
  855      },

packages\app\src\services\editors\workflow-editor\workflows\elevenlabs\index.ts:
  13  // ------------------------------------------------------------------------------
  14: // if a user is already using one of those workflows and you change its settings,
  15  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\falai\defaultWorkflows.ts:
   43  // ------------------------------------------------------------------------------
   44: // if a user is already using one of those workflows and you change its settings,
   45  // they will have to reselect it in the UI for changes to be taken into account.

  659      thumbnailUrl:
  660:       'https://github.com/KwaiVGI/LivePortrait/raw/main/assets/docs/showcase2.gif',
  661      nonCommercial: false,

packages\app\src\services\editors\workflow-editor\workflows\fireworksai\index.ts:
  13  // ------------------------------------------------------------------------------
  14: // if a user is already using one of those workflows and you change its settings,
  15  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\google\index.ts:
  18  // ------------------------------------------------------------------------------
  19: // if a user is already using one of those workflows and you change its settings,
  20  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\groq\index.ts:
  18  // ------------------------------------------------------------------------------
  19: // if a user is already using one of those workflows and you change its settings,
  20  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\hotshot\index.ts:
  13  // ------------------------------------------------------------------------------
  14: // if a user is already using one of those workflows and you change its settings,
  15  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\huggingface\index.ts:
  13  // ------------------------------------------------------------------------------
  14: // if a user is already using one of those workflows and you change its settings,
  15  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\letzai\index.ts:
  13  // ------------------------------------------------------------------------------
  14: // if a user is already using one of those workflows and you change its settings,
  15  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\lumalabs\index.ts:
  14  // ------------------------------------------------------------------------------
  15: // if a user is already using one of those workflows and you change its settings,
  16  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\mistralai\index.ts:
  18  // ------------------------------------------------------------------------------
  19: // if a user is already using one of those workflows and you change its settings,
  20  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\none\index.ts:
  8  // ------------------------------------------------------------------------------
  9: // if a user is already using one of those workflows and you change its settings,
  10  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\openai\index.ts:
  18  // ------------------------------------------------------------------------------
  19: // if a user is already using one of those workflows and you change its settings,
  20  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\openart\samples\openart_workflow.json:
  57    "is_public": true,
  58:   "description": "<p>workflow use flux (flux1-dev-fp8.safetensors) for Image sharpening and upscale.</p><p>i didnt build this workflow. It belongs to the legendary creator datou.</p><p>But his flow didn't work and returned errors due to incorrect settings.</p><p>So I fixed it, and here it is working again</p><p><br></p><p>you need to use:</p><p> flux1-dev-fp8.safetensors</p><p> <a href=\"https://huggingface.co/Comfy-Org/flux1-dev/blob/main/flux1-dev-fp8.safetensors\" target=\"_blank\">https://huggingface.co/Comfy-Org/flux1-dev/blob/main/flux1-dev-fp8.safetensors</a> </p><p>t5xxl_fp16.safetensors</p><p> <a href=\"https://huggingface.co/comfyanonymous/flux_text_encoders/blob/main/t5xxl_fp16.safetensors\" target=\"_blank\">https://huggingface.co/comfyanonymous/flux_text_encoders/blob/main/t5xxl_fp16.safetensors</a> </p><p>clip_l.safetensors</p><p> <a href=\"https://huggingface.co/comfyanonymous/flux_text_encoders/blob/main/clip_l.safetensors\" target=\"_blank\">https://huggingface.co/comfyanonymous/flux_text_encoders/blob/main/clip_l.safetensors</a> </p><p>ae.sft (rename ae.safetensors to ae.sft)</p><p> <a href=\"https://huggingface.co/black-forest-labs/FLUX.1-schnell/tree/main\" target=\"_blank\">https://huggingface.co/black-fore
  59    "created_at": {

packages\app\src\services\editors\workflow-editor\workflows\piapi\index.ts:
   9  // ------------------------------------------------------------------------------
  10: // if a user is already using one of those workflows and you change its settings,
  11  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\editors\workflow-editor\workflows\replicate\defaultWorkflows.ts:
   37  // ------------------------------------------------------------------------------
   38: // if a user is already using one of those workflows and you change its settings,
   39  // they will have to reselect it in the UI for changes to be taken into account.

  120    {
  121:     id: 'replicate://douwantech/musetalk',
  122:     label: 'MuseTalk by @douwantech',
  123      description: '',
  124:     tags: ['lipsync', 'musetalk'],
  125      author: '@douwantech',

  130      provider: ClapWorkflowProvider.REPLICATE,
  131:     data: 'douwantech/musetalk:5501004e78525e4bbd9fa20d1e75ad51fddce5a274bec07b9b16d685e34eeaf8',
  132      schema: '',

  146  
  147:       // see https://replicate.com/douwantech/musetalk
  148        // other params include:

  202          description:
  203:           'Select every nth frame from the driving video. Set to 1 to use all frames.',
  204          category: ClapInputCategory.UNKNOWN,

packages\app\src\services\editors\workflow-editor\workflows\stabilityai\index.ts:
  16  // ------------------------------------------------------------------------------
  17: // if a user is already using one of those workflows and you change its settings,
  18  // they will have to reselect it in the UI for changes to be taken into account.

packages\app\src\services\inputs\useInputs.ts:
  12   */
  13: export const useInputs = create<InputsStore>((set, get) => ({
  14    ...getDefaultInputsState(),

  25  
  26:       set({
  27          gamepads: {

  41        delete gamepads[event.gamepad.index]
  42:       set({
  43          gamepads,

  48        const hasGamepads = 'ongamepadconnected' in window
  49:       set({ hasGamepads })
  50  

  54  
  55:       set({ animationFrame: requestAnimationFrame(loop) })
  56      }
  57  
  58:     set({ animationFrame: requestAnimationFrame(loop) })
  59    },

  63      }
  64:     set({
  65        gamepads: (nav.getGamepads

packages\app\src\services\io\extractFramesFromVideo.ts:
   41    const getSize = () => videoBlob.size
   42:   const readChunk = (chunkSize: number, offset: number) =>
   43      new Promise<Uint8Array>((resolve, reject) => {

   52        reader.onerror = (error) => reject(error)
   53:       reader.readAsArrayBuffer(videoBlob.slice(offset, offset + chunkSize))
   54      })

  128        '-vf',
  129:       'cropdetect=limit=0.1:round=2:reset=0',
  130        '-f',

packages\app\src\services\io\extractScenesFromVideo.ts:
  149    const getSize = () => videoBlob.size
  150:   const readChunk = (chunkSize: number, offset: number) =>
  151      new Promise<Uint8Array>((resolve, reject) => {

  160        reader.onerror = (error) => reject(error)
  161:       reader.readAsArrayBuffer(videoBlob.slice(offset, offset + chunkSize))
  162      })

  210      '-vf',
  211:     'cropdetect=limit=0.1:round=2:reset=0',
  212      '-f',

  310      'libx264',
  311:     '-preset',
  312      'ultrafast',

  331      '-vf',
  332:     `select='not(mod(n,${frameInterval}))',setpts=N/FRAME_RATE/TB`,
  333      '-frames:v',

packages\app\src\services\io\parseFileIntoSegments.ts:
    3  import {
    4:   ClapAssetSource,
    5    ClapOutputType,

   16    TimelineSegment,
   17:   useTimeline,
   18    TimelineStore,

   41  }): Promise<TimelineSegment[]> {
   42:   const timeline: TimelineStore = useTimeline.getState()
   43    const { cursorTimestampAtInMs } = timeline

   71  
   72:       const assetUrl = await blobToBase64DataUri(file)
   73  

   93  
   94:         assetUrl: '',
   95:         assetDurationInMs: durationInMs,
   96:         assetSourceType: ClapAssetSource.EMPTY,
   97:         assetFileFormat: undefined,
   98          track: track ? track : undefined,

  117        const partialStoryboard: Partial<TimelineSegment> = {
  118:         prompt: 'Storyboard', // note: this can be set later with an automatic captioning worker
  119          startTimeInMs, // start time of the segment

  125  
  126:         assetUrl,
  127:         assetDurationInMs: durationInMs,
  128:         assetSourceType: ClapAssetSource.DATA,
  129:         assetFileFormat: `${file.type}`,
  130  

  173  
  174:       useTimeline.setState({ bpm })
  175  

  191  
  192:       const assetUrl = await blobToBase64DataUri(file)
  193  

  202          category,
  203:         assetUrl,
  204:         assetDurationInMs: endTimeInMs,
  205:         assetSourceType: ClapAssetSource.DATA,
  206:         assetFileFormat: `${file.type}`,
  207        }

packages\app\src\services\io\useIO.ts:
    3  import {
    4:   ClapAssetSource,
    5    ClapEntity,

   12    ClapSegmentStatus,
   13:   getClapAssetSourceType,
   14    newClap,

   21    TimelineStore,
   22:   useTimeline,
   23    TimelineSegment,

   42  import { parseFileIntoSegments } from './parseFileIntoSegments'
   43: import { useTasks } from '@/components/tasks/useTasks'
   44  

   70  
   71: export const useIO = create<IOStore>((set, get) => ({
   72    ...getDefaultIOState(),

   75      const renderer = useRenderer.getState()
   76:     const timeline: TimelineStore = useTimeline.getState()
   77  
   78:     // reset various things
   79      renderer.clear()

   83      const { openClapBlob, openScreenplay, openVideo } = get()
   84:     const timeline: TimelineStore = useTimeline.getState()
   85      const { segments, addSegments } = timeline

  135      }
  136:     useUI.getState().setShowWelcomeScreen(false)
  137    },

  142    ): Promise<void> => {
  143:     const timeline: TimelineStore = useTimeline.getState()
  144  
  145:     const sceneExtractionTask = useTasks.getState().add({
  146        category: TaskCategory.IMPORT,

  167        onProgress: (progress: number) => {
  168:         sceneExtractionTask.setProgress({
  169            message: `Extracting scenes.. ${progress}%`,

  174  
  175:     // optional: reset the project
  176:     // await timeline.setClap(newClap())
  177  

  185      // the orientation, duration..
  186:     timeline.setClap(
  187        newClap({

  197  
  198:           // TODO: those should come from the Clapper user settings
  199  

  221  
  222:         const assetDurationInMs = scene.endTimeInMs - scene.startTimeInMs
  223  

  231          for (const newSegment of newSegments) {
  232:           newSegment.assetDurationInMs = assetDurationInMs
  233            if (newSegment.category === ClapSegmentCategory.VIDEO) {
  234:             const { assetFileFormat, outputType } = getTypeAndExtension(
  235                scene.video
  236              )
  237:             newSegment.assetFileFormat = assetFileFormat
  238:             newSegment.assetUrl = scene.video
  239              newSegment.status = ClapSegmentStatus.COMPLETED

  251  
  252:     useUI.getState().setShowWelcomeScreen(false)
  253    },

  263  
  264:     const timeline: TimelineStore = useTimeline.getState()
  265      const scriptEditor: ScriptEditorStore = useScriptEditor.getState()
  266:     const task = useTasks.getState().add({
  267        category: TaskCategory.IMPORT,

  272      })
  273:     task.setProgress({
  274        message: 'Analyzing screenplay..',

  287        // const blob = await res.blob()
  288:       // task.setProgress({
  289        //   message: "Loading scenes..",

  299            const totalProgress = 10 + relativeProgressRatio * 80
  300:           task.setProgress({
  301              message,

  309  
  310:       task.setProgress({
  311          message: 'Loading rendering engine..',

  314  
  315:       await timeline.setClap(clap)
  316        scriptEditor.loadDraftFromClap(clap)
  317  
  318:       task.setProgress({
  319          message: 'Nearly there..',

  328      }
  329:     useUI.getState().setShowWelcomeScreen(false)
  330    },
  331    openScreenplayUrl: async (url: string) => {
  332:     const timeline: TimelineStore = useTimeline.getState()
  333      const scriptEditor: ScriptEditorStore = useScriptEditor.getState()

  338  
  339:     const task = useTasks.getState().add({
  340        category: TaskCategory.IMPORT,

  346  
  347:     task.setProgress({
  348        message: 'Downloading screenplay..',

  360            const totalProgress = 10 + relativeProgressRatio * 80
  361:           task.setProgress({
  362              message,

  370  
  371:       task.setProgress({
  372          message: 'Loading rendering engine..',

  375  
  376:       await timeline.setClap(clap)
  377        scriptEditor.loadDraftFromClap(clap)
  378  
  379:       task.setProgress({
  380          message: 'Nearly there..',

  387      }
  388:     useUI.getState().setShowWelcomeScreen(false)
  389    },

  410    openClapUrl: async (url: string) => {
  411:     const timeline: TimelineStore = useTimeline.getState()
  412      const scriptEditor: ScriptEditorStore = useScriptEditor.getState()
  413:     const { setClap } = timeline
  414  

  418  
  419:     const task = useTasks.getState().add({
  420        category: TaskCategory.IMPORT,

  426  
  427:     task.setProgress({
  428        message: 'Downloading file..',

  435  
  436:       task.setProgress({
  437          message: 'Loading scenes..',

  443  
  444:       task.setProgress({
  445          message: 'Loading rendering engine..',

  448  
  449:       await setClap(clap)
  450        scriptEditor.loadDraftFromClap(clap)

  455      }
  456:     useUI.getState().setShowWelcomeScreen(false)
  457    },
  458    openClapBlob: async (projectName: string, fileName: string, blob: Blob) => {
  459:     const timeline: TimelineStore = useTimeline.getState()
  460      const scriptEditor: ScriptEditorStore = useScriptEditor.getState()
  461:     const { setClap } = timeline
  462  
  463:     const task = useTasks.getState().add({
  464        category: TaskCategory.IMPORT,

  470      try {
  471:       task.setProgress({
  472          message: 'Loading scenes..',

  478  
  479:       task.setProgress({
  480          message: 'Loading rendering engine..',

  483  
  484:       await setClap(clap)
  485        scriptEditor.loadDraftFromClap(clap)

  490      }
  491:     useUI.getState().setShowWelcomeScreen(false)
  492    },

  494      const { saveAnyFile } = get()
  495:     const { getClap } = useTimeline.getState()
  496  
  497:     const tasks = useTasks.getState()
  498  

  529  
  530:     const task = useTasks.getState().add({
  531        category: TaskCategory.EXPORT,

  538      try {
  539:       const timeline: TimelineStore = useTimeline.getState()
  540  

  572            filePath,
  573:           assetUrl,
  574:           assetSourceType,
  575            isExportableToFile,

  577            if (isExportableToFile) {
  578:             assetUrl = filePath
  579:             assetSourceType = ClapAssetSource.PATH
  580  

  582                videos.push({
  583:                 data: base64DataUriToUint8Array(segment.assetUrl),
  584                  startTimeInMs: segment.startTimeInMs,
  585                  endTimeInMs: segment.endTimeInMs,
  586:                 durationInSecs: segment.assetDurationInMs / 1000,
  587                  category: segment.category,

  593                images.push({
  594:                 data: base64DataUriToUint8Array(segment.assetUrl),
  595                  startTimeInMs: segment.startTimeInMs,

  606                audios.push({
  607:                 data: base64DataUriToUint8Array(segment.assetUrl),
  608                  startTimeInMs: segment.startTimeInMs,
  609                  endTimeInMs: segment.endTimeInMs,
  610:                 durationInSecs: segment.assetDurationInMs / 1000,
  611                  category: segment.category,

  629          (progress, message) => {
  630:           task.setProgress({
  631              message: `Rendering video (${Math.round(progress)}%)`,

  649  
  650:     const task = useTasks.getState().add({
  651        category: TaskCategory.EXPORT,

  658      try {
  659:       const timeline: TimelineStore = useTimeline.getState()
  660  

  712            filePath,
  713:           assetUrl,
  714:           assetSourceType,
  715            isExportableToFile,

  719              files[filePath] = [
  720:               // we don't compress assets since normally they already use
  721                // some form of compression (PNG, JPEG, MP3, MP4 etc..)
  722:               base64DataUriToUint8Array(segment.assetUrl),
  723                { level: 0 },
  724              ]
  725:             assetUrl = filePath
  726:             assetSourceType = ClapAssetSource.PATH
  727  

  730                  videos.push({
  731:                   data: base64DataUriToUint8Array(segment.assetUrl),
  732                    startTimeInMs: segment.startTimeInMs,
  733                    endTimeInMs: segment.endTimeInMs,
  734:                   durationInSecs: segment.assetDurationInMs / 1000,
  735                    category: segment.category,

  743                  audios.push({
  744:                   data: base64DataUriToUint8Array(segment.assetUrl),
  745                    startTimeInMs: segment.startTimeInMs,
  746                    endTimeInMs: segment.endTimeInMs,
  747:                   durationInSecs: segment.assetDurationInMs / 1000,
  748                    category: segment.category,

  758                  ...segment,
  759:                 assetUrl,
  760:                 assetSourceType,
  761                },

  776            (progress, message) => {
  777:             task.setProgress({
  778                message,

  784          files['video/full.mp4'] = [
  785:           // we don't compress assets since normally they already use
  786            // some form of compression (PNG, JPEG, MP3, MP4 etc..)

  797          (error, zipFile) => {
  798:           task.setProgress({
  799              message: 'Saving to file..',

  815  
  816:     const task = useTasks.getState().add({
  817        category: TaskCategory.EXPORT,

  824      try {
  825:       task.setProgress({
  826          message: 'Generating OTIOZ content...',

  831  
  832:       task.setProgress({
  833          message: 'Preparing file for download...',

  846    openMLT: async (file: File) => {
  847:     useUI.getState().setShowWelcomeScreen(false)
  848    },

  851    openKdenline: async (file: File) => {
  852:     useUI.getState().setShowWelcomeScreen(false)
  853    },

  856      const { saveAnyFile } = get()
  857:     const clap: ClapProject = useTimeline.getState().clap
  858:     // const tracks: ClapTracks = useTimeline.getState().tracks
  859  

  871   
  872:     const segmentsWithNonEmptyAssets = clap.segments.filter(s => s.assetUrl)
  873  
  874:     // const videoSegments = clap.segments.filter(s => s.category === ClapSegmentCategory.VIDEO && s.assetUrl)
  875      const videoTractor = project.addVideoTractor()
  876  
  877:     // const soundSegments = clap.segments.filter(s => s.category === ClapSegmentCategory.SOUND && s.assetUrl)
  878      const soundTractor = project.addAudioTractor()
  879  
  880:     // const voiceSegments = clap.segments.filter(s => s.category === ClapSegmentCategory.DIALOGUE && s.assetUrl)
  881      const voiceTractor = project.addAudioTractor()
  882  
  883:     // const musicSegments = clap.segments.filter(s => s.category === ClapSegmentCategory.MUSIC && s.assetUrl)
  884      const musicTractor = project.addAudioTractor()

  889          shot,
  890:         segmentsWithNonEmptyAssets,
  891          ClapSegmentCategory.VIDEO

  914    openOpenTimelineIO: async (file: File) => {
  915:     useUI.getState().setShowWelcomeScreen(false)
  916    },

  940  
  941:     useUI.getState().setShowWelcomeScreen(false)
  942  

packages\app\src\services\io\formats\edl.ts:
   1: import { ClapAssetSource, ClapProject } from '@aitube/clap'
   2: import { TimelineStore, useTimeline } from '@aitube/timeline'
   3  import {

  18  export async function generateEDL(): Promise<string> {
  19:   const timeline: TimelineStore = useTimeline.getState()
  20    const { title, getClap, segments: timelineSegments } = timeline

  49        if (
  50:         segment.assetUrl &&
  51:         segment.assetSourceType === ClapAssetSource.PATH
  52        ) {

packages\app\src\services\io\formats\fcp.ts:
   1  import { ClapProject, UUID } from '@aitube/clap'
   2: import { TimelineStore, useTimeline } from '@aitube/timeline'
   3  import {

   8  export async function generateFCP(): Promise<string> {
   9:   const timeline: TimelineStore = useTimeline.getState()
  10    const { title, width, height, getClap, segments: timelineSegments } = timeline

  26  
  27:   const createAssetFormat = (id: string): string => {
  28      return /* XML */ `<format id="${id}" name="FFVideoFormat${height}p${DEFAULT_FRAME_RATE}" frameDuration="${formatFCPTime(1000 / DEFAULT_FRAME_RATE)}" width="${width}" height="${height}"/>`

  31    const resources: string[] = []
  32:   const assetClips: string[] = []
  33    const formatId = `r${width}x${height}`
  34  
  35:   resources.push(createAssetFormat(formatId))
  36  

  43  
  44:     if (segment.assetUrl) {
  45:       const assetId = UUID()
  46        resources.push(// want to see some colors? install es6-string-html in your VSCode
  47        /* XML */ `
  48:         <asset id="${assetId}" name="${segment.label}" src="file://./${filePath}" start="0s" duration="${formatFCPTime(segment.assetDurationInMs)}" format="${formatId}"
  49            hasVideo="${category === 'video' || category === 'storyboard' ? 1 : 0}"

  61  
  62:       assetClips.push(/* XML */ `
  63:         <asset-clip name="${segment.label}" ref="${assetId}" offset="${formatFCPTime(segment.startTimeInMs)}" duration="${formatFCPTime(segment.endTimeInMs - segment.startTimeInMs)}" start="${formatFCPTime(0)}" 
  64            ${category === 'video' || category === 'storyboard' ? '' : `audioRole="${audioRole}"`}/>

  79            <spine>
  80:             ${assetClips.join('\n')}
  81            </spine>

  89  export async function generateFCP7XML(): Promise<string> {
  90:   const timeline: TimelineStore = useTimeline.getState()
  91    const {

packages\app\src\services\io\formats\mlt.ts:
    6  import { ClapSegmentCategory } from '@aitube/clap'
    7: import { TimelineStore, useTimeline } from '@aitube/timeline'
    8  
    9  export async function generateMLT(): Promise<string> {
   10:   const timeline: TimelineStore = useTimeline.getState()
   11    const {

   73  <property name="mlt_image_format">rgba</property>
   74: <property name="set.test_audio">0</property>
   75  </producer>

  125    in="${formatDuration(0)}"
  126:   out="${formatDuration(segment.assetDurationInMs)}"
  127  />

  140    in="${formatDuration(0)}"
  141:   out="${formatDuration(segment.assetDurationInMs)}"
  142  />

packages\app\src\services\io\formats\otio.ts:
   1: import { TimelineStore, useTimeline } from '@aitube/timeline'
   2  import {

  50  export async function generateOTIO(): Promise<string> {
  51:   const timeline: TimelineStore = useTimeline.getState()
  52    const { title, segments: timelineSegments } = timeline

packages\app\src\services\io\formats\otioz.ts:
   1: import { TimelineStore, useTimeline } from '@aitube/timeline'
   2  import {

  11  export async function generateOTIOZ(): Promise<Uint8Array> {
  12:   const timeline: TimelineStore = useTimeline.getState()
  13    const { segments: timelineSegments } = timeline

  30      // Add media file to the zip
  31:     if (segment.assetUrl && segment.assetUrl.startsWith('data:')) {
  32:       files[filePath] = base64DataUriToUint8Array(segment.assetUrl)
  33      }
  34:     // If the asset is not a data URI, you might need to handle file reading differently
  35      // depending on your environment (browser vs Node.js)

packages\app\src\services\metrics\useMetrics.ts:
  7  
  8: export const useMetrics = create<MetricsStore>((set, get) => ({
  9    ...getDefaultMetricsState(),

packages\app\src\services\mic\useMic.ts:
    9  
   10: export const useMic = create<MicStore>((set, get) => ({
   11    ...getDefaultMicState(),

   21        if (!recognition) {
   22:         set({
   23            isSupported: false,

   27        } else {
   28:         set({
   29            isSupported: true,

   76  
   77:         debounceTimer = setTimeout(() => {
   78:           set({ transcript: fullTranscript.trim() })
   79            debounceTimer = null

   88          }
   89:         set({ isListening: false, error })
   90        }

   99                : '')
  100:           set({ transcript: fullTranscript.trim() })
  101          }
  102:         set({ isListening: false })
  103        }

  108  
  109:       set({ recognition })
  110      } catch (err) {
  111:       set({
  112          isSupported: false,

  122      recognition.start()
  123:     set({ isListening: true, error: '' })
  124    },

  130      recognition.stop()
  131:     set({ isListening: false, error: '' })
  132    },
  133    clear: () => {
  134:     set({ transcript: '', error: '' })
  135    },

packages\app\src\services\monitor\useMonitor.ts:
    3  import { create } from 'zustand'
    4: import { TimelineStore, useTimeline } from '@aitube/timeline'
    5  import { MonitorStore, RendererStore } from '@aitube/clapper-services'

   10  
   11: export const useMonitor = create<MonitorStore>((set, get) => ({
   12    ...getDefaultMonitorState(),

   40  
   41:     set({
   42        shortcutsAreBound: true,

   45  
   46:   setStaticVideoRef: (staticVideoRef: HTMLVideoElement) => {
   47:     set({
   48        staticVideoRef,

   51  
   52:   setIsEmbedded: (isEmbedded: boolean) => {
   53:     set({
   54        isEmbedded,

   84  
   85:     set({
   86        isPlaying,

   97      const renderer: RendererStore = useRenderer.getState()
   98:     const timeline: TimelineStore = useTimeline.getState()
   99  

  101      const { renderLoop, syncVideoToCurrentCursorPosition } = renderer
  102:     const { setCursorTimestampAtInMs, cursorTimestampAtInMs } = timeline
  103  
  104      if (cursorTimestampAtInMs !== timeInMs) {
  105:       setCursorTimestampAtInMs(timeInMs)
  106      }

  115  
  116:   setLastTimelineUpdateAtInMs: (lastTimelineUpdateAtInMs: number) => {
  117:     set({ lastTimelineUpdateAtInMs })
  118    },

  120  
  121: setTimeout(() => {
  122    if (typeof document !== 'undefined') {

packages\app\src\services\plugins\fetchAndRun.ts:
  20    const sc = document.createElement('script')
  21:   sc.setAttribute('src', objectURL)
  22:   sc.setAttribute('type', 'text/javascript')
  23    document.head.appendChild(sc)

packages\app\src\services\plugins\usePlugins.ts:
  10  } from '@aitube/clapper-services'
  11: import { useTimeline } from '@aitube/timeline'
  12  

  14  import { useMonitor } from '../monitor/useMonitor'
  15: import { useTasks } from '@/components/tasks/useTasks'
  16  import { useRenderer } from '../renderer'

  35  
  36: export const usePlugins = create<PluginsStore>((set, get) => ({
  37    ...getDefaultPluginsState(),

  43  
  44:     set({
  45        availablePlugins: [

  57  
  58:     await fetchAndRun(plugin.assetUrl)
  59    },

  76        monitor: useMonitor,
  77:       tasks: useTasks,
  78:       timeline: useTimeline,
  79        renderer: useRenderer,

  86    },
  87:   pluginApiGetSettings: async (id: string) => {
  88      return []

  95        },
  96:       getSettings: async () => {
  97:         return get().pluginApiGetSettings(plugin.meta.id)
  98        },

packages\app\src\services\renderer\getSegmentCacheKey.ts:
  3  export function getSegmentCacheKey(segment: TimelineSegment, prefix = '') {
  4:   // we have to be smart here because we can't take the full base64 assetUrl (it might be huge)
  5    // so we only use a portion of it
  6  
  7:   return `${prefix}:${segment.id}_${segment.assetUrl.slice(0, 1024)}`
  8  }

packages\app\src\services\renderer\useRenderer.ts:
   11    TimelineStore,
   12:   useTimeline,
   13    TimelineSegment,

   20  import { useMonitor } from '../monitor/useMonitor'
   21: import { useSettings } from '../settings'
   22  
   23: export const useRenderer = create<RendererStore>((set, get) => ({
   24    ...getDefaultRendererState(),

   26    clear: () => {
   27:     set({
   28        ...getDefaultRendererState(),

   31  
   32:   setUserDefinedRenderingStrategies: ({
   33      imageRenderingStrategy: userDefinedImageRenderingStrategy,

   58  
   59:     set({
   60        imageRenderingStrategy,

   93        const maybeNewCurrentSegment = maybeNewBufferedSegments.activeVideoSegment
   94:         ?.assetUrl
   95          ? maybeNewBufferedSegments.activeVideoSegment
   96:         : maybeNewBufferedSegments.activeStoryboardSegment?.assetUrl
   97            ? maybeNewBufferedSegments.activeStoryboardSegment

   99  
  100:       // the upcoming asset we want to preload (note: we just want to preload it, not display it just yet)
  101        const maybeNewPreloadSegment = maybeNewBufferedSegments
  102:         .upcomingVideoSegment?.assetUrl
  103          ? maybeNewBufferedSegments.upcomingVideoSegment
  104:         : maybeNewBufferedSegments.upcomingStoryboardSegment?.assetUrl
  105            ? maybeNewBufferedSegments.upcomingStoryboardSegment

  109        // we only look at the first part since it might be huge
  110:       // for assets, using a smaller header lookup like 256 or even 512 doesn't seem to be enough
  111        const newCurrentSegmentKey =
  112:         `${maybeNewCurrentSegment?.assetUrl || ''}`.slice(0, 1024)
  113        const newPreloadSegmentKey =
  114:         `${maybeNewPreloadSegment?.assetUrl || ''}`.slice(0, 1024)
  115  

  117        let newDataUriBuffer2 = previousDataUriBuffer2
  118:       let newDataUriBuffer1Key = `${newDataUriBuffer1?.assetUrl || ''}`.slice(
  119          0,

  121        )
  122:       let newDataUriBuffer2Key = `${newDataUriBuffer2?.assetUrl || ''}`.slice(
  123          0,

  135              newDataUriBuffer1Key =
  136:               `${maybeNewCurrentSegment?.assetUrl || ''}`.slice(0, 1024)
  137            }

  143              newDataUriBuffer2Key =
  144:               `${maybeNewCurrentSegment?.assetUrl || ''}`.slice(0, 1024)
  145            }

  149        // otherwise we do the predictive stuff as usual
  150:       set({
  151          bufferedSegments: maybeNewBufferedSegments,

  168    computeBufferedSegments: (): BufferedSegments => {
  169:     const timelineState: TimelineStore = useTimeline.getState()
  170      const { cursorTimestampAtInMs, segments: clapSegments } = timelineState

  187          const isActiveVideo =
  188:           segment.category === ClapSegmentCategory.VIDEO && segment.assetUrl
  189          if (isActiveVideo) {

  215          const isActiveStoryboard =
  216:           segment.category === ClapSegmentCategory.IMAGE && segment.assetUrl
  217          if (isActiveStoryboard) {

  245          const isVideo =
  246:           segment.category === ClapSegmentCategory.VIDEO && segment.assetUrl
  247:         // const isUpcomingStoryboardImage = segment.category === ClapSegmentCategory.IMAGE && segment.assetUrl
  248          if (isVideo) {

  261          const isStoryboardImage =
  262:           segment.category === ClapSegmentCategory.IMAGE && segment.assetUrl
  263          if (isStoryboardImage && !results.upcomingStoryboardSegment) {

  290  
  291:   setDataUriBuffer1: (dataUriBuffer1?: TimelineSegment) => {
  292:     set({ dataUriBuffer1 })
  293    },
  294:   setDataUriBuffer2: (dataUriBuffer2?: TimelineSegment) => {
  295:     set({ dataUriBuffer2 })
  296    },
  297:   setActiveBufferNumber: (activeBufferNumber: number) => {
  298:     set({ activeBufferNumber })
  299    },

  308      } = get()
  309:     const timeline: TimelineStore = useTimeline.getState()
  310  

  328        segmentDurationInMs,
  329:       activeSegment.assetDurationInMs
  330      )

packages\app\src\services\renderer\useRenderLoop.ts:
    1: import { TimelineStore, useTimeline } from '@aitube/timeline'
    2  import {

   12  import { useEffect, useRef } from 'react'
   13: import { useSettings } from '../settings'
   14  

   24  export function useRenderLoop(): void {
   25:   const setDataUriBuffer1 = useRenderer((s) => s.setDataUriBuffer1)
   26:   const setDataUriBuffer2 = useRenderer((s) => s.setDataUriBuffer2)
   27  
   28    const activeBufferNumber = useRenderer((s) => s.activeBufferNumber)
   29:   const setActiveBufferNumber = useRenderer((s) => s.setActiveBufferNumber)
   30  

   37  
   38:   const setUserDefinedRenderingStrategies = useRenderer(
   39:     (s) => s.setUserDefinedRenderingStrategies
   40    )

   42    // those are the currently active rendering strategies determined by the renderer
   43:   // this is different from the image rendering preferences (what the user has set)
   44:   const imageRenderingStrategy = useSettings((s) => s.imageRenderingStrategy)
   45:   const videoRenderingStrategy = useSettings((s) => s.videoRenderingStrategy)
   46:   const soundRenderingStrategy = useSettings((s) => s.soundRenderingStrategy)
   47:   const voiceRenderingStrategy = useSettings((s) => s.voiceRenderingStrategy)
   48:   const musicRenderingStrategy = useSettings((s) => s.musicRenderingStrategy)
   49    useEffect(() => {
   50:     setUserDefinedRenderingStrategies({
   51        imageRenderingStrategy,

   62      musicRenderingStrategy,
   63:     setUserDefinedRenderingStrategies,
   64    ])

   70      const newActiveBufferNumber = activeBufferNumber === 1 ? 2 : 1
   71:     setActiveBufferNumber(newActiveBufferNumber)
   72  

   77      // this intervert the buffers
   78:     timeoutRef.current = setTimeout(() => {
   79        // by now one buffer should be visible, and the other should be hidden

   81        if (newActiveBufferNumber === 2) {
   82:         setDataUriBuffer1(preloadSegment)
   83        } else {
   84:         setDataUriBuffer2(preloadSegment)
   85        }

   94    useRequestAnimationFrame(() => {
   95:     const timeline: TimelineStore = useTimeline.getState()
   96      const monitor: MonitorStore = useMonitor.getState()

   99  
  100:     const { isPlaying, lastTimelineUpdateAtInMs, setLastTimelineUpdateAtInMs } =
  101        monitor

  109        cursorTimestampAtInMs,
  110:       setCursorTimestampAtInMs,
  111      } = timeline

  124      const elapsedTimeInMs = newTimelineUpdateAtInMs - lastTimelineUpdateAtInMs
  125:     setCursorTimestampAtInMs(cursorTimestampAtInMs + elapsedTimeInMs)
  126:     setLastTimelineUpdateAtInMs(newTimelineUpdateAtInMs)
  127    })

packages\app\src\services\resolver\useResolver.ts:
    4  import {
    5:   ClapAssetSource,
    6    ClapEntity,

   19    TimelineStore,
   20:   useTimeline,
   21    getAudioBuffer,

   44  import { getDefaultResolverState } from './getDefaultResolverState'
   45: import { useSettings } from '../settings'
   46  import { DEFAULT_WAIT_TIME_IF_NOTHING_TO_DO_IN_MS } from './constants'

   51  import { resolve } from '../api/resolve'
   52: import { useTasks } from '@/components/tasks/useTasks'
   53  import { getSegmentWorkflowProviderAndEngine } from '../editors/workflow-editor/getSegmentWorkflowProviderAndEngine'
   54  
   55: export const useResolver = create<ResolverStore>((set, get) => ({
   56    ...getDefaultResolverState(),

   66  
   67:     set({ isRunning: true })
   68  
   69:     setTimeout(() => {
   70        runLoop()

   82      const renderer: RendererState = useRenderer.getState()
   83:     const timeline: TimelineStore = useTimeline.getState()
   84  
   85:     // note: we read the rendering strategies from the renderer, not from the settings
   86      // that's because ultimately it is Clapper and the Renderer module which decide which
   87:     // strategy to use, and override user settings (eg. playback takes precedence over
   88:     // whatever the user set)
   89      const {

  111      ) => {
  112:       setTimeout(() => {
  113          get().runLoop()

  130      //
  131:     // - we modify the original object in-line to add the visibility setting
  132      // - there is a priority order: the info that a segment is "visible" (on screen),

  417      // we don't want to do something like this:
  418:     // await Promise.allSettled(segmentsRenderingPromises)
  419      // because that would limit us in terms of parallelism.

  443  
  444:     set({
  445        currentParallelismQuotaForVideo,

  469      if (typeof isPaused === 'boolean') {
  470:       set({ isPaused })
  471        return isPaused
  472      } else {
  473:       set({ isPaused: !previouslyPaused })
  474        return !previouslyPaused

  508          })
  509:         entity.imageId = `${newSegmentData.assetUrl || ''}`
  510        } catch (err) {

  519      This will have to be done using some specific providers which support
  520:     prompting a voice from settings like "old aged man" etc
  521  

  547          })
  548:         entity.audioId = `${newSegmentData.assetUrl || ''}`
  549        } catch (err) {

  563     * Resolving means taking input parameters and generating an output (changes in the
  564:    * segment settings, typically the assetUrl but this can have other implications
  565     * and changes as well)

  568     *
  569:    * Side-effects are propagated by using useTimeline.trackSilentChangeInSegment()
  570     *

  582      const { resolveEntity } = get()
  583:     const settings = useSettings.getState().getRequestSettings()
  584:     const timeline: TimelineStore = useTimeline.getState()
  585  

  594          segment,
  595:         settings,
  596        })

  647          // however if there is a failure this will still show up as an error toast
  648:         const entityTask = useTasks.getState().add({
  649            category: TaskCategory.GENERIC,

  683      const positiveImagePrompt = [
  684:       settings.imagePromptPrefix,
  685        imagePrompt,
  686:       settings.imagePromptSuffix,
  687      ]

  691  
  692:     const negativeImagePrompt = [settings.imageNegativePrompt]
  693        .map((x) => x.trim())

  715          // image to animate
  716:         image: storyboardImage?.assetUrl,
  717  
  718          // dialogue line to lip-sync
  719:         voice: dialogue?.assetUrl,
  720        },

  737      // however if there is a failure this will still show up as an error toast
  738:     const resolutionTask = useTasks.getState().add({
  739        category: TaskCategory.GENERIC,

  777        if (newSegment.outputType === ClapOutputType.AUDIO) {
  778:         if (newSegment.assetUrl) {
  779            try {
  780:             newSegment.audioBuffer = await getAudioBuffer(newSegment.assetUrl)
  781            } catch (err) {

  787        // after a segment has ben resolved, it is possible that the size
  788:       // of its asset changed (eg. a dialogue line longer than the segment's length)
  789        //

  800        if (newSegment.category === ClapSegmentCategory.DIALOGUE) {
  801:         // by default fitSegmentToAssetDuration() will fit the segment to the asset duration without any gap,
  802          // which can be weird to hear.. so let's add a little delay

  805          //
  806:         await timeline.fitSegmentToAssetDuration(
  807            newSegment,
  808:           typeof newSegment.assetDurationInMs === 'number'
  809              ? // this delay is arbitrary, could be another value (200, 500, 1200..)
  810:               newSegment.assetDurationInMs + 700
  811              : 2000

  813        } else if (newSegment.category === ClapSegmentCategory.SOUND) {
  814:         await timeline.fitSegmentToAssetDuration(
  815            newSegment,
  816:           typeof newSegment.assetDurationInMs === 'number'
  817              ? // this delay is arbitrary, could be another value (200, 500, 1200..)
  818:               newSegment.assetDurationInMs
  819              : 2000

  821        } else if (newSegment.category === ClapSegmentCategory.MUSIC) {
  822:         await timeline.fitSegmentToAssetDuration(
  823            newSegment,
  824:           typeof newSegment.assetDurationInMs === 'number'
  825              ? // this delay is arbitrary, could be another value (200, 500, 1200..)
  826:               newSegment.assetDurationInMs
  827              : 2000

  829        } else if (newSegment.category === ClapSegmentCategory.VIDEO) {
  830:         await timeline.fitSegmentToAssetDuration(newSegment)
  831        }

packages\app\src\services\settings\getDefaultSettingsState.ts:
   1  import { RenderingStrategy } from '@aitube/timeline'
   2: import { ComfyIcuAccelerator, SettingsState } from '@aitube/clapper-services'
   3  

   6  
   7: export function getDefaultSettingsState(): SettingsState {
   8:   const state: SettingsState = {
   9      comfyUiClientId: 'clapper',

  95      // but to be compatible with any Gradio API URL that the
  96:     // user would set manually (eg. running on localhost)
  97      gradioApiUrlForAssistant: '',

packages\app\src\services\settings\index.ts:
  1: export * from './getDefaultSettingsState'
  2: export * from './useSettings'

packages\app\src\services\settings\useSettings.ts:
    13    ComfyIcuAccelerator,
    14:   RequestSettings,
    15:   SettingsStore,
    16  } from '@aitube/clapper-services'

    18  import { getValidBoolean, getValidString } from '@/lib/utils'
    19: import { HARD_LIMIT_NB_MAX_ASSETS_TO_GENERATE_IN_PARALLEL } from '@/lib/core/constants'
    20  
    21: import { getDefaultSettingsState } from './getDefaultSettingsState'
    22  import { getValidComfyWorkflowTemplate } from '@/lib/utils/getValidComfyWorkflowTemplate'

    26  
    27: export const useSettings = create<SettingsStore>()(
    28    persist(
    29:     (set, get) => ({
    30:       ...getDefaultSettingsState(),
    31  
    32:       setComfyUiClientId: (comfyUiClientId?: string) => {
    33          const { comfyUiClientId: defaultComfyUiClientId } =
    34:           getDefaultSettingsState()
    35:         set({
    36            comfyUiClientId: getValidString(

    41        },
    42:       setComfyUiHttpAuthLogin: (comfyUiHttpAuthLogin?: string) => {
    43          const { comfyUiHttpAuthLogin: defaultComfyUiHttpAuthLogin } =
    44:           getDefaultSettingsState()
    45:         set({
    46            comfyUiHttpAuthLogin: getValidString(

    51        },
    52:       setComfyUiHttpAuthPassword: (comfyUiHttpAuthPassword?: string) => {
    53          const { comfyUiHttpAuthPassword: defaultComfyUiHttpAuthPassword } =
    54:           getDefaultSettingsState()
    55:         set({
    56            comfyUiHttpAuthPassword: getValidString(

    61        },
    62:       setReplicateApiKey: (replicateApiKey?: string) => {
    63          const { replicateApiKey: defaultReplicateApiKey } =
    64:           getDefaultSettingsState()
    65:         set({
    66            replicateApiKey: getValidString(

    71        },
    72:       setComfyIcuApiKey: (comfyIcuApiKey?: string) => {
    73          const { comfyIcuApiKey: defaultComfyIcuApiKey } =
    74:           getDefaultSettingsState()
    75:         set({
    76            comfyIcuApiKey: getValidString(comfyIcuApiKey, defaultComfyIcuApiKey),

    78        },
    79:       setComfyIcuAccelerator: (comfyIcuAccelerator?: ComfyIcuAccelerator) => {
    80          const { comfyIcuAccelerator: defaulComfyIcuAccelerator } =
    81:           getDefaultSettingsState()
    82:         set({
    83            comfyIcuAccelerator: parseComfyIcuAccelerator(

    88        },
    89:       setComfyDeployApiKey: (comfyDeployApiKey?: string) => {
    90          const { comfyDeployApiKey: defaultComfyDeployApiKey } =
    91:           getDefaultSettingsState()
    92:         set({
    93            comfyDeployApiKey: getValidString(

    98        },
    99:       setHuggingFaceApiKey: (huggingFaceApiKey?: string) => {
   100          const { huggingFaceApiKey: defaultHuggingFaceApiKey } =
   101:           getDefaultSettingsState()
   102:         set({
   103            huggingFaceApiKey: getValidString(

   108        },
   109:       setFalAiApiKey: (falAiApiKey?: string) => {
   110:         set({
   111            falAiApiKey: getValidString(
   112              falAiApiKey,
   113:             getDefaultSettingsState().falAiApiKey
   114            ),

   116        },
   117:       setClapperApiKey: (clapperApiKey?: string) => {
   118:         set({
   119            clapperApiKey: getValidString(
   120              clapperApiKey,
   121:             getDefaultSettingsState().clapperApiKey
   122            ),

   124        },
   125:       setAiTubeApiKey: (aiTubeApiKey?: string) => {
   126:         set({
   127            aiTubeApiKey: getValidString(
   128              aiTubeApiKey,
   129:             getDefaultSettingsState().aiTubeApiKey
   130            ),

   132        },
   133:       setModelsLabApiKey: (modelsLabApiKey?: string) => {
   134:         set({
   135            modelsLabApiKey: getValidString(
   136              modelsLabApiKey,
   137:             getDefaultSettingsState().modelsLabApiKey
   138            ),

   140        },
   141:       setOpenaiApiKey: (openaiApiKey?: string) => {
   142:         set({
   143            openaiApiKey: getValidString(
   144              openaiApiKey,
   145:             getDefaultSettingsState().openaiApiKey
   146            ),

   148        },
   149:       setGroqApiKey: (groqApiKey?: string) => {
   150:         set({
   151            groqApiKey: getValidString(
   152              groqApiKey,
   153:             getDefaultSettingsState().groqApiKey
   154            ),

   156        },
   157:       setGoogleApiKey: (googleApiKey?: string) => {
   158:         set({
   159            googleApiKey: getValidString(
   160              googleApiKey,
   161:             getDefaultSettingsState().googleApiKey
   162            ),

   164        },
   165:       setAnthropicApiKey: (anthropicApiKey?: string) => {
   166:         set({
   167            anthropicApiKey: getValidString(
   168              anthropicApiKey,
   169:             getDefaultSettingsState().anthropicApiKey
   170            ),

   172        },
   173:       setElevenLabsApiKey: (elevenLabsApiKey?: string) => {
   174:         set({
   175            elevenLabsApiKey: getValidString(
   176              elevenLabsApiKey,
   177:             getDefaultSettingsState().elevenLabsApiKey
   178            ),

   180        },
   181:       setKitsAiApiKey: (kitsAiApiKey?: string) => {
   182:         set({
   183            kitsAiApiKey: getValidString(
   184              kitsAiApiKey,
   185:             getDefaultSettingsState().kitsAiApiKey
   186            ),

   188        },
   189:       setCohereApiKey: (cohereApiKey?: string) => {
   190:         set({
   191            cohereApiKey: getValidString(
   192              cohereApiKey,
   193:             getDefaultSettingsState().cohereApiKey
   194            ),

   196        },
   197:       setMistralAiApiKey: (mistralAiApiKey?: string) => {
   198:         set({
   199            mistralAiApiKey: getValidString(
   200              mistralAiApiKey,
   201:             getDefaultSettingsState().mistralAiApiKey
   202            ),

   204        },
   205:       setFireworksAiApiKey: (fireworksAiApiKey?: string) => {
   206:         set({
   207            fireworksAiApiKey: getValidString(
   208              fireworksAiApiKey,
   209:             getDefaultSettingsState().fireworksAiApiKey
   210            ),

   212        },
   213:       setStabilityAiApiKey: (stabilityAiApiKey?: string) => {
   214:         set({
   215            stabilityAiApiKey: getValidString(
   216              stabilityAiApiKey,
   217:             getDefaultSettingsState().stabilityAiApiKey
   218            ),

   221  
   222:       setLetzAiApiKey: (letzAiApiKey?: string) => {
   223:         set({
   224            letzAiApiKey: getValidString(
   225              letzAiApiKey,
   226:             getDefaultSettingsState().letzAiApiKey
   227            ),

   229        },
   230:       setBigModelApiKey: (bigModelApiKey?: string) => {
   231:         set({
   232            bigModelApiKey: getValidString(
   233              bigModelApiKey,
   234:             getDefaultSettingsState().bigModelApiKey
   235            ),

   237        },
   238:       setPiApiApiKey: (piApiApiKey?: string) => {
   239:         set({
   240            piApiApiKey: getValidString(
   241              piApiApiKey,
   242:             getDefaultSettingsState().piApiApiKey
   243            ),

   245        },
   246:       setCivitaiApiKey: (civitaiApiKey?: string) => {
   247:         set({
   248            civitaiApiKey: getValidString(
   249              civitaiApiKey,
   250:             getDefaultSettingsState().civitaiApiKey
   251            ),

   253        },
   254:       setHotshotApiKey: (hotshotApiKey?: string) => {
   255:         set({
   256            hotshotApiKey: getValidString(
   257              hotshotApiKey,
   258:             getDefaultSettingsState().hotshotApiKey
   259            ),

   261        },
   262:       setLumaLabsApiKey: (lumaLabsApiKey?: string) => {
   263:         set({
   264            lumaLabsApiKey: getValidString(
   265              lumaLabsApiKey,
   266:             getDefaultSettingsState().lumaLabsApiKey
   267            ),

   269        },
   270:       setBroadcastObsServerHost: (broadcastObsServerHost: string) => {
   271:         set({ broadcastObsServerHost })
   272        },
   273:       setBroadcastObsServerPort: (broadcastObsServerPort: number) => {
   274:         set({ broadcastObsServerPort })
   275        },
   276:       setBroadcastObsServerPass: (broadcastObsServerPass: string) => {
   277:         set({ broadcastObsServerPass })
   278        },
   279  
   280:       setCensorNotForAllAudiencesContent: (
   281          censorNotForAllAudiencesContent?: boolean
   282        ) => {
   283:         set({
   284            censorNotForAllAudiencesContent: getValidBoolean(
   285              censorNotForAllAudiencesContent,
   286:             getDefaultSettingsState().censorNotForAllAudiencesContent
   287            ),

   289        },
   290:       setImagePromptPrefix: (imagePromptPrefix?: string) => {
   291:         set({
   292            imagePromptPrefix: getValidString(
   293              imagePromptPrefix,
   294:             getDefaultSettingsState().imagePromptPrefix
   295            ),

   297        },
   298:       setImagePromptSuffix: (imagePromptSuffix?: string) => {
   299:         set({
   300            imagePromptSuffix: getValidString(
   301              imagePromptSuffix,
   302:             getDefaultSettingsState().imagePromptSuffix
   303            ),

   305        },
   306:       setImageNegativePrompt: (imageNegativePrompt?: string) => {
   307:         set({
   308            imageNegativePrompt: getValidString(
   309              imageNegativePrompt,
   310:             getDefaultSettingsState().imageNegativePrompt
   311            ),

   313        },
   314:       setVideoPromptPrefix: (videoPromptPrefix?: string) => {
   315:         set({
   316            videoPromptPrefix: getValidString(
   317              videoPromptPrefix,
   318:             getDefaultSettingsState().videoPromptPrefix
   319            ),

   321        },
   322:       setVideoPromptSuffix: (videoPromptSuffix?: string) => {
   323:         set({
   324            videoPromptSuffix: getValidString(
   325              videoPromptSuffix,
   326:             getDefaultSettingsState().videoPromptSuffix
   327            ),

   329        },
   330:       setVideoNegativePrompt: (videoNegativePrompt?: string) => {
   331:         set({
   332            videoNegativePrompt: getValidString(
   333              videoNegativePrompt,
   334:             getDefaultSettingsState().videoNegativePrompt
   335            ),

   337        },
   338:       setAssistantWorkflow: (assistantWorkflow?: ClapWorkflow) => {
   339          const { assistantWorkflow: defaultAssistantWorkflow } =
   340:           getDefaultSettingsState()
   341:         set({
   342            assistantWorkflow: assistantWorkflow

   346        },
   347:       setAssistantTurboWorkflow: (assistantTurboWorkflow?: ClapWorkflow) => {
   348          const { assistantTurboWorkflow: defaultAssistantTurboWorkflow } =
   349:           getDefaultSettingsState()
   350:         set({
   351            assistantTurboWorkflow: assistantTurboWorkflow

   355        },
   356:       setImageGenerationWorkflow: (imageGenerationWorkflow?: ClapWorkflow) => {
   357          const { imageGenerationWorkflow: defaultImageGenerationWorkflow } =
   358:           getDefaultSettingsState()
   359:         set({
   360            imageGenerationWorkflow: imageGenerationWorkflow

   364        },
   365:       setImageGenerationTurboWorkflow: (
   366          imageGenerationTurboWorkflow?: ClapWorkflow

   369            imageGenerationTurboWorkflow: defaultImageGenerationTurboWorkflow,
   370:         } = getDefaultSettingsState()
   371:         set({
   372            imageGenerationTurboWorkflow: imageGenerationTurboWorkflow

   376        },
   377:       setImageFaceswapWorkflow: (imageFaceswapWorkflow?: ClapWorkflow) => {
   378          const { imageFaceswapWorkflow: defaultImageFaceswapWorkflow } =
   379:           getDefaultSettingsState()
   380:         set({
   381            imageFaceswapWorkflow: imageFaceswapWorkflow

   385        },
   386:       setImageUpscalingWorkflow: (imageUpscalingWorkflow?: ClapWorkflow) => {
   387          const { imageUpscalingWorkflow: defaultImageUpscalingWorkflow } =
   388:           getDefaultSettingsState()
   389:         set({
   390            imageUpscalingWorkflow: imageUpscalingWorkflow

   394        },
   395:       setImageDepthWorkflow: (imageDepthWorkflow?: ClapWorkflow) => {
   396          const { imageDepthWorkflow: defaultImageDepthWorkflow } =
   397:           getDefaultSettingsState()
   398:         set({
   399            imageDepthWorkflow: imageDepthWorkflow

   403        },
   404:       setImageSegmentationWorkflow: (
   405          imageSegmentationWorkflow?: ClapWorkflow

   407          const { imageSegmentationWorkflow: defaultImageSegmentationWorkflow } =
   408:           getDefaultSettingsState()
   409:         set({
   410            imageSegmentationWorkflow: imageSegmentationWorkflow

   414        },
   415:       setVideoGenerationWorkflow: (videoGenerationWorkflow?: ClapWorkflow) => {
   416          const { videoGenerationWorkflow: defaultVideoGenerationWorkflow } =
   417:           getDefaultSettingsState()
   418:         set({
   419            videoGenerationWorkflow: videoGenerationWorkflow

   423        },
   424:       setVideoFaceswapWorkflow: (videoFaceswapWorkflow?: ClapWorkflow) => {
   425          const { videoFaceswapWorkflow: defaultVideoFaceswapWorkflow } =
   426:           getDefaultSettingsState()
   427:         set({
   428            videoFaceswapWorkflow: videoFaceswapWorkflow

   432        },
   433:       setVideoLipsyncWorkflow: (videoLipsyncWorkflow?: ClapWorkflow) => {
   434          const { videoLipsyncWorkflow: defaultVideoLipsyncWorkflow } =
   435:           getDefaultSettingsState()
   436:         set({
   437            videoLipsyncWorkflow: videoLipsyncWorkflow

   441        },
   442:       setVideoUpscalingWorkflow: (videoUpscalingWorkflow?: ClapWorkflow) => {
   443          const { videoUpscalingWorkflow: defaultVideoUpscalingWorkflow } =
   444:           getDefaultSettingsState()
   445:         set({
   446            videoUpscalingWorkflow: videoUpscalingWorkflow

   450        },
   451:       setVideoDepthWorkflow: (videoDepthWorkflow?: ClapWorkflow) => {
   452          const { videoDepthWorkflow: defaultVideoDepthWorkflow } =
   453:           getDefaultSettingsState()
   454:         set({
   455            videoDepthWorkflow: videoDepthWorkflow

   459        },
   460:       setVideoSegmentationWorkflow: (
   461          videoSegmentationWorkflow?: ClapWorkflow

   463          const { videoSegmentationWorkflow: defaultVideoSegmentationWorkflow } =
   464:           getDefaultSettingsState()
   465:         set({
   466            videoSegmentationWorkflow: videoSegmentationWorkflow

   470        },
   471:       setSoundGenerationWorkflow: (soundGenerationWorkflow?: ClapWorkflow) => {
   472          const { soundGenerationWorkflow: defaultSoundGenerationWorkflow } =
   473:           getDefaultSettingsState()
   474:         set({
   475            soundGenerationWorkflow: soundGenerationWorkflow

   479        },
   480:       setVoiceGenerationWorkflow: (voiceGenerationWorkflow?: ClapWorkflow) => {
   481          const { voiceGenerationWorkflow: defaultVoiceGenerationWorkflow } =
   482:           getDefaultSettingsState()
   483:         set({
   484            voiceGenerationWorkflow: voiceGenerationWorkflow

   488        },
   489:       setMusicGenerationWorkflow: (musicGenerationWorkflow?: ClapWorkflow) => {
   490          const { musicGenerationWorkflow: defaultVoiceGenerationWorkflow } =
   491:           getDefaultSettingsState()
   492:         set({
   493            musicGenerationWorkflow: musicGenerationWorkflow

   497        },
   498:       setImageRenderingStrategy: (
   499          imageRenderingStrategy?: RenderingStrategy

   501          const { imageRenderingStrategy: defaultImageRenderingStrategy } =
   502:           getDefaultSettingsState()
   503:         set({
   504            imageRenderingStrategy: parseRenderingStrategy(

   509        },
   510:       setImageDepthRenderingStrategy: (
   511          imageDepthRenderingStrategy?: RenderingStrategy

   514            imageDepthRenderingStrategy: defaultImageDepthRenderingStrategy,
   515:         } = getDefaultSettingsState()
   516:         set({
   517            imageDepthRenderingStrategy: parseRenderingStrategy(

   522        },
   523:       setImageSegmentationRenderingStrategy: (
   524          imageSegmentationRenderingStrategy?: RenderingStrategy

   528              defaultImageSegmentationRenderingStrategy,
   529:         } = getDefaultSettingsState()
   530:         set({
   531            imageSegmentationRenderingStrategy: parseRenderingStrategy(

   536        },
   537:       setImageUpscalingRenderingStrategy: (
   538          imageUpscalingRenderingStrategy?: RenderingStrategy

   542              defaultImageUpscalingRenderingStrategy,
   543:         } = getDefaultSettingsState()
   544:         set({
   545            imageUpscalingRenderingStrategy: parseRenderingStrategy(

   550        },
   551:       setVideoRenderingStrategy: (
   552          videoRenderingStrategy?: RenderingStrategy

   554          const { videoRenderingStrategy: defaultVideoRenderingStrategy } =
   555:           getDefaultSettingsState()
   556:         set({
   557            videoRenderingStrategy: parseRenderingStrategy(

   562        },
   563:       setVideoDepthRenderingStrategy: (
   564          videoDepthRenderingStrategy?: RenderingStrategy

   567            videoDepthRenderingStrategy: defaultVideoDepthRenderingStrategy,
   568:         } = getDefaultSettingsState()
   569:         set({
   570            imageDepthRenderingStrategy: parseRenderingStrategy(

   575        },
   576:       setVideoSegmentationRenderingStrategy: (
   577          videoSegmentationRenderingStrategy?: RenderingStrategy

   581              defaultVideoSegmentationRenderingStrategy,
   582:         } = getDefaultSettingsState()
   583:         set({
   584            videoSegmentationRenderingStrategy: parseRenderingStrategy(

   589        },
   590:       setVideoUpscalingRenderingStrategy: (
   591          videoUpscalingRenderingStrategy?: RenderingStrategy

   595              defaultVideoUpscalingRenderingStrategy,
   596:         } = getDefaultSettingsState()
   597:         set({
   598            videoUpscalingRenderingStrategy: parseRenderingStrategy(

   603        },
   604:       setVoiceRenderingStrategy: (
   605          voiceRenderingStrategy?: RenderingStrategy

   607          const { voiceRenderingStrategy: defaultSpeechRenderingStrategy } =
   608:           getDefaultSettingsState()
   609:         set({
   610            voiceRenderingStrategy: parseRenderingStrategy(

   615        },
   616:       setSoundRenderingStrategy: (
   617          soundRenderingStrategy?: RenderingStrategy

   619          const { soundRenderingStrategy: defaultSoundRenderingStrategy } =
   620:           getDefaultSettingsState()
   621:         set({
   622            soundRenderingStrategy: parseRenderingStrategy(

   627        },
   628:       setMusicRenderingStrategy: (
   629          musicRenderingStrategy?: RenderingStrategy

   631          const { musicRenderingStrategy: defaultMusicRenderingStrategy } =
   632:           getDefaultSettingsState()
   633:         set({
   634            musicRenderingStrategy: parseRenderingStrategy(

   639        },
   640:       setMaxImagesToGenerateInParallel: (
   641          maxImagesToGenerateInParallel?: number

   644            maxImagesToGenerateInParallel: defaultMaxImagesToGenerateInParallel,
   645:         } = getDefaultSettingsState()
   646:         set({
   647            maxImagesToGenerateInParallel: getValidNumber(

   649              1,
   650:             HARD_LIMIT_NB_MAX_ASSETS_TO_GENERATE_IN_PARALLEL,
   651              defaultMaxImagesToGenerateInParallel

   654        },
   655:       setMaxVideosToGenerateInParallel: (
   656          maxVideosToGenerateInParallel?: number

   659            maxVideosToGenerateInParallel: defaultMaxVideosToGenerateInParallel,
   660:         } = getDefaultSettingsState()
   661:         set({
   662            maxVideosToGenerateInParallel: getValidNumber(

   664              1,
   665:             HARD_LIMIT_NB_MAX_ASSETS_TO_GENERATE_IN_PARALLEL,
   666              defaultMaxVideosToGenerateInParallel

   669        },
   670:       setComfyClapWorkflowForImage: (
   671          comfyClapWorkflowForImage?: ClapWorkflow

   680            const newWorkflow = comfyClapWorkflowForImage
   681:           set({
   682              comfyClapWorkflowForImage: newWorkflow,

   691        },
   692:       setComfyClapWorkflowForVideo: (
   693          comfyClapWorkflowForVideo?: ClapWorkflow

   702            const newWorkflow = comfyClapWorkflowForVideo
   703:           set({
   704              comfyClapWorkflowForVideo: newWorkflow,

   713        },
   714:       setComfyWorkflowForVoice: (comfyWorkflowForVoice?: string) => {
   715:         set({
   716            comfyWorkflowForVoice: getValidComfyWorkflowTemplate(
   717              comfyWorkflowForVoice,
   718:             getDefaultSettingsState().comfyWorkflowForVoice
   719            ),

   721        },
   722:       setComfyWorkflowForSound: (comfyWorkflowForSound?: string) => {
   723:         set({
   724            comfyWorkflowForSound: getValidComfyWorkflowTemplate(
   725              comfyWorkflowForSound,
   726:             getDefaultSettingsState().comfyWorkflowForSound
   727            ),

   729        },
   730:       setComfyWorkflowForMusic: (comfyWorkflowForMusic?: string) => {
   731:         set({
   732            comfyWorkflowForMusic: getValidComfyWorkflowTemplate(
   733              comfyWorkflowForMusic,
   734:             getDefaultSettingsState().comfyWorkflowForMusic
   735            ),

   737        },
   738:       setComfyUiApiUrl: (comfyUiApiUrl?: string) => {
   739          const { comfyUiApiUrl: defaultComfyUiApiUrl } =
   740:           getDefaultSettingsState()
   741:         set({
   742            comfyUiApiUrl: getValidString(comfyUiApiUrl, defaultComfyUiApiUrl),

   744        },
   745:       setGradioApiUrlForAssistant: (gradioApiUrlForAssistant?: string) => {
   746:         set({
   747            gradioApiUrlForAssistant: getValidString(
   748              gradioApiUrlForAssistant,
   749:             getDefaultSettingsState().gradioApiUrlForAssistant
   750            ),

   752        },
   753:       setGradioApiUrlForImage: (gradioApiUrlForImage?: string) => {
   754:         set({
   755            gradioApiUrlForImage: getValidString(
   756              gradioApiUrlForImage,
   757:             getDefaultSettingsState().gradioApiUrlForImage
   758            ),

   760        },
   761:       setGradioApiUrlForVideo: (gradioApiUrlForVideo?: string) => {
   762:         set({
   763            gradioApiUrlForVideo: getValidString(
   764              gradioApiUrlForVideo,
   765:             getDefaultSettingsState().gradioApiUrlForVideo
   766            ),

   768        },
   769:       setGradioApiUrlForVoice: (gradioApiUrlForVoice?: string) => {
   770:         set({
   771            gradioApiUrlForVoice: getValidString(
   772              gradioApiUrlForVoice,
   773:             getDefaultSettingsState().gradioApiUrlForVoice
   774            ),

   776        },
   777:       setGradioApiUrlForSound: (gradioApiUrlForSound?: string) => {
   778:         set({
   779            gradioApiUrlForSound: getValidString(
   780              gradioApiUrlForSound,
   781:             getDefaultSettingsState().gradioApiUrlForSound
   782            ),

   784        },
   785:       setGradioApiUrlForMusic: (gradioApiUrlForMusic?: string) => {
   786:         set({
   787            gradioApiUrlForMusic: getValidString(
   788              gradioApiUrlForMusic,
   789:             getDefaultSettingsState().gradioApiUrlForMusic
   790            ),

   792        },
   793:       setScriptEditorShowLineNumbers: (
   794          scriptEditorShowLineNumbers: boolean
   795        ) => {
   796:         set({
   797            scriptEditorShowLineNumbers: getValidBoolean(
   798              scriptEditorShowLineNumbers,
   799:             getDefaultSettingsState().scriptEditorShowLineNumbers
   800            ),

   802        },
   803:       setScriptEditorShowMinimap: (scriptEditorShowMinimap: boolean) => {
   804:         set({
   805            scriptEditorShowMinimap: getValidBoolean(
   806              scriptEditorShowMinimap,
   807:             getDefaultSettingsState().scriptEditorShowMinimap
   808            ),

   810        },
   811:       setInterfaceSnapWindowsToGrid: (interfaceSnapWindowsToGrid: boolean) => {
   812:         set({
   813            interfaceSnapWindowsToGrid: getValidBoolean(
   814              interfaceSnapWindowsToGrid,
   815:             getDefaultSettingsState().interfaceSnapWindowsToGrid
   816            ),

   818        },
   819:       getRequestSettings: (): RequestSettings => {
   820          const state = get()
   821:         const defaultSettings = getDefaultSettingsState()
   822  
   823          const assistantWorkflow = parseWorkflow(
   824:           state.assistantWorkflow || defaultSettings.assistantWorkflow,
   825            ClapWorkflowCategory.ASSISTANT

   829            state.assistantTurboWorkflow ||
   830:             defaultSettings.assistantTurboWorkflow,
   831            ClapWorkflowCategory.ASSISTANT

   835            state.imageGenerationWorkflow ||
   836:             defaultSettings.imageGenerationWorkflow,
   837            ClapWorkflowCategory.IMAGE_GENERATION

   841            state.imageGenerationTurboWorkflow ||
   842:             defaultSettings.imageGenerationTurboWorkflow,
   843            ClapWorkflowCategory.IMAGE_GENERATION

   846          const imageFaceswapWorkflow = parseWorkflow(
   847:           state.imageFaceswapWorkflow || defaultSettings.imageFaceswapWorkflow,
   848            ClapWorkflowCategory.IMAGE_FACESWAP

   852            state.imageUpscalingWorkflow ||
   853:             defaultSettings.imageUpscalingWorkflow,
   854            ClapWorkflowCategory.IMAGE_UPSCALING

   857          const imageDepthWorkflow = parseWorkflow(
   858:           state.imageDepthWorkflow || defaultSettings.imageDepthWorkflow,
   859            ClapWorkflowCategory.IMAGE_DEPTH_MAPPING

   863            state.imageSegmentationWorkflow ||
   864:             defaultSettings.imageSegmentationWorkflow,
   865            ClapWorkflowCategory.IMAGE_SEGMENTATION

   869            state.videoGenerationWorkflow ||
   870:             defaultSettings.videoGenerationWorkflow,
   871            ClapWorkflowCategory.VIDEO_GENERATION

   874          const videoFaceswapWorkflow = parseWorkflow(
   875:           state.videoFaceswapWorkflow || defaultSettings.videoFaceswapWorkflow,
   876            ClapWorkflowCategory.VIDEO_FACESWAP

   879          const videoLipsyncWorkflow = parseWorkflow(
   880:           state.videoLipsyncWorkflow || defaultSettings.videoLipsyncWorkflow,
   881            ClapWorkflowCategory.VIDEO_LIPSYNC

   884          const videoDepthWorkflow = parseWorkflow(
   885:           state.videoDepthWorkflow || defaultSettings.videoDepthWorkflow,
   886            ClapWorkflowCategory.VIDEO_DEPTH_MAPPING

   890            state.videoSegmentationWorkflow ||
   891:             defaultSettings.videoSegmentationWorkflow,
   892            ClapWorkflowCategory.VIDEO_SEGMENTATION

   896            state.videoUpscalingWorkflow ||
   897:             defaultSettings.videoUpscalingWorkflow,
   898            ClapWorkflowCategory.VIDEO_UPSCALING

   902            state.soundGenerationWorkflow ||
   903:             defaultSettings.soundGenerationWorkflow,
   904            ClapWorkflowCategory.SOUND_GENERATION

   908            state.voiceGenerationWorkflow ||
   909:             defaultSettings.voiceGenerationWorkflow,
   910            ClapWorkflowCategory.VOICE_GENERATION

   914            state.musicGenerationWorkflow ||
   915:             defaultSettings.musicGenerationWorkflow,
   916            ClapWorkflowCategory.MUSIC_GENERATION

   923            comfyUiClientId:
   924:             state.comfyUiClientId || defaultSettings.comfyUiClientId,
   925            comfyUiHttpAuthLogin:
   926:             state.comfyUiHttpAuthLogin || defaultSettings.comfyUiHttpAuthLogin,
   927            comfyUiHttpAuthPassword:
   928              state.comfyUiHttpAuthPassword ||
   929:             defaultSettings.comfyUiHttpAuthPassword,
   930            replicateApiKey:
   931:             state.replicateApiKey || defaultSettings.replicateApiKey,
   932            comfyIcuApiKey:
   933:             state.comfyIcuApiKey || defaultSettings.comfyIcuApiKey,
   934            comfyIcuAccelerator:
   935:             state.comfyIcuAccelerator || defaultSettings.comfyIcuAccelerator,
   936            comfyDeployApiKey:
   937:             state.comfyDeployApiKey || defaultSettings.comfyDeployApiKey,
   938  
   939            huggingFaceApiKey:
   940:             state.huggingFaceApiKey || defaultSettings.huggingFaceApiKey,
   941  
   942:           clapperApiKey: state.clapperApiKey || defaultSettings.clapperApiKey,
   943  
   944:           aiTubeApiKey: state.aiTubeApiKey || defaultSettings.aiTubeApiKey,
   945  
   946:           falAiApiKey: state.falAiApiKey || defaultSettings.falAiApiKey,
   947            modelsLabApiKey:
   948:             state.modelsLabApiKey || defaultSettings.modelsLabApiKey,
   949:           openaiApiKey: state.openaiApiKey || defaultSettings.openaiApiKey,
   950:           groqApiKey: state.groqApiKey || defaultSettings.groqApiKey,
   951:           googleApiKey: state.googleApiKey || defaultSettings.googleApiKey,
   952            anthropicApiKey:
   953:             state.anthropicApiKey || defaultSettings.anthropicApiKey,
   954            elevenLabsApiKey:
   955:             state.elevenLabsApiKey || defaultSettings.elevenLabsApiKey,
   956:           cohereApiKey: state.cohereApiKey || defaultSettings.cohereApiKey,
   957            mistralAiApiKey:
   958:             state.mistralAiApiKey || defaultSettings.mistralAiApiKey,
   959:           kitsAiApiKey: state.kitsAiApiKey || defaultSettings.kitsAiApiKey,
   960            fireworksAiApiKey:
   961:             state.fireworksAiApiKey || defaultSettings.fireworksAiApiKey,
   962            stabilityAiApiKey:
   963:             state.stabilityAiApiKey || defaultSettings.stabilityAiApiKey,
   964:           letzAiApiKey: state.letzAiApiKey || defaultSettings.letzAiApiKey,
   965            bigModelApiKey:
   966:             state.bigModelApiKey || defaultSettings.bigModelApiKey,
   967:           piApiApiKey: state.piApiApiKey || defaultSettings.piApiApiKey,
   968:           civitaiApiKey: state.civitaiApiKey || defaultSettings.civitaiApiKey,
   969:           hotshotApiKey: state.hotshotApiKey || defaultSettings.hotshotApiKey,
   970            lumaLabsApiKey:
   971:             state.lumaLabsApiKey || defaultSettings.lumaLabsApiKey,
   972  

   974              state.broadcastObsServerHost ||
   975:             defaultSettings.broadcastObsServerHost,
   976            broadcastObsServerPort:
   977              state.broadcastObsServerPort ||
   978:             defaultSettings.broadcastObsServerPort,
   979            broadcastObsServerPass:
   980              state.broadcastObsServerPass ||
   981:             defaultSettings.broadcastObsServerPass,
   982  

   984              state.censorNotForAllAudiencesContent ||
   985:             defaultSettings.censorNotForAllAudiencesContent,
   986            imagePromptPrefix:
   987:             state.imagePromptPrefix || defaultSettings.imagePromptPrefix,
   988            imagePromptSuffix:
   989:             state.imagePromptSuffix || defaultSettings.imagePromptSuffix,
   990            imageNegativePrompt:
   991:             state.imageNegativePrompt || defaultSettings.imageNegativePrompt,
   992            videoPromptPrefix:
   993:             state.videoPromptPrefix || defaultSettings.videoPromptPrefix,
   994            videoPromptSuffix:
   995:             state.videoPromptSuffix || defaultSettings.videoPromptSuffix,
   996            videoNegativePrompt:
   997:             state.videoNegativePrompt || defaultSettings.videoNegativePrompt,
   998  

  1018              state.imageRenderingStrategy ||
  1019:             defaultSettings.imageRenderingStrategy,
  1020            imageDepthRenderingStrategy:
  1021              state.imageDepthRenderingStrategy ||
  1022:             defaultSettings.imageDepthRenderingStrategy,
  1023            imageSegmentationRenderingStrategy:
  1024              state.imageSegmentationRenderingStrategy ||
  1025:             defaultSettings.imageSegmentationRenderingStrategy,
  1026            imageUpscalingRenderingStrategy:
  1027              state.imageUpscalingRenderingStrategy ||
  1028:             defaultSettings.imageUpscalingRenderingStrategy,
  1029  

  1031              state.videoRenderingStrategy ||
  1032:             defaultSettings.videoRenderingStrategy,
  1033            videoDepthRenderingStrategy:
  1034              state.videoDepthRenderingStrategy ||
  1035:             defaultSettings.videoDepthRenderingStrategy,
  1036            videoSegmentationRenderingStrategy:
  1037              state.videoSegmentationRenderingStrategy ||
  1038:             defaultSettings.videoSegmentationRenderingStrategy,
  1039            videoUpscalingRenderingStrategy:
  1040              state.videoUpscalingRenderingStrategy ||
  1041:             defaultSettings.videoUpscalingRenderingStrategy,
  1042  

  1044              state.voiceRenderingStrategy ||
  1045:             defaultSettings.voiceRenderingStrategy,
  1046            soundRenderingStrategy:
  1047              state.soundRenderingStrategy ||
  1048:             defaultSettings.soundRenderingStrategy,
  1049            musicRenderingStrategy:
  1050              state.musicRenderingStrategy ||
  1051:             defaultSettings.musicRenderingStrategy,
  1052            maxImagesToGenerateInParallel:
  1053              state.maxImagesToGenerateInParallel ||
  1054:             defaultSettings.maxImagesToGenerateInParallel,
  1055            maxVideosToGenerateInParallel:
  1056              state.maxVideosToGenerateInParallel ||
  1057:             defaultSettings.maxVideosToGenerateInParallel,
  1058            comfyClapWorkflowForImage:
  1059              state.comfyClapWorkflowForImage ||
  1060:             defaultSettings.comfyClapWorkflowForImage,
  1061            comfyClapWorkflowForVideo:
  1062              state.comfyClapWorkflowForVideo ||
  1063:             defaultSettings.comfyClapWorkflowForVideo,
  1064            comfyWorkflowForVoice:
  1065              state.comfyWorkflowForVoice ||
  1066:             defaultSettings.comfyWorkflowForVoice,
  1067            comfyWorkflowForSound:
  1068              state.comfyWorkflowForSound ||
  1069:             defaultSettings.comfyWorkflowForSound,
  1070            comfyWorkflowForMusic:
  1071              state.comfyWorkflowForMusic ||
  1072:             defaultSettings.comfyWorkflowForMusic,
  1073  
  1074:           comfyUiApiUrl: state.comfyUiApiUrl || defaultSettings.comfyUiApiUrl,
  1075  

  1077              state.gradioApiUrlForAssistant ||
  1078:             defaultSettings.gradioApiUrlForAssistant,
  1079            gradioApiUrlForImage:
  1080:             state.gradioApiUrlForImage || defaultSettings.gradioApiUrlForImage,
  1081            gradioApiUrlForVideo:
  1082:             state.gradioApiUrlForVideo || defaultSettings.gradioApiUrlForVideo,
  1083            gradioApiUrlForVoice:
  1084:             state.gradioApiUrlForVoice || defaultSettings.gradioApiUrlForVoice,
  1085            gradioApiUrlForSound:
  1086:             state.gradioApiUrlForSound || defaultSettings.gradioApiUrlForSound,
  1087            gradioApiUrlForMusic:
  1088:             state.gradioApiUrlForMusic || defaultSettings.gradioApiUrlForMusic,
  1089            scriptEditorShowLineNumbers:
  1090              state.scriptEditorShowLineNumbers ||
  1091:             defaultSettings.scriptEditorShowLineNumbers,
  1092            scriptEditorShowMinimap:
  1093              state.scriptEditorShowMinimap ||
  1094:             defaultSettings.scriptEditorShowMinimap,
  1095            interfaceSnapWindowsToGrid:
  1096              state.interfaceSnapWindowsToGrid ||
  1097:             defaultSettings.interfaceSnapWindowsToGrid,
  1098          }

  1101      {
  1102:       name: 'CLAPPER_REVISION_0_CONTROLLERS_USE_SETTINGS',
  1103      }

packages\app\src\services\simulator\useSimulator.ts:
   7  
   8: export const useSimulator = create<SimulatorStore>((set, get) => ({
   9    ...getDefaultSimulatorState(),

  20  
  21:     set({ isRunning })
  22      return isRunning

packages\app\src\services\ui\getDefaultUIState.ts:
   2    ProjectCreationWizardStep,
   3:   SettingsCategory,
   4    UIState,

  14      showApiKeys: false,
  15:     showSettings: SettingsCategory.NONE,
  16      showImporter: false,

packages\app\src\services\ui\useTheme.ts:
  4  
  5: export function useTheme(): UITheme {
  6    const getTheme = useUI((s) => s.getTheme)

packages\app\src\services\ui\useUI.ts:
   9    ScriptEditorStore,
  10:   SettingsCategory,
  11    UIStore,

  18  import { useScriptEditor } from '../editors/script-editor/useScriptEditor'
  19: import { TimelineStore, useTimeline } from '@aitube/timeline'
  20  

  22    persist(
  23:     (set, get) => ({
  24        ...getDefaultUIState(),
  25:       setIsTopMenuOpen: (isTopMenuOpen: boolean) => {
  26:         set({ isTopMenuOpen })
  27        },
  28:       setShowWelcomeScreen: (showWelcomeScreen: boolean) => {
  29:         console.log('setShowWelcomeScreen called with:', showWelcomeScreen)
  30:         set({ showWelcomeScreen: showWelcomeScreen })
  31        },
  32:       setHasBetaAccess: (hasBetaAccess: boolean) => {
  33:         set({ hasBetaAccess })
  34        },
  35:       setThemeName: (themeName: UIThemeName) => {
  36:         set({ themeName })
  37          get().applyThemeToComponents()

  40          const scriptEditor: ScriptEditorStore = useScriptEditor.getState()
  41:         const timeline: TimelineStore = useTimeline.getState()
  42  

  45          // update the editor's theme
  46:         scriptEditor.monaco?.editor?.setTheme?.(theme.id)
  47  
  48:         timeline.setTimelineTheme(theme.timeline)
  49          // update the timeline's theme

  57        },
  58:       setShowApiKeys: (showApiKeys: boolean) => {
  59:         set({ showApiKeys })
  60        },
  61:       setShowSettings: (showSettings: SettingsCategory) => {
  62:         set({ showSettings })
  63        },
  64:       setShowImporter: (showImporter: boolean) => {
  65:         set({ showImporter })
  66        },
  67:       setShowTimeline: (showTimeline: boolean) => {
  68:         set({ showTimeline })
  69        },
  70:       setShowExplorer: (showExplorer: boolean) => {
  71:         set({ showExplorer })
  72        },
  73:       setShowVideoPlayer: (showVideoPlayer: boolean) => {
  74:         set({ showVideoPlayer })
  75        },
  76:       setShowAssistant: (showAssistant: boolean) => {
  77:         set({ showAssistant })
  78        },
  79:       setShowFPS: (showFPS: boolean) => {
  80:         set({ showFPS })
  81        },
  82:       setFollowCursor: (followCursor: boolean) => {
  83:         set({ followCursor })
  84        },
  85:       setEditorFontSize: (editorFontSize: number) => {
  86:         set({ editorFontSize })
  87        },
  88:       setWindowLayout: (windowLayout: UIWindowLayout) => {
  89:         set({ windowLayout })
  90        },
  91:       setProjectCreationWizardStep: (
  92          projectCreationWizardStep: ProjectCreationWizardStep
  93        ) => {
  94:         set({ projectCreationWizardStep })
  95        },

packages\app\src\services\windows\types.ts:
  23    gridAttractionAreaInPixels: number
  24:   setSnapToGrid: (snapToGrid: boolean) => void
  25:   setGridWidthInPercent: (gridWidthInPercent: number) => void
  26:   setGridHeightInPercent: (gridHeightInPercent: number) => void
  27:   setGridAttractionAreaInPixels: (gridAttractionAreaInPixels: number) => void
  28    getNextPosition: (width: number, height: number) => { x: number; y: number }

packages\app\src\services\windows\useWindows.ts:
    5  
    6: export const useWindows = create<WindowsStore>((set, get) => ({
    7    windows: {},

   12  
   13:   setSnapToGrid: (snapToGrid: boolean) => set({ snapToGrid }),
   14:   setGridWidthInPercent: (gridWidthInPercent: number) =>
   15:     set({ gridWidthInPercent }),
   16:   setGridHeightInPercent: (gridHeightInPercent: number) =>
   17:     set({ gridHeightInPercent }),
   18:   setGridAttractionAreaInPixels: (gridAttractionAreaInPixels: number) =>
   19:     set({ gridAttractionAreaInPixels }),
   20  

   23      const existingWindows = Object.values(state.windows)
   24:     const defaultOffset = 100 // Offset for cascading windows
   25      let newX = 0

   43  
   44:       newX += defaultOffset
   45:       newY += defaultOffset
   46  
   47:       // Reset position if it goes too far
   48        if (newX > 300 || newY > 300) {

   58    addWindow: (win) =>
   59:     set((state) => {
   60        const maxZIndex = Math.max(

  144  
  145:       set((state) => ({
  146          windows: {

  157      } else {
  158:       set((state) => ({
  159          windows: {

  204  
  205:       set((state) => ({
  206          windows: {

  211      } else {
  212:       set((state) => ({
  213          windows: {

  221    updateWindow: (id, updates) => {
  222:     set((state) => ({
  223        windows: {

  232    removeWindow: (id) =>
  233:     set((state) => {
  234        const { [id]: _, ...rest } = state.windows

  237    focusWindow: (id) =>
  238:     set((state) => {
  239        const maxZIndex = Math.max(

packages\broadway\.gitignore:
  4  
  5: .age_and_gender_dataset_cache
  6  

packages\broadway\package.json:
   9    "scripts": {
  10:     "test": "bun test --preload ./src/tests/setup.js",
  11      "build": "bun build ./src/index.ts --outfile=dist/index.js --external=@aitube/clap --external=@aitube/colors && bun run build:declaration",

packages\broadway\samples\scripts\Afterglow v10 X Rewrite Bryan E. Harris 2023.txt:
  137  REN's face on the screen cycles through surprise and then
  138: settles into disappointment.
  139  

  330  In the backseat, a younger Sarah disconnects momentarily from
  331: her AR/VR headset.
  332                                                             7.

  392  REN's face on the screen cycles through surprise and then
  393: settles into disappointment, a man once at the pinnacle now
  394  grappling with loss on multiple fronts.

  446  
  447: They set off, the shuttle seamlessly merging with the morning
  448  cityscape.

  849                      ROCKET
  850:           "Do I unsettle you, Ren?"
  851  

packages\broadway\samples\scripts\LICENCE.txt:
  16  
  17: Creative Commons public licenses provide a standard set of terms and
  18  conditions that creators and other rights holders may use to share

packages\broadway\src\index.ts:
  44    getSound, parseSounds,
  45:   parseTransition, transitions,
  46    createOccurrenceCounter, createParser, createSimpleParser, getParserItemFromLabel,

  57    type Screenplay,
  58:   type AssetType,
  59:   type AssetCategory,
  60:   type TemporaryAssetData,
  61  } from "./types"

packages\broadway\src\types.ts:
   96  
   97: export type AssetType =
   98    | "Direction"

  102  
  103: export type AssetCategory =
  104    | "character"

  108  
  109: export type TemporaryAssetData = {
  110:   id: string // unique identifier of the assets (UUID)
  111:   type: AssetType
  112:   category: AssetCategory
  113:   label: string // the asset name (eg. in the script)
  114    content: string // url to the resource, or content string
  115:   occurrences: number // how many times we see this asset
  116    sequences: ScreenplaySequence[]

packages\broadway\src\analysis\analyzeName.ts:
  42    // TODO: we can pass a second parameter, the reference year,
  43:   // which could be the year in which the movie is set
  44    const stats = await guessAgeAndGender(value.name) // <- pass the reference year!

packages\broadway\src\analysis\analyzeScreenplay.ts:
    2  
    3: import { Screenplay, TemporaryAssetData } from "@/types"
    4  import { pick } from "@/utils"

    8  import { onlyContainsStrangeNumber } from "@/utils/onlyContainsStrangeNumber"
    9: import { parseTransition } from "@/parsers/transitions/parseTransition"
   10  import { ScreenplaySequenceType } from "@/constants/screenplaySequences"

   48    // this is only used during analysis
   49:   const assetsByLabel: Record<string, TemporaryAssetData> = {}
   50    

   92    // this should greatly improve the visual quality of a scene
   93:   // however this can also proves an issue if we do not reset it at the right time
   94  

  146      */
  147:     getEntities(sequence.location).map(uppercaseAssetName => {
  148  

  151  
  152:       const existingOccurrences = assetsByLabel[uppercaseAssetName]?.occurrences || 0
  153  
  154:       const existingAsset = assetsByLabel[uppercaseAssetName]
  155:       const existingAssetSequences = existingAsset?.sequences || []
  156  
  157:       assetsByLabel[uppercaseAssetName] = {
  158:         id: UUID(), // unique identifier of the assets (UUID)
  159          type: "Description",
  160          category: "location",
  161:         label: uppercaseAssetName, // the asset name (eg. in the script)
  162:         content: uppercaseAssetName, // url to the resource, or content string
  163          occurrences:  1 + existingOccurrences,
  164:         sequences: existingAssetSequences.concat(
  165:           existingAssetSequences.find(s => s.id === sequence.id)
  166              ? []

  170        }
  171:       if (!entitiesByScreenplayLabel[uppercaseAssetName]) {
  172          const newEnt = newEntity({
  173            category: ClapSegmentCategory.LOCATION,
  174:           triggerName: uppercaseAssetName, // uppercase
  175:           label: uppercaseAssetName,
  176  

  216            // that's because a transition is an "in-between" event
  217:           const transition = parseTransition(event.description)
  218            if (transition) {

  265  
  266:             // we reset those for each shot
  267              currentShotType = ""

  500  
  501:           for (const rawUppercaseAssetName of getEntities(event.character)) {
  502:             // note: the "uppercaseAssetName" might be something like "JOHN'S VOICE"
  503              // which is why we normalize it, and convert it to a smaller characterName
  504:             const characterName = parseCharacterName(rawUppercaseAssetName)
  505:             const existingAsset = assetsByLabel[characterName]
  506:             const existingOccurrences = existingAsset?.occurrences || 0
  507:             const existingAssetSequences = existingAsset?.sequences || []
  508        
  509:             // console.log("trigger name identified:", uppercaseAssetName)
  510:             assetsByLabel[characterName] = {
  511:               id: UUID(), // unique identifier of the assets (UUID)
  512                type: "Description",
  513                category: "character",
  514:               label: characterName, // the asset name (eg. in the script)
  515                content: characterName, // url to the resource, or content string
  516                occurrences: 1 + existingOccurrences,
  517:               sequences: existingAssetSequences.concat(
  518:                 existingAssetSequences.find(s => s.id === sequence.id)
  519                    ? []

  734    //   await onProgress?.(progress += 10, "Imagining entities (will take a while)..")
  735:   //   for (const [name, asset] of Object.entries(assetsByLabel)) {
  736  // 

  743  // 
  744:   //     let description = await analyzeAsset({
  745:   //       asset,
  746    //     

packages\broadway\src\analysis\getEntityAnalysisPrompt.ts:
   1: import { TemporaryAssetData } from "@/types"
   2  

  31    name,
  32:   asset,
  33    movieGenreLabel = "generic",

  36    name: string
  37:   asset: TemporaryAssetData
  38    movieGenreLabel?: string

  45  
  46:   const sequences = asset.sequences.map(s => s.fullText)
  47    const firstStoryFragment = sequences.slice(0, nbMaxStoryFragments)

  59  # mission
  60: You are an expert at analyzing movie scripts, and you need to write a spec to explain how does the ${asset.category} "${name}" looks like (note: it's possible the name contains a typo, no need to tell us about it)
  61  Please give your answer in a very dense manner, about 2 sentences.
  62  You need to describe anything that can be useful for someone else to draw or paint this "${name}":
  63: ${asset.category === "character" ? characterSpecific : locationSpecific}
  64  # examples
  65  Here are a few examples, but don’t copy them verbatim! They are taken from a pirate movie, which may be different from the current project:
  66: - "FORT CHARLES JAIL CELLS": "British colonial fortress, buccaneering period, indoor setting, adjacent to cells, rectangular shape with stone and brick walls, gray color, lighting from torches, wooden beds, iron bars with damage, chain padlock, rusty metal lockers, cobblestone diamond patterned stone floor"
  67  - "PORT ROYAL TOWN ALLEY": "urban, golden age of piracy, coastal city (Port Royal, Jamaica), alleyway in a semi-deserted neighborhood, brick walls, metal strips for street signs, fog, low light levels, wooden doors, asphalt, striped path leading to a blacksmith shop with barn doors, sign located above the entrance."

  72  - "LEON": "leon, caucasian, male, 25 years old, 180cm tall, athletic build, sharp facial features, chiseled jawline, high cheekbones, angular nose, thin lips, piercing blue eyes, short black hair, slightly spiked, fair complexion"
  73: - "LAVINGTON GALLERY": "contemporary era, neoclassical architecture, indoor setting, located in a city, glass ceiling, marble floor, white walls, spotlight illumination, paintings with vibrant colors, Greek columns, polished concrete structure, security cameras with red lights, students with hoodies or sunglasses, tour guides, staff-only doors"
  74  - "SASHA": "female, caucasian, mid-30s, tall, slender, angular features, high cheekbones, sharp jawline, piercing green eyes, platinum blonde hair styled in a sleek bob, fair complexion, wears a fitted black suit with a white blouse, black pumps, and a black clutch purse"
  75  # final guidelines
  76: Remember, be synthetic, and don't recopy examples identically! do not talk about the purpose, objectives, meaning.. of the ${asset.category}.
  77  We do not need an encyclopedic description, we need a VISUAL description. 

packages\broadway\src\analysis\guessAgeAndGender.ts:
  2  
  3: import { loadAgeGenderNameStats, state } from "./loadAgeAndGenderDataset"
  4  import { normalizeName } from "./normalizeName"

packages\broadway\src\analysis\loadAgeAndGenderDataset.ts:
  22  
  23: const DEFAULT_DOWNLOAD_URL = `https://clapper.app/datasets/${fileName}`
  24  
  25  // note: this takes about 140 Mb of memory
  26: // we store the dataset inside a big JSON in the IndexedDB
  27  export async function loadAgeGenderNameStats(url = DEFAULT_DOWNLOAD_URL) : Promise<Record<string, AgeNameGenderStats[]>> {

  56  
  57:   console.log(`downloading age and gender detection dataset from Hugging Face (jbilcke-hf/detection-of-age-and-gender)`)
  58    try {

  81    } catch (err) {
  82:     console.error(`failed to fetch the dataset (${err})`)
  83  

  88  
  89:     console.log(`trying to save the dataset to the browser's IndexedDB for faster reload`)
  90  

packages\broadway\src\analysis\parseScenes.ts:
  181  
  182:         // need to reset this!
  183          currentDialogueAction = ""

  222  
  223:         // reset the last character
  224          lastCharacter = ""

packages\broadway\src\factories\createSegment.ts:
    1  // this is a deprecated module, we should get rid of it
    2: import { getSegment, segmentCategories, ClapSegmentCategorySettings } from "@aitube/colors"
    3  

   65        ].includes(item.id)
   66:   ) as ClapSegmentCategorySettings[]
   67  

   70      ? getSegment(categoryName)
   71:     : pick<ClapSegmentCategorySettings>(segmentCategoriesExceptVisuals)
   72  

  113      // status: "to_generate",
  114:    // assetUrl: "",
  115:     // assetDurationInMs: 0,
  116  
  117      // default is 1, 0 is mute, 2 is double the volume
  118:     // gain can be set to a minimum of about -3.4028235E38 and a max of about 3.4028235E38
  119      // outputGain: 1, 

packages\broadway\src\parsers\index.ts:
  22  export { getSound, parseSounds } from "./sounds"
  23: export { parseTransition, transitions } from "./transitions"
  24  export { createOccurrenceCounter, createParser, createSimpleParser, getParserItemFromLabel } from "./utils"

packages\broadway\src\parsers\eras\database.ts:
  320          "western territories",
  321:         "Arizona settlers",
  322          "the great plains",

packages\broadway\src\parsers\transitions\index.ts:
  1: export { parseTransition } from "./parseTransition"
  2  export { transitions } from "./transitions"

packages\broadway\src\parsers\transitions\parseTransition.ts:
  2  
  3: export function parseTransition(originalLine: string): string {
  4  

packages\broadway\src\parsers\utils\createSimpleParser.ts:
  29      // used for deduplication
  30:     const dedup = new Set<string>()
  31  

packages\broadway\src\tests\main.test.ts:
  25  
  26:   // parsing a script will be slow the first time, as we need to download a dataset
  27    // example:
  28:   // first time (need to download the dataset): [7.40s]
  29:   // second time (with the dataset cached): [839.00ms]
  30    //

packages\broadway\src\utils\sleep.ts:
  2    new Promise((resolve) => {
  3:     setTimeout(() => {
  4        resolve(true)

packages\clap\README.md:
   27    ClapAuthor,
   28:   ClapAssetSource,
   29    ClapEntityGender,

   75    generateSeed,
   76:   getClapAssetSourceType,
   77    getValidNumber,

   92    buildEntityIndex,
   93:   filterAssets,
   94    filterSegmentsByCategory,

   96    getEmptyClap,
   97:   removeGeneratedAssetUrls,
   98  

  118  
  119: clap.segments.at(64).assetUrl = await generateVideoWithAI(....)
  120  

packages\clap\src\index.ts:
   1  export {
   2:   ClapAssetSource,
   3    ClapAuthor,

  60    generateSeed,
  61:   getClapAssetSourceType,
  62    getValidNumber,

  79    buildEntityIndex,
  80:   filterAssets,
  81    filterSegmentsByCategory,

  83    getEmptyClap,
  84:   removeGeneratedAssetUrls,
  85  } from '@/helpers'

packages\clap\src\types.ts:
  135  
  136:   // image asset
  137    IMAGE = "IMAGE",

  144  
  145:   // video asset
  146    VIDEO = "VIDEO",

  153  
  154:   // audio asset
  155    AUDIO = "AUDIO"

  172  
  173: export enum ClapAssetSource {
  174    REMOTE = "REMOTE", // http:// or https://
  175  
  176:   // note that "path" assets are potentially a security risk, they need to be treated with care
  177    PATH = "PATH", // a file path eg. /path or ./path/to/ or ../path/to/

  468     */
  469:   assetUrl: string
  470  
  471    /**
  472:    * The duration of the asset itself.
  473     * 
  474     * This might be different from the segment itself,
  475:    * for instance if the asset has a zero length (a storyboard),
  476:    * or if the asset is longer (eg. a cropped audio file)
  477     */
  478:   assetDurationInMs: number
  479:   assetSourceType: ClapAssetSource
  480:   assetFileFormat: string 
  481  

  497    /**
  498:    * The seed used to generate the asset data/value.
  499     * 

  692  // note: it could be argued that image filtering and upscaling
  693: // are both subsets of the same general concept of "image to image"
  694  // and.. yes, that's true!

  779     * Can be hosted on a remote server or in base64
  780:    * (we could use a "ClapAssetSource" here too, but the thumbnail is not
  781     * used within a workflow so there is no need to do any kind of precise optimization or verification here)

  873     * Can be hosted on a remote server or in base64
  874:    * (we could use a "ClapAssetSource" here too, but the thumbnail is not
  875     * used within a workflow so there is no need to do any kind of precise optimization or verification here)

  881     * 
  882:    * This can be used to reproduce the settings (eg. reproduce the image
  883     * from the image prompt, by re-using the same seed)

  894     */
  895:   imageSourceType: ClapAssetSource
  896  

  921     */
  922:   audioSourceType: ClapAssetSource
  923  

packages\clap\src\factories\newEntity.ts:
   1: import { ClapAssetSource, ClapEntity, ClapEntityAppearance, ClapEntityAudioEngine, ClapEntityGender, ClapEntityRegion, ClapSegmentCategory } from "@/types"
   2  import { generateSeed } from "@/utils/generateSeed"

  20      imagePrompt: typeof maybeEntity?.imagePrompt === "string" ? maybeEntity.imagePrompt : "",
  21:     imageSourceType: typeof maybeEntity?.imageSourceType === "string" ? (maybeEntity.imageSourceType as ClapAssetSource) : ClapAssetSource.EMPTY,
  22      imageEngine: typeof maybeEntity?.imageEngine === "string" ? maybeEntity.imageEngine : "", 

  24      audioPrompt: typeof maybeEntity?.audioPrompt === "string" ? maybeEntity.audioPrompt : "",
  25:     audioSourceType: typeof maybeEntity?.audioSourceType === "string" ? (maybeEntity.audioSourceType as ClapAssetSource) : ClapAssetSource.EMPTY,
  26      audioEngine: typeof maybeEntity?.audioEngine === "string" ? (maybeEntity.audioEngine as ClapEntityAudioEngine) : "Parler-TTS",

packages\clap\src\factories\newSegment.ts:
   1: import { ClapAssetSource, ClapOutputType, ClapSegment, ClapSegmentStatus } from "@/types"
   2  import { isValidNumber } from "@/utils/isValidNumber"

  14  
  15:   const assetDurationInMs =
  16:     isValidNumber(maybeSegment?.assetDurationInMs)
  17:     ? (maybeSegment?.assetDurationInMs || 0)
  18      : 1000

  22      ? (maybeSegment?.endTimeInMs || 0)
  23:     : (startTimeInMs + assetDurationInMs)
  24  

  42      status: typeof maybeSegment?.status === "string" ? maybeSegment.status : ClapSegmentStatus.TO_GENERATE,
  43:     assetUrl: typeof maybeSegment?.assetUrl === "string" ? maybeSegment.assetUrl : "",
  44:     assetDurationInMs: isValidNumber(assetDurationInMs) ? assetDurationInMs : 0,
  45:     assetSourceType: typeof maybeSegment?.assetSourceType === "string" ? maybeSegment.assetSourceType : ClapAssetSource.EMPTY,
  46:     assetFileFormat: typeof maybeSegment?.assetFileFormat === "string" ? maybeSegment.assetFileFormat : "",
  47      revision: isValidNumber(maybeSegment?.revision) ? (maybeSegment?.revision || 0) : 0,

packages\clap\src\helpers\filterAssets.ts:
   2  import { serializeClap } from "@/io/serializeClap"
   3: import { ClapAssetSource, ClapProject, ClapSegmentCategory, ClapSegmentStatus } from "@/types"
   4  
   5  /**
   6:  * Keep or remove segment assets, by category
   7   * 

   9   * 
  10:  * The original is NOT modifed by default, unless you set: `modifyOriginal: true`
  11   * which will clone the whole clap project
  12   */
  13: export async function filterAssets({
  14    clap,

  29      const newClap = await parseClap(tmp)
  30:     return filterAssets({
  31        clap: newClap,

  45        if (typeof categories[segment.category] === "boolean" && categories[segment.category]) {
  46:         segment.assetUrl = segment.assetUrl
  47        } else {
  48:         segment.assetUrl = ""
  49          if (updateStatus) {
  50            segment.status = ClapSegmentStatus.TO_GENERATE
  51:           segment.assetDurationInMs = 0
  52:           segment.assetSourceType = ClapAssetSource.EMPTY
  53:           segment.assetFileFormat = ""
  54          }

  57        if (typeof categories[segment.category] === "boolean" && !categories[segment.category]) {
  58:         segment.assetUrl = ""
  59          if (updateStatus) {
  60            segment.status = ClapSegmentStatus.TO_GENERATE
  61:           segment.assetDurationInMs = 0
  62:           segment.assetSourceType = ClapAssetSource.EMPTY
  63:           segment.assetFileFormat = ""
  64          }
  65        } else {
  66:         segment.assetUrl = segment.assetUrl
  67        }

packages\clap\src\helpers\filterSegmentsByCategory.ts:
   9   * 
  10:  * The original is NOT modifed by default, unless you set: `modifyOriginal: true`
  11   * which will clone the whole clap project

packages\clap\src\helpers\generateClapFromSimpleStory.ts:
  70        // status: ClapSegmentStatus
  71:       // assetUrl: string
  72:       // assetDurationInMs: number
  73        // createdBy: ClapAuthor

packages\clap\src\helpers\index.ts:
  1  export { buildEntityIndex } from '@/helpers/buildEntityIndex'
  2: export { filterAssets } from '@/helpers/filterAssets'
  3  export { filterSegmentsByCategory } from '@/helpers/filterSegmentsByCategory'

  5  export { generateClapFromSimpleStory } from '@/helpers/generateClapFromSimpleStory'
  6: export { removeGeneratedAssetUrls } from '@/helpers/removeGeneratedAssetUrls'

packages\clap\src\helpers\removeGeneratedAssetUrls.ts:
   3  // return a new clap (but in a memory efficient way: it will hold references to the original)
   4: // with all the generated, partially generated or in-erorr segments stripped of their assetUrl
   5  //

   8  // note: please make sure you don't accidentally have segments
   9: // with status TO_GENERATE and something in assetUrl
  10: export function removeGeneratedAssetUrls(
  11    clap: ClapProject,

  26          ? segment
  27:         : { ...segment, assetUrl: '' }
  28        )

packages\clap\src\io\parseClap.ts:
  122        const decompressedOutput = new Response(decompressedStream)
  123:       // decompressedOutput.headers.set("Content-Type", "application/x-gzip")
  124        if (debug) {

packages\clap\src\io\serializeClap.ts:
  84     
  85:    response.headers.set("Content-Type", "application/x-gzip")
  86  

packages\clap\src\io\updateClap.ts:
  108        // note: sometimes a segment is marked as "completed" but is actually
  109:       // empty when it comes to the assetUrl.. that is perfectly fine!
  110        // it just means that its value is held somewhere else, and that we shouldn't touch it

packages\clap\src\sanitizers\sanitizeEntity.ts:
   1: import { ClapAssetSource, ClapEntity, ClapEntityAppearance, ClapEntityAudioEngine, ClapEntityGender, ClapEntityRegion } from "@/types";
   2  import { generateSeed, isValidNumber, parseSegmentCategory, UUID } from "@/utils";

  37      imagePrompt: typeof imagePrompt === "string" ? imagePrompt : "",
  38:     imageSourceType: typeof imageSourceType === "string" ? (imageSourceType as ClapAssetSource) : ClapAssetSource.EMPTY,
  39      imageEngine: typeof imageEngine === "string" ? imageEngine : "", 

  41      audioPrompt: typeof audioPrompt === "string" ? audioPrompt : "",
  42:     audioSourceType: typeof audioSourceType === "string" ? (audioSourceType as ClapAssetSource) : ClapAssetSource.EMPTY,
  43      audioEngine: typeof audioEngine === "string" ? (audioEngine as ClapEntityAudioEngine) : "Parler-TTS",

packages\clap\src\sanitizers\sanitizeSegment.ts:
   1: import { ClapAssetSource, ClapOutputType, ClapSegment, ClapSegmentStatus } from "@/types"
   2  import { generateSeed, isValidNumber, parseOutputType, parseSegmentCategory, UUID } from "@/utils"

  21      status,
  22:     assetUrl,
  23:     assetDurationInMs,
  24:     assetSourceType,
  25:     assetFileFormat,
  26      revision,

  38      startTimeInMs: isValidNumber(startTimeInMs) ? (startTimeInMs || 0) : 0,
  39:     endTimeInMs: isValidNumber(assetDurationInMs) ? (endTimeInMs || 0) : 0,
  40      category: parseSegmentCategory(category),

  50      status: typeof status === "string" ? status : ClapSegmentStatus.TO_GENERATE,
  51:     assetUrl: typeof assetUrl === "string" ? assetUrl : "",
  52:     assetDurationInMs: isValidNumber(assetDurationInMs) ? (assetDurationInMs || 0) : 0,
  53:     assetSourceType: typeof assetSourceType === "string" ? assetSourceType : ClapAssetSource.EMPTY,
  54:     assetFileFormat: typeof assetFileFormat === "string" ? assetFileFormat : "",
  55      revision: isValidNumber(revision) ? (revision || 0) : 0,

packages\clap\src\utils\getClapAssetSourceType.ts:
   1: import { ClapAssetSource } from "@/types"
   2  
   3: export function getClapAssetSourceType(input: string = ""): ClapAssetSource {
   4    

   7    if (!str || !str.length) {
   8:     return ClapAssetSource.EMPTY
   9    }

  11    if (str.startsWith("https://") || str.startsWith("http://")) {
  12:     return ClapAssetSource.REMOTE
  13    }
  14  
  15:   // note that "path" assets are potentially a security risk, they need to be treated with care
  16    if (str.startsWith("/") || str.startsWith("../") || str.startsWith("./")) {
  17:     return ClapAssetSource.PATH
  18    }

  20    if (str.startsWith("data:")) {
  21:     return ClapAssetSource.DATA
  22    }
  23  
  24:   return ClapAssetSource.PROMPT
  25  }

packages\clap\src\utils\index.ts:
  3  export { generateSeed } from '@/utils/generateSeed'
  4: export { getClapAssetSourceType } from '@/utils/getClapAssetSourceType'
  5  export { getValidNumber } from '@/utils/getValidNumber'

packages\clapper-services\src\audio.ts:
  21    stop: () => void
  22:   setUserDefinedGain: (userDefinedGain: number) =>  void
  23:   setCurrentGain: (currentGain: number) => void
  24    mute: () => void

  52  
  53:   // the original value that was set to the segment
  54    originalGain: number

packages\clapper-services\src\base-types.ts:
  28  
  29: export enum SettingsCategory {
  30    NONE = "NONE",

packages\clapper-services\src\editors.ts:
  14  export type EditorsControls = {
  15:   setView: (editorView: EditorView) => void
  16  }

packages\clapper-services\src\entity-editor.ts:
  10  export type EntityEditorControls = {
  11:   setDraft: (draft?: ClapEntity) => void
  12    selectEntity: (id: string) => void

  14    removeEntity: (id: string) => void
  15:   setShowEntityList: (showEntityList: boolean) => void
  16  } & VersionControls<ClapEntity>

packages\clapper-services\src\filter-editor.ts:
  27  
  28:   setEnabled: (isEnabled: boolean) => void
  29  

packages\clapper-services\src\index.ts:
   29    ChatHistory,
   30:   SettingsCategory,
   31    ComfyIcuAccelerator,

   63    ResolverService,
   64:   SettingsService,
   65    SimulatorService,

  131    ClapperPluginCategory,
  132:   ClapperPluginSettingType,  
  133:   ClapperPluginSettingBase,
  134:   ClapperPluginSettingString,
  135:   ClapperPluginSettingNumber,
  136:   ClapperPluginSettingBoolean,
  137:   ClapperPluginSetting,
  138:   ClapperPluginSettings,
  139    ClapperPluginMeta,

  185  export {
  186:   BaseSettings,
  187:   RequestSettings,
  188:   SettingsState,
  189:   SettingsControls,
  190:   SettingsStore
  191: } from "./settings"
  192  

packages\clapper-services\src\monitor.ts:
  11  
  12:   setStaticVideoRef: (staticVideoRef: HTMLVideoElement) => void
  13  
  14:   setIsEmbedded: (isEmbedded: boolean) => void
  15    

  35  
  36:   setLastTimelineUpdateAtInMs: (lastTimelineUpdateAtInMs: number) => void
  37  }

packages\clapper-services\src\plugin.ts:
   9  
  10: export enum ClapperPluginSettingType {
  11    STRING = "STRING",

  15  
  16: export type ClapperPluginSettingBase = {
  17    key: string

  19  }
  20: export type ClapperPluginSettingString = {
  21    value: string
  22    defaultValue: string
  23:   type: ClapperPluginSettingType.STRING
  24  }
  25: export type ClapperPluginSettingNumber = {
  26    value: number
  27    defaultValue: number
  28:   type: ClapperPluginSettingType.NUMBER
  29  }
  30: export type ClapperPluginSettingBoolean = {
  31    value: boolean
  32    defaultValue: boolean
  33:   type: ClapperPluginSettingType.BOOLEAN
  34  }
  35: export type ClapperPluginSetting =
  36: ClapperPluginSettingBase &
  37    (
  38:     ClapperPluginSettingString |
  39:     ClapperPluginSettingNumber |
  40:     ClapperPluginSettingBoolean
  41    )
  42  
  43: export type ClapperPluginSettings = ClapperPluginSetting[]
  44  

  55  
  56:   // a list of settings for this plugin
  57:   settings: ClapperPluginSetting[]
  58  

  71    // direct URL to the .js file for fetch and injection
  72:   assetUrl: string
  73  }

packages\clapper-services\src\plugins.ts:
   5    ClapperPluginMeta,
   6:   ClapperPluginSettings,
   7  } from "./plugin"

  17    /**
  18:    * Load the plugin settings saved by the user
  19     * 

  22     */
  23:   getSettings: () => Promise<ClapperPluginSettings>
  24  }

  39    pluginApiGetServices: (id: string) => Promise<PublicServices>
  40:   pluginApiGetSettings: (id: string) => Promise<ClapperPluginSettings>
  41  

packages\clapper-services\src\renderer.ts:
   4   * those are the currently active rendering strategies determined by the renderer
   5:  * this is different from the image rendering preferences (what the user has set)
   6   */

  62  
  63:   setUserDefinedRenderingStrategies: (strategies: RenderingStrategies) => void
  64  

  86  
  87:   setDataUriBuffer1: (dataUriBuffer1?: TimelineSegment) => void
  88:   setDataUriBuffer2: (dataUriBuffer2?: TimelineSegment) => void
  89:   setActiveBufferNumber: (activeBufferNumber: number) => void
  90  

packages\clapper-services\src\script-editor.ts:
  42  export type ScriptEditorControls = {
  43:   setMonaco: (monaco?: Monaco) => void
  44:   setTextModel: (textModel?: MonacoEditor.editor.ITextModel) => void
  45:   setStandaloneCodeEditor: (standaloneCodeEditor?: MonacoEditor.editor.IStandaloneCodeEditor) => void
  46:   setMouseIsInside: (mouseIsInside: boolean) => void
  47    loadDraftFromClap: (clap: ClapProject) => void

packages\clapper-services\src\services.ts:
  18  import { AudioStore } from "./audio"
  19: import { SettingsStore } from "./settings"
  20  import { SimulatorStore } from "./simulator"

  38  export type ResolverService = UseBoundStore<StoreApi<ResolverStore>>
  39: export type SettingsService = UseBoundStore<StoreApi<SettingsStore>>
  40  export type SimulatorService = UseBoundStore<StoreApi<SimulatorStore>>

  48    plugins: PluginsService
  49:   settings: SettingsService
  50  }

  52  // the controllers publicly available
  53: // missing from this list are the settings and the plugins store itself
  54  export type PublicServices = {

packages\clapper-services\src\settings.ts:
    5  
    6: export type BaseSettings = {
    7    comfyUiClientId: string

   43  
   44:   // -------------- MISC SETTINGS -------------------
   45  

   74  
   75:   // ------------ OTHER SETTINGS -----------
   76  

   91  
   92: // Settings are serialized to the local storage,
   93  // and we want to keep them lightweight
   94: export type SettingsState = BaseSettings & {
   95    assistantWorkflow: string

  113  
  114: // those settings are used for requests to the AI Assistant,
  115  // or to resolve segments
  116: export type RequestSettings = BaseSettings & {
  117    assistantWorkflow: ClapWorkflow

  135  
  136: export type SettingsControls = {
  137:   setComfyUiClientId: (comfyUiClientId?: string) => void
  138:   setComfyUiHttpAuthLogin: (comfyUiHttpAuthLogin?: string) => void
  139:   setComfyUiHttpAuthPassword: (comfyUiHttpAuthPassword?: string) => void
  140:   setReplicateApiKey: (replicateApiKey?: string) => void
  141:   setComfyIcuApiKey: (comfyIcuApiKey?: string) => void
  142:   setComfyIcuAccelerator: (comfyIcuAccelerator?: ComfyIcuAccelerator) => void
  143:   setComfyDeployApiKey: (comfyDeployApiKey?: string) => void
  144:   setHuggingFaceApiKey: (huggingFaceApiKey?: string) => void
  145:   setModelsLabApiKey: (modelsLabApiKey?: string) => void
  146:   setAiTubeApiKey: (aiTubeApiKey?: string) => void
  147:   setClapperApiKey: (clapperApiKey?: string) => void
  148:   setFalAiApiKey: (falAiApiKey?: string) => void
  149:   setOpenaiApiKey: (openaiApiKey?: string) => void
  150:   setGoogleApiKey: (googleApiKey?: string) => void
  151:   setGroqApiKey: (groqApiKey?: string) => void
  152:   setFireworksAiApiKey: (fireworksAiApiKey?: string) => void
  153:   setAnthropicApiKey: (anthropicApiKey?: string) => void
  154:   setElevenLabsApiKey: (elevenLabsApiKey?: string) => void
  155:   setCohereApiKey: (cohereApiKey?: string) => void
  156:   setMistralAiApiKey: (mistralAiApiKey?: string) => void
  157:   setKitsAiApiKey: (kitsAiApiKey?: string) => void
  158:   setStabilityAiApiKey: (stabilityAiApiKey?: string) => void
  159:   setLetzAiApiKey: (letzAiApiKey?: string) => void
  160:   setBigModelApiKey: (bigModelApiKey?: string) => void
  161:   setPiApiApiKey: (piApiApiKey?: string) => void
  162:   setCivitaiApiKey: (civitaiApiKey?: string) => void
  163:   setHotshotApiKey: (hotshotApiKey?: string) => void
  164:   setLumaLabsApiKey: (lumaLabsApiKey?: string) => void
  165  
  166:   setCensorNotForAllAudiencesContent: (censorNotForAllAudiencesContent?: boolean) => void
  167:   setImagePromptPrefix: (imagePromptPrefix?: string) => void
  168:   setImagePromptSuffix: (imagePromptSuffix?: string) => void
  169:   setImageNegativePrompt: (imageNegativePrompt?: string) => void
  170:   setVideoPromptPrefix: (videoPromptPrefix?: string) => void
  171:   setVideoPromptSuffix: (videoPromptSuffix?: string) => void
  172:   setVideoNegativePrompt: (videoNegativePrompt?: string) => void
  173  
  174:   setAssistantWorkflow: (assistantWorkflow?: ClapWorkflow) => void
  175:   setAssistantTurboWorkflow: (assistantTurboWorkflow?: ClapWorkflow) => void
  176:   setImageGenerationWorkflow: (imageGenerationWorkflow?: ClapWorkflow) => void
  177:   setImageGenerationTurboWorkflow: (imageGenerationTurboWorkflow?: ClapWorkflow) => void
  178:   setImageFaceswapWorkflow: (imageFaceswapWorkflow?: ClapWorkflow) => void
  179:   setImageUpscalingWorkflow: (imageUpscalingWorkflow?: ClapWorkflow) => void
  180:   setImageDepthWorkflow: (imageDepthWorkflow?: ClapWorkflow) => void
  181:   setImageSegmentationWorkflow: (imageSegmentationWorkflow?: ClapWorkflow) => void
  182:   setVideoGenerationWorkflow: (videoGenerationWorkflow?: ClapWorkflow) => void
  183:   setVideoFaceswapWorkflow: (videoFaceswapWorkflow?: ClapWorkflow) => void
  184:   setVideoLipsyncWorkflow: (videoLipsyncWorkflow?: ClapWorkflow) => void
  185:   setVideoDepthWorkflow: (videoDepthWorkflow?: ClapWorkflow) => void
  186:   setVideoSegmentationWorkflow: (videoSegmentationWorkflow?: ClapWorkflow) => void
  187:   setVideoUpscalingWorkflow: (videoUpscalingWorkflow?: ClapWorkflow) => void
  188:   setSoundGenerationWorkflow: (soundGenerationWorkflow?: ClapWorkflow) => void
  189:   setVoiceGenerationWorkflow: (voiceGenerationWorkflow?: ClapWorkflow) => void
  190:   setMusicGenerationWorkflow: (musicGenerationWorkflow?: ClapWorkflow) => void
  191    
  192:   setImageRenderingStrategy: (imageRenderingStrategy?: RenderingStrategy) => void
  193:   setImageUpscalingRenderingStrategy: (imageUpscalingRenderingStrategy?: RenderingStrategy) => void
  194:   setImageDepthRenderingStrategy: (imageDepthRenderingStrategy?: RenderingStrategy) => void
  195:   setImageSegmentationRenderingStrategy: (imageSegmentationRenderingStrategy?: RenderingStrategy) => void
  196:   setVideoRenderingStrategy: (videoRenderingStrategy?: RenderingStrategy) => void
  197:   setVideoDepthRenderingStrategy: (videoDepthRenderingStrategy?: RenderingStrategy) => void
  198:   setVideoSegmentationRenderingStrategy: (videoSegmentationRenderingStrategy?: RenderingStrategy) => void
  199:   setVideoUpscalingRenderingStrategy: (videoUpscalingRenderingStrategy?: RenderingStrategy) => void
  200:   setVoiceRenderingStrategy: (voiceRenderingStrategy?: RenderingStrategy) => void
  201:   setSoundRenderingStrategy: (soundRenderingStrategy?: RenderingStrategy) => void
  202:   setMusicRenderingStrategy: (musicRenderingStrategy?: RenderingStrategy) => void
  203  
  204  
  205:   setMaxImagesToGenerateInParallel: (maxImagesToGenerateInParallel?: number) => void
  206:   setMaxVideosToGenerateInParallel: (maxVideosToGenerateInParallel?: number) => void
  207  
  208:   setComfyClapWorkflowForImage: (comfyClapWorkflowForImage?: ClapWorkflow) => void
  209:   setComfyClapWorkflowForVideo: (comfyClapWorkflowForVideo?: ClapWorkflow) => void
  210:   setComfyWorkflowForVoice: (comfyWorkflowForVoice?: string) => void
  211:   setComfyWorkflowForSound: (comfyWorkflowForSound?: string) => void
  212:   setComfyWorkflowForMusic: (comfyWorkflowForMusic?: string) => void
  213  
  214:   setComfyUiApiUrl: (comfyUiApiUrl?: string) => void
  215  
  216:   setGradioApiUrlForAssistant: (gradioApiUrlForAssistant?: string) => void
  217:   setGradioApiUrlForImage: (gradioApiUrlForImage?: string) => void
  218:   setGradioApiUrlForVideo: (gradioApiUrlForVideo?: string) => void
  219:   setGradioApiUrlForVoice: (gradioApiUrlForVoice?: string) => void
  220:   setGradioApiUrlForSound: (gradioApiUrlForSound?: string) => void
  221:   setGradioApiUrlForMusic: (gradioApiUrlForMusic?: string) => void
  222  
  223:   setScriptEditorShowLineNumbers: (scriptEditorShowLineNumbers: boolean) => void
  224:   setScriptEditorShowMinimap: (scriptEditorShowMinimap: boolean) => void
  225  
  226:   setInterfaceSnapWindowsToGrid: (interfaceSnapWindowsToGrid: boolean) => void
  227  
  228    /**
  229:    * Return settings that can be used for a request
  230     * 

  232     */
  233:   getRequestSettings: () => RequestSettings
  234  }
  235  
  236: export type SettingsStore =
  237:   SettingsState &
  238:   SettingsControls

packages\clapper-services\src\tasks.ts:
   71    continue: () => void
   72:   setStatus: (status: TaskStatus) => void
   73:   setProgress: (options?: {
   74      value?: number

   90  export type TasksControls = {
   91:   setExpandTasks: (expandTasks: boolean) => void,
   92    get: (taskId?: string) => TaskRemoteControl | undefined

  100    continue: (taskId?: string) => void
  101:   setStatus: (status: TaskStatus, taskId?: string) => void
  102:   setProgress: (taskId: string, options?: {
  103      value?: number

packages\clapper-services\src\types.ts:
   4  
   5: import { RequestSettings, SettingsState } from "./settings"
   6  import { ChatEvent, ResolveRequestPrompts } from "./base-types"

   8  export type ResolveRequest = {
   9:   settings: RequestSettings
  10  

  29  export type AssistantRequest = {
  30:   settings: RequestSettings
  31  

packages\clapper-services\src\ui.ts:
    1  import { ClapTimelineTheme } from "@aitube/timeline"
    2: import { ProjectCreationWizardStep, SettingsCategory } from "./base-types"
    3  import { WorkflowEditorTheme } from "./workflow-editor"

   92    showApiKeys: boolean
   93:   showSettings: SettingsCategory
   94    showImporter: boolean

  107  export type UIControls = {
  108:   setIsTopMenuOpen: (isTopMenuOpen: boolean) => void
  109:   setShowWelcomeScreen: (showWelcomeScreen: boolean) => void
  110    // TODO @Julian: can be used to control the onboarding process
  111:   // setOnboardingStep: (onboardingStep?: OnboardingStep) => void
  112:   setHasBetaAccess: (hasBetaAccess: boolean) => void
  113:   setThemeName: (themeName: UIThemeName) => void
  114    applyThemeToComponents: () => void
  115    getTheme: () => UITheme
  116:   setShowApiKeys: (showApiKeys: boolean) => void
  117:   setShowSettings: (showSettings: SettingsCategory) => void
  118:   setShowImporter: (showImporter: boolean) => void
  119:   setShowTimeline: (showTimeline: boolean) => void
  120:   setShowExplorer: (showExplorer: boolean) => void
  121:   setShowVideoPlayer: (showVideoPlayer: boolean) => void
  122:   setShowAssistant: (showAssistant: boolean) => void
  123:   setShowFPS: (showFPS: boolean) => void
  124:   setFollowCursor: (followCursor: boolean) => void
  125:   setEditorFontSize: (editorFontSize: number) => void
  126:   setWindowLayout: (windowLayout: UIWindowLayout) => void
  127:   setProjectCreationWizardStep: (projectCreationWizardStep: ProjectCreationWizardStep) => void
  128  }

packages\clapper-services\src\version-control.ts:
  11  export type VersionControls<T> = {
  12:   setCurrent: (current?: T) => void
  13    undo: () => void

packages\client\README.md:
  27  
  28: Note: to overridethe AiTube API URL, set this env var: `AITUBE_URL`
  29  

packages\client\src\api\editClapDialogues.ts:
   1: import { ClapCompletionMode, ClapProject, fetchClap, removeGeneratedAssetUrls, serializeClap } from "@aitube/clap"
   2  import queryString from "query-string"

  53      },
  54:     body: await serializeClap(removeGeneratedAssetUrls(clap)),
  55      cache: "no-store",

packages\client\src\api\editClapEntities.ts:
   1: import { ClapCompletionMode, ClapProject, fetchClap, serializeClap, removeGeneratedAssetUrls } from "@aitube/clap"
   2  import queryString from "query-string"

  67      },
  68:     body: await serializeClap(removeGeneratedAssetUrls(clap)),
  69      cache: "no-store",

packages\client\src\api\editClapMusic.ts:
   1  import queryString from "query-string"
   2: import { ClapCompletionMode, ClapProject, fetchClap, serializeClap, removeGeneratedAssetUrls } from "@aitube/clap"
   3  

  52      },
  53:     body: await serializeClap(removeGeneratedAssetUrls(clap)),
  54      cache: "no-store",

packages\client\src\api\editClapSounds.ts:
   1  import queryString from "query-string"
   2: import { ClapCompletionMode, ClapProject, fetchClap, serializeClap, removeGeneratedAssetUrls } from "@aitube/clap"
   3  

  52      },
  53:     body: await serializeClap(removeGeneratedAssetUrls(clap)),
  54      cache: "no-store",

packages\client\src\api\editClapStory.ts:
    1: import { ClapCompletionMode, ClapProject, fetchClap, filterAssets, isValidNumber, serializeClap, removeGeneratedAssetUrls } from "@aitube/clap"
    2  import queryString from "query-string"

   38    // the server may enforce a hardcoded limit to bypass what you
   39:   // set here, but that is not a big deal because you can pass
   40    // you .clap file again if necessary
   41    //
   42:   // default value: no limit (the server will set one)
   43    endTimeInMs?: number

   87    // we remove heavy elements from the payload
   88:   const payload = await filterAssets({
   89      clap,

  106      },
  107:     body: await serializeClap(removeGeneratedAssetUrls(clap)),
  108      cache: "no-store",

packages\client\src\api\editClapStoryboards.ts:
   1  import queryString from "query-string"
   2: import { ClapCompletionMode, ClapProject, fetchClap, serializeClap, removeGeneratedAssetUrls } from "@aitube/clap"
   3  

  52      },
  53:     body: await serializeClap(removeGeneratedAssetUrls(clap)),
  54      cache: "no-store",

packages\client\src\api\editClapVideos.ts:
   1  import queryString from "query-string"
   2: import { ClapCompletionMode, ClapProject, fetchClap, serializeClap, removeGeneratedAssetUrls, ClapSegmentStatus, ClapSegmentCategory, filterSegments, ClapSegmentFilteringMode, ClapSegment } from "@aitube/clap"
   3  

  76        // storyboards that are used by pending videos
  77:       removeGeneratedAssetUrls(clap, idsOfStoryboardsToKeep)
  78      ),

packages\colors\.gitignore:
  2  
  3: .age_and_gender_dataset_cache
  4  

packages\colors\package.json:
  7    "version": "0.2.4",
  8:   "description": "Various color settings and utilities for AiTube",
  9    "scripts": {

packages\colors\README.md:
  2  
  3: *Various color settings and utilities for AiTube*
  4  

packages\colors\src\index.ts:
  10  export {
  11:   type ClapSegmentCategorySettings
  12  } from "./types"

packages\colors\src\types.ts:
  5  
  6: export interface ClapSegmentCategorySettings {
  7    id: any // ClapSegmentCategory // eg. "country"

packages\colors\src\constants\segments.ts:
    3  import { SegmentColor } from "@/constants/colors"
    4: import { ClapSegmentCategorySettings } from "@/types"
    5  
    6  // this is a special segment used for rendering the scene
    7: const splat: ClapSegmentCategorySettings = {
    8    id: ClapSegmentCategory.SPLAT,

   13  
   14: const mesh: ClapSegmentCategorySettings = {
   15    id: ClapSegmentCategory.MESH,

   20  
   21: const depth: ClapSegmentCategorySettings = {
   22    id: ClapSegmentCategory.DEPTH,

   28  // this is a special segment used for rendering the scene
   29: const video: ClapSegmentCategorySettings = {
   30    id: ClapSegmentCategory.VIDEO,

   36  // this is a special segment type used to render images
   37: const image: ClapSegmentCategorySettings = {
   38    id: ClapSegmentCategory.IMAGE,

   43  
   44: const action: ClapSegmentCategorySettings = {
   45    id: ClapSegmentCategory.ACTION,

   50  
   51: const character: ClapSegmentCategorySettings = {
   52    id: ClapSegmentCategory.CHARACTER,

   57  
   58: const location: ClapSegmentCategorySettings = {
   59    id: ClapSegmentCategory.LOCATION,

   64  
   65: const camera: ClapSegmentCategorySettings = {
   66    id: ClapSegmentCategory.CAMERA,

   71  
   72: const transition: ClapSegmentCategorySettings = {
   73    id: ClapSegmentCategory.TRANSITION,

   78  
   79: const lighting: ClapSegmentCategorySettings = {
   80    id: ClapSegmentCategory.LIGHTING,

   85  
   86: const time: ClapSegmentCategorySettings = {
   87    id: ClapSegmentCategory.TIME,

   93  // @deprecated - use `time` and ClapSegmentCategory.TIME instead
   94: const era: ClapSegmentCategorySettings = {
   95    id: ClapSegmentCategory.ERA,

  100  
  101: const weather: ClapSegmentCategorySettings = {
  102    id: ClapSegmentCategory.WEATHER,

  107  
  108: const sound: ClapSegmentCategorySettings = {
  109    id: ClapSegmentCategory.SOUND,

  114  
  115: const music: ClapSegmentCategorySettings = {
  116    id: ClapSegmentCategory.MUSIC,

  121  
  122: const dialogue: ClapSegmentCategorySettings = {
  123    id: ClapSegmentCategory.DIALOGUE,

  128  
  129: const style: ClapSegmentCategorySettings = {
  130    id: ClapSegmentCategory.STYLE,

  136  /*
  137: const colors: ClapSegmentCategorySettings = {
  138    id: "colors",

  144  
  145: const group: ClapSegmentCategorySettings = {
  146    id: ClapSegmentCategory.GROUP,

  151  
  152: const generic: ClapSegmentCategorySettings = {
  153    id: ClapSegmentCategory.GENERIC,

  159  // (invisible) an event localized in time
  160: const event: ClapSegmentCategorySettings = {
  161    id: ClapSegmentCategory.EVENT,

  166  
  167: const effect: ClapSegmentCategorySettings = {
  168    id: ClapSegmentCategory.EFFECT,

  174  // (visible) an Interface (UI) element
  175: const interface_: ClapSegmentCategorySettings = {
  176    id: ClapSegmentCategory.INTERFACE,

  182  // (invisible) a prompt which defines new event(s) to fire based on event(s)
  183: const phenomenon: ClapSegmentCategorySettings = {
  184    id: ClapSegmentCategory.PHENOMENON,

  189  
  190: export const segmentCategories: Record<ClapSegmentCategory, ClapSegmentCategorySettings> = {
  191    SPLAT: splat,

  218  
  219: export function getSegment(category?: ClapSegmentCategory): ClapSegmentCategorySettings {
  220    return segmentCategories[category || ClapSegmentCategory.GENERIC] || segmentCategories.GENERIC

  222  
  223: export function getSegmentColor(input?: ClapSegmentCategorySettings | ClapSegmentCategory): SegmentColor {
  224    const { color } = !input || typeof input === "string" ? getSegment(input) : input

packages\engine\src\renderers\storyboard\renderShotToStoryboard.ts:
    3    ClapSegment,
    4:   getClapAssetSourceType,
    5    newSegment,

   53        endTimeInMs: shotSegment.endTimeInMs,
   54:       assetDurationInMs: shotSegment.assetDurationInMs,
   55        category: ClapSegmentCategory.IMAGE,
   56        prompt: "",
   57:       assetUrl: "",
   58        outputType: ClapOutputType.IMAGE,

   82    // TASK 3: GENERATE MISSING STORYBOARD BITMAP
   83:   if (!shotStoryboardSegment.assetUrl) {
   84      if (debug) { console.log(`[@aitube-engine/renderShotToStoryboard] generating image..`) }

   92      try {
   93:       shotStoryboardSegment.assetUrl = await renderStoryboard({
   94          prompt: getPositivePrompt(shotStoryboardSegment.prompt),

  102        })
  103:       shotStoryboardSegment.assetSourceType = getClapAssetSourceType(shotStoryboardSegment.assetUrl)
  104        shotStoryboardSegment.status = ClapSegmentStatus.COMPLETED

  110    
  111:     if (debug) { console.log(`[@aitube-engine/renderShotToStoryboard] generated storyboard image: ${shotStoryboardSegment?.assetUrl?.slice?.(0, 50)}...`)  }
  112  

  118    } else {
  119:     if (debug) { console.log(`[@aitube-engine/renderShotToStoryboard] there is already a storyboard image: ${shotStoryboardSegment?.assetUrl?.slice?.(0, 50)}...`) }
  120    }

packages\engine\src\renderers\video\renderShotToVideo.ts:
    6    ClapSegment,
    7:   getClapAssetSourceType,
    8    newSegment,

   62        endTimeInMs: shotSegment.endTimeInMs,
   63:       assetDurationInMs: shotSegment.assetDurationInMs,
   64        category: ClapSegmentCategory.VIDEO,
   65        prompt: "",
   66:       assetUrl: "",
   67        outputType: ClapOutputType.VIDEO

   94    // TASK 3: GENERATE MISSING VIDEO FILE
   95:   if (!shotVideoSegment.assetUrl) {
   96      // console.log(`[api/edit/videos] processShot: generating video file..`)

  120  
  121:     if (!shotStoryboardSegment?.assetUrl) {
  122        // it is normal for some storyboards to be empty,

  133      try {
  134:       shotVideoSegment.assetUrl = await renderVideo({
  135          // prompt: getPositivePrompt(shotVideoSegment.prompt),
  136:         imageInputBase64: shotStoryboardSegment.assetUrl,
  137          seed: shotSegment.seed,

  146        })
  147:       shotVideoSegment.assetSourceType = getClapAssetSourceType(shotVideoSegment.assetUrl)
  148        shotVideoSegment.status = ClapSegmentStatus.COMPLETED

  154    
  155:     // console.log(`[api/edit/videos] processShot: generated video files: ${shotVideoSegment?.assetUrl?.slice?.(0, 50)}...`)
  156  

  163    } else {
  164:     if (debug) { console.log(`[@aitube-engine/renderShotToVideo] there is already a video file: ${shotVideoSegment?.assetUrl?.slice?.(0, 50)}...`) }
  165    }
  166  
  167:   if (!shotVideoSegment.assetUrl) {
  168      return

  177        endTimeInMs: shotSegment.endTimeInMs,
  178:       assetDurationInMs: shotSegment.assetDurationInMs,
  179        category: ClapSegmentCategory.IMAGE,

  193      shotStoryboardSegment && 
  194:     (!shotStoryboardSegment.assetUrl || shotStoryboardSegment.status === ClapSegmentStatus.TO_GENERATE)
  195    ) {
  196:     if (debug) { console.log(`[@aitube-engine/renderShotToVideo] generating a missing storyboard asset`) }
  197  
  198      try {
  199:       shotStoryboardSegment.assetUrl = await extractFirstFrame({
  200:         inputVideo: shotVideoSegment.assetUrl,
  201          outputFormat: "jpeg"
  202        })
  203:       if (!shotStoryboardSegment.assetUrl) { throw new Error(`failed to extract the first frame`) }
  204        if (debug) { console.log(`[@aitube-engine/renderShotToVideo] successfully fixed the missing storyboard`) }

packages\io\src\fetch\downloadFileAsBase64.ts:
  24  
  25:   const assetUrl = `data:${contentType};base64,${base64}`
  26:   return assetUrl
  27  };

packages\io\src\image\convertImageToWebp.ts:
  19  
  20:       // preset: "photo",
  21  

packages\timeline\index.html:
  3    <head>
  4:     <meta charset="utf-8" />
  5      <title>Demo</title>

packages\timeline\README.md:
  33  
  34: You can see in the package.json that I set `NODE_ENV=production` while building, that's because of a weirdness with Bun: https://github.com/oven-sh/bun/issues/3768
  35  

packages\timeline\src\ClapTimeline.tsx:
   20  import { TimelineCamera } from "./components/camera"
   21: import { useTimeline } from "./hooks"
   22  import { topBarTimeScaleHeight } from "./constants/themes"

   59    }) {
   60:   const theme = useTimeline(s => s.theme)
   61:   const invalidate = useTimeline(s => s.invalidate)
   62:   const canvas = useTimeline(s => s.canvas)
   63:   const setCanvas = useTimeline(s => s.setCanvas)
   64:   const handleMouseWheel = useTimeline(s => s.handleMouseWheel)
   65  
   66    const handleIsCreated = () => {
   67:     useTimeline.setState({ isReady: true })
   68    }

   70    const handleMouseMove = (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent<HTMLDivElement>) => {
   71:     const timeline: TimelineStore = useTimeline.getState()
   72      const { editedSegment } = timeline

   94      // apparently we cannot stop the propagation from the scroll wheel event
   95:     // we attach to our to bar from the scroll wheel event set on the canvas
   96      // (that makes sense, one is in DOM space, the other in WebGL space)

  126              ref={(canvas) => {
  127:               setCanvas(canvas || undefined)
  128              }}

packages\timeline\src\demo.tsx:
   4  
   5: import { ClapTimeline, SegmentEditionStatus, SegmentVisibility, TimelineSegment, useTimeline } from '.'
   6: import { ClapAssetSource, ClapOutputType, ClapSegmentCategory, ClapSegmentStatus } from '@aitube/clap'
   7  

  28    status: ClapSegmentStatus.TO_GENERATE,
  29:   assetUrl: '',
  30:   assetDurationInMs: 1000,
  31:   assetSourceType: ClapAssetSource.EMPTY,
  32:   assetFileFormat: '',
  33    revision: 0,

  68  
  69: useTimeline.setState({
  70    durationInMs: 2000,

packages\timeline\src\index.tsx:
  39    useHorizontalGridLines,
  40:   useTimeline,
  41    useSegmentChanges,

packages\timeline\src\components\camera\TimelineCamera.tsx:
   2  
   3: import { useTimeline } from "@/hooks"
   4  
   5  export function TimelineCamera() {
   6:   const setTimelineCamera = useTimeline(s => s.setTimelineCamera)
   7    return (

  10        if (ortographicCamera) {
  11:         setTimelineCamera(ortographicCamera)
  12        }

packages\timeline\src\components\cells\AudioCell.tsx:
   9    isHovered,
  10:   setHoveredSegment,
  11    durationInSteps,

  39        smoothness={2} // The number of curve segments. Default is 4
  40:       bevelSegments={1} // The number of bevel segments. Default is 4, setting it to 0 removes the bevel, as a result the texture is applied to the whole geometry.
  41        creaseAngle={0.4} // Smooth normals everywhere except faces that meet at an angle greater than the crease angle

packages\timeline\src\components\cells\Cell.tsx:
    4  
    5: import { useTimeline } from "@/hooks"
    6  import { useHoveredSegment } from "@/hooks/useHoveredSegment"

   15  import { AudioCell } from "./AudioCell"
   16: import { useThree } from "@react-three/fiber"
   17  import { SegmentArea, SegmentPointerEvent } from "@/types/timeline"

   20  import { getSegmentColorScheme } from "@/utils/getSegmentColorScheme"
   21: import { setBodyCursor } from "@/utils"
   22  

   27  }) {
   28:   const { size } = useThree()
   29:   const showBetaFeatures = useTimeline(s => s.showBetaFeatures)
   30  

   39  
   40:   const cellWidth = useTimeline((s) => s.cellWidth)
   41:   const getCellHeight = useTimeline((s) => s.getCellHeight)
   42:   const getVerticalCellPosition = useTimeline((s) => s.getVerticalCellPosition)
   43  

   46  
   47:   const durationInMsPerStep = useTimeline(s => s.durationInMsPerStep)
   48  
   49    // used to react to changes impacting tracks
   50:   const tracks = useTimeline(s => s.tracks)
   51  

   61  
   62:   const currentZoomLevel = useTimeline(s => s.currentZoomLevel)
   63  

   70    // note: as a general rule, we should avoid "reactive" state updates like this
   71:   const isResizing = useTimeline(s => s.isResizing)
   72:   // const isResizing = useTimeline.getState().isResizing
   73  
   74    const SpecializedCell =
   75:     s.assetUrl.startsWith("data:image/")
   76        ? ImageCell
   77:       : s.assetUrl.startsWith("data:video/")
   78        ? VideoCell
   79:     : s.assetUrl.startsWith("data:audio/")
   80        ? AudioCell

   82  
   83:   const setHoveredSegment = useTimeline(s => s.setHoveredSegment)
   84      
   85:   const handleSegmentEvent = useTimeline(s => s.handleSegmentEvent)
   86  

  155            isHovered={isHovered}
  156:           setHoveredSegment={setHoveredSegment}
  157            durationInSteps={durationInSteps}

packages\timeline\src\components\cells\ImageCell.tsx:
   5  import { SpecializedCellProps } from "./types";
   6: import { useTimeline } from "@/hooks/useTimeline";
   7  

  14    isHovered,
  15:   setHoveredSegment,
  16    durationInSteps,

  23  }: SpecializedCellProps) {
  24:   const width = useTimeline(s => s.width)
  25:   const height = useTimeline(s => s.height)
  26    const aspectRatio = width / height;

  33    const handleHover = (isHovering: boolean) => {
  34:     setHoveredSegment(isHovering ? { segment: s, area: SegmentArea.MIDDLE } : undefined);
  35    };

  56            transparent
  57:           url={s.assetUrl}
  58          />

packages\timeline\src\components\cells\RedrawButton.tsx:
   1: import { useTimeline } from "@/hooks"
   2  import { TimelineSegment } from "@/types"

   5  import { invalidate } from "@react-three/fiber"
   6: import { useState, useTransition } from "react"
   7  

  24  }) {
  25:   const [_isPending, startTransition] = useTransition()
  26:   const resolveSegment = useTimeline(s => s.resolveSegment)
  27  
  28:   const [inProgress, setInProgress] = useState(false)
  29:   // const [isButtonHovered, setButtonHovered] = useState(false)
  30  

  32      startTransition(() => {
  33:       setInProgress(true)
  34      })

  57          // this fail/trigger an error, since the parent element will be destroyed
  58:         setInProgress(false)
  59        })

packages\timeline\src\components\cells\TextCell.tsx:
   14    isHovered,
   15:   setHoveredSegment,
   16    durationInSteps,

   60        smoothness={2} // The number of curve segments. Default is 4
   61:       bevelSegments={1} // The number of bevel segments. Default is 4, setting it to 0 removes the bevel, as a result the texture is applied to the whole geometry.
   62        creaseAngle={0.4} // Smooth normals everywhere except faces that meet at an angle greater than the crease angle

   93            // fullscreen // Aligns to the upper-left corner, fills the screen (default:false) [ignored in transform mode]
   94:           // distanceFactor={10} // If set (default: undefined), children will be scaled by this factor, and also by distance to a PerspectiveCamera / zoom by a OrthographicCamera.
   95            // zIndexRange={[100, 0]} // Z-order range (default=[16777271, 0])

  122               // but also add a lil padding
  123:              // note: this should be based on the horizontal zoom settings
  124               + (cellWidth / 4),

packages\timeline\src\components\cells\types.ts:
  10    isHovered: boolean
  11:   setHoveredSegment: (params?: {
  12      segment?: TimelineSegment

packages\timeline\src\components\cells\VideoCell.tsx:
   7  import { SpecializedCellProps } from "./types";
   8: import { useTimeline } from "@/index";
   9  

  16    isHovered,
  17:   setHoveredSegment,
  18    durationInSteps,

  25  }: SpecializedCellProps) {
  26:   const [videos, setVideos] = useState<HTMLVideoElement[]>([]);
  27:   const width = useTimeline(s => s.width)
  28:   const height = useTimeline(s => s.height)
  29    const aspectRatio = width / height;

  38        const vid = document.createElement("video");
  39:       vid.src = segment.assetUrl;
  40        vid.crossOrigin = "Anonymous";

  43        vid.playsInline = true;
  44:       vid.currentTime = ((segment.assetDurationInMs / 1000) / numPreviews) * index;
  45        return vid;
  46      });
  47:     setVideos(newVideos);
  48  

  51      };
  52:   }, [segment.assetUrl, numPreviews]);
  53  

  71    const handleHover = (isHovering: boolean) => {
  72:     setHoveredSegment(isHovering ? {
  73        hoveredSegment: segment,

packages\timeline\src\components\cells\Waveform.tsx:
    1  import React, { useRef, useEffect, useMemo } from 'react';
    2: import { useThree } from '@react-three/fiber';
    3  import * as THREE from 'three';

   42    const isLoadedRef = useRef<boolean>(false);
   43:   const { gl } = useThree();
   44  

   64  
   65:       const drawChannel = (channelData: Float32Array, yOffset: number, channelHeight: number) => {
   66          const step = Math.ceil(channelData.length / width);

   78            // Only draw the positive part (top half) of the waveform
   79:           const y = yOffset + channelHeight;
   80            const h = Math.max(1, max * channelHeight);

  123    useEffect(() => {
  124:     if (meshRef.current && segment.assetUrl) {
  125:       fetch(segment.assetUrl)
  126          .then(response => response.arrayBuffer())

  140      }
  141:   }, [segment.assetUrl, width, height, getWaveformTexture, gl]);
  142  

packages\timeline\src\components\controls\TimelineControls.tsx:
    2  import * as THREE from "three"
    3: import { useFrame, useThree } from "@react-three/fiber"
    4  import { MapControls } from "@react-three/drei"

    6  import { leftBarTrackScaleWidth, topBarTimeScaleHeight } from "@/constants/themes"
    7: import { useTimeline } from "@/hooks"
    8  import { clamp } from "@/utils/clamp"

   24  }) {
   25:   const { size, camera, invalidate } = useThree()
   26:   const setInvalidate = useTimeline(s => s.setInvalidate)
   27:   const timelineControls = useTimeline(s => s.timelineControls)
   28:   const setTimelineControls = useTimeline(s => s.setTimelineControls)
   29    const initialPinchDistanceRef = useRef<number | null>(null)

   31    useEffect(() => {
   32:     setInvalidate(invalidate)
   33:   }, [invalidate, setInvalidate])
   34  

   91    // this controls the top grid ruler bar and makes it sticky
   92:   // this works by controlling the render priority, and taking over whatever the Controls might have set
   93    //

  109        cursorTimestampAtInMs,
  110:     } = useTimeline.getState()
  111  

  118      if (!timelineCamera || !timelineControls) {
  119:       useTimeline.setState({ isResizing })
  120        return

  166      // console.log(`scrollY=${Math.round(scrollY)}`)
  167:     timelineCamera.position.setX(scrollX)
  168:     timelineControls.target.setX(scrollX)
  169   
  170:     timelineCamera.position.setY(scrollY)
  171:     timelineControls.target.setY(scrollY)
  172   
  173:     useTimeline.setState({
  174        scrollX,

  182        timelineCursor.position.x = (
  183:         (cursorTimestampAtInMs) / useTimeline.getState().durationInMsPerStep
  184        ) * cellWidth

  207          if (mapControls) {
  208:           setTimelineControls(mapControls)
  209          }

  227  
  228:       // we don't need the zoom if we have powerful grom size control settings,
  229        // since those provide control over the X and Y zoom

packages\timeline\src\components\icons\SvgShapeMesh.tsx:
  29          // https://gist.github.com/PantherHawk/66c129cbda65d157186dd3b38fb427a1
  30:         polygonOffset
  31:         polygonOffsetFactor={index * -0.1}
  32        />

packages\timeline\src\components\icons\useSvgShapes.ts:
  6  export function useSvgShapes(url: string): SvgShape[] {
  7:   const [shapes, set] = useState<SvgShape[]>([]);
  8    useEffect(() => {
  9:     loadSvgShapes(url).then(set)
  10    }, [url]);

packages\timeline\src\components\scroller\HorizontalScroller.tsx:
   2  
   3: import { useTimeline } from "@/hooks/useTimeline"
   4  import { getSegmentColorScheme } from "@/utils/getSegmentColorScheme"

   9  export function HorizontalScroller() {
  10:   const theme = useTimeline(s => s.theme)
  11  
  12:   const containerWidth = useTimeline(s => s.containerWidth)
  13  
  14:   const segments = useTimeline(s => s.segments)
  15  
  16:   const atLeastOneSegmentChanged = useTimeline(s => s.atLeastOneSegmentChanged)
  17  
  18:   const timelineCamera = useTimeline(s => s.timelineCamera)
  19:   const timelineControls = useTimeline(s => s.timelineControls)
  20  
  21    // note: those do two different things:
  22:   // move the actual "physical" cursor (with setCursorTimestampAtInMs())
  23    // and trigger a callback to ask the parent app to do something (eg. jump/seek into the timeline)
  24:   const setCursorTimestampAtInMs = useTimeline(s => s.setCursorTimestampAtInMs)
  25:   const jumpAt = useTimeline(s => s.jumpAt)
  26  
  27:   const setHorizontalZoomLevel = useTimeline((s) => s.setHorizontalZoomLevel)
  28  

  30    // but the real range is the actual view window
  31:   const cursorTimestampAtInMs = useTimeline(s => s.cursorTimestampAtInMs)
  32:   const durationInMs = useTimeline(s => s.durationInMs)
  33  
  34:   const setScrollX = useTimeline(s => s.setScrollX)
  35:   const contentWidth = useTimeline(s => s.contentWidth)
  36  

  42    const handleZoomChange = (newZoom: number) => {
  43:     setHorizontalZoomLevel(newZoom)
  44    }

  76            const newScrollX = scrollRatio * contentWidth
  77:           setScrollX(newScrollX)
  78:           timelineCamera.position.setX(newScrollX)
  79:           timelineControls.target.setX(newScrollX)
  80          }}

  82            // note: those do two different things:
  83:           // move the actual "physical" cursor (with setCursorTimestampAtInMs())
  84            // and trigger a callback to ask the parent app to do something (eg. jump/seek into the timeline)
  85:           setCursorTimestampAtInMs(playbackCursorPositionInMs)
  86            jumpAt(playbackCursorPositionInMs)

packages\timeline\src\components\scroller\VerticalScroller.tsx:
   1: import { useThree } from "@react-three/fiber"
   2  
   3  import { VerticalSlider } from "@/components/slider"
   4: import { useTimeline } from "@/hooks/useTimeline"
   5  
   6  export function VerticalScroller() {
   7:   const timelineCamera = useTimeline(s => s.timelineCamera)
   8:   const timelineControls = useTimeline(s => s.timelineControls)
   9  
  10:   const cellWidth = useTimeline((s) => s.cellWidth)
  11:   const setHorizontalZoomLevel = useTimeline((s) => s.setHorizontalZoomLevel)
  12  

packages\timeline\src\components\slider\TimelineSlider.tsx:
    1: import { TimelineSegment, useTimeline } from '@/index';
    2  import React, { useRef, useEffect, useState, useCallback, useMemo } from 'react';

   64    const canvasRef = useRef<HTMLCanvasElement>(null);
   65:   const [isDraggingWindow, setIsDraggingWindow] = useState(false);
   66:   const [isDraggingCursor, setIsDraggingCursor] = useState(false);
   67:   const [dragStartX, setDragStartX] = useState(0);
   68:   const [windowStart, setWindowStart] = useState(slidingWindowRangeThumbStartTimeInMs);
   69:   const [windowEnd, setWindowEnd] = useState(slidingWindowRangeThumbEndTimeInMs);
   70:   const [playbackCursor, setPlaybackCursor] = useState(currentPlaybackCursorPosition);
   71:   const [showOverlay, setShowOverlay] = useState(false);
   72:   const [lastTouchX, setLastTouchX] = useState(0);
   73:   const [isTouchDevice, setIsTouchDevice] = useState(false);
   74  

  104  
  105:   const setCanvasSize = useCallback(() => {
  106      const canvas = canvasRef.current;

  124    useEffect(() => {
  125:     setCanvasSize();
  126      drawEvents();
  127:   }, [setCanvasSize, drawEvents, memoizedEvents, windowStart, windowEnd, playbackCursor]);
  128  

  131      if (!rect) return;
  132:     if (!useTimeline.getState().tracks.length) return;
  133  

  137      if (Math.abs(x - cursorX) <= playbackCursorPositionWidthInPx * 2 && allowPlaybackCursorToBeDragged) {
  138:       setIsDraggingCursor(true);
  139      } else {
  140:       setIsDraggingWindow(true);
  141        const clickedTime = minTimeInMs + (x / rect.width) * (maxTimeInMs - minTimeInMs);

  153  
  154:       setWindowStart(newStart);
  155:       setWindowEnd(newEnd);
  156        onSlidingWindowRangeThumbUpdate({ slidingWindowRangeThumbStartTimeInMs: newStart, slidingWindowRangeThumbEndTimeInMs: newEnd });

  158  
  159:     setDragStartX(clientX);
  160:     setLastTouchX(clientX);
  161:     setShowOverlay(true);
  162    }, [allowPlaybackCursorToBeDragged, maxTimeInMs, minTimeInMs, onSlidingWindowRangeThumbUpdate, playbackCursor, playbackCursorPositionWidthInPx, windowEnd, windowStart]);

  164      if (!isDraggingWindow && !isDraggingCursor) return;
  165:     if (!useTimeline.getState().tracks.length) return;
  166  

  182  
  183:       setWindowStart(newStart);
  184:       setWindowEnd(newEnd);
  185        onSlidingWindowRangeThumbUpdate({ slidingWindowRangeThumbStartTimeInMs: newStart, slidingWindowRangeThumbEndTimeInMs: newEnd });

  188        newCursor = Math.max(minTimeInMs, Math.min(maxTimeInMs, newCursor));
  189:       setPlaybackCursor(newCursor);
  190        onPlaybackCursorUpdate({ playbackCursorPositionInMs: newCursor });

  193      if (isTouchDevice) {
  194:       setLastTouchX(clientX);
  195      } else {
  196:       setDragStartX(clientX);
  197      }

  200    const handleEnd = useCallback(() => {
  201:     setIsDraggingWindow(false);
  202:     setIsDraggingCursor(false);
  203:     setShowOverlay(false);
  204:     setLastTouchX(0);
  205    }, []);

  208    const handleMouseDown = (e: React.MouseEvent) => {
  209:     setIsTouchDevice(false);
  210      handleStart(e.clientX);

  226  const handleTouchStart = (e: React.TouchEvent) => {
  227:   setIsTouchDevice(true);
  228    handleStart(e.touches[0].clientX);

  267    useEffect(() => {
  268:     setWindowStart(slidingWindowRangeThumbStartTimeInMs);
  269:     setWindowEnd(slidingWindowRangeThumbEndTimeInMs);
  270    }, [slidingWindowRangeThumbStartTimeInMs, slidingWindowRangeThumbEndTimeInMs]);

  272    useEffect(() => {
  273:     setPlaybackCursor(currentPlaybackCursorPosition);
  274    }, [currentPlaybackCursorPosition]);

  277      if (!allowSlidingWindowRangeThumbResizeOnMouseWheel) return;
  278:     if (!useTimeline.getState().tracks.length) { return }
  279  

  294  
  295:     setWindowStart(newStart);
  296:     setWindowEnd(newEnd);
  297      onSlidingWindowRangeThumbUpdate({ slidingWindowRangeThumbStartTimeInMs: newStart, slidingWindowRangeThumbEndTimeInMs: newEnd });

  303  
  304:     if (!useTimeline.getState().tracks.length) { return }
  305  

  321  
  322:     setWindowStart(newStart);
  323:     setWindowEnd(newEnd);
  324      onSlidingWindowRangeThumbUpdate({ slidingWindowRangeThumbStartTimeInMs: newStart, slidingWindowRangeThumbEndTimeInMs: newEnd });

  327      const newCursor = Math.max(minTimeInMs, Math.min(maxTimeInMs, clickedTime));
  328:     setPlaybackCursor(newCursor);
  329      onPlaybackCursorUpdate({ playbackCursorPositionInMs: newCursor });

packages\timeline\src\components\slider\TimelineSliderBase.tsx:
  34        bg-stone-500
  35:       ring-offset-white transition-colors 
  36        focus-visible:outline-none focus-visible:ring-1
  37:       focus-visible:ring-stone-950 focus-visible:ring-offset-1
  38        disabled:pointer-events-none disabled:opacity-50

  40        shadow-md
  41:       dark:ring-offset-stone-500 dark:focus-visible:ring-stone-400`,
  42        thumbClass

packages\timeline\src\components\timeline\Cells.tsx:
   3    useSegmentLoader,
   4:   useTimeline
   5  } from "@/hooks"

  13    // subscribe to changes in content width; height, as well as the container width
  14:   const contentHeight = useTimeline(s => s.contentHeight)
  15:   const containerWidth = useTimeline(s => s.containerWidth)
  16  

packages\timeline\src\components\timeline\Cursor.tsx:
   3  
   4: import { useAnimationFrame, useTimeline } from "@/hooks"
   5  import { useCursorGeometry } from "@/hooks/useCursorGeometry"

  14  export function Cursor() {
  15:   const theme = useTimeline(s => s.theme)
  16:   const timelineCursor = useTimeline(s => s.timelineCursor)
  17:   const setTimelineCursor = useTimeline(s => s.setTimelineCursor)
  18:   const contentHeight = useTimeline(s => s.contentHeight)
  19    const cursorGeometries = useCursorGeometry()

  65        position={[leftBarTrackScaleWidth, (contentHeight / 2), -3]}
  66:       ref={r => { if (r) setTimelineCursor(r) }}
  67      >

  92      </group>
  93:   ), [theme, contentHeight, cursorGeometries, setTimelineCursor])
  94  

packages\timeline\src\components\timeline\Grid.tsx:
   7    useHorizontalGridLines,
   8:   useTimeline
   9  } from "@/hooks"

  13  export function Grid() {
  14:   const typicalSegmentDurationInSteps = useTimeline(s => s.typicalSegmentDurationInSteps)
  15:   const contentHeight = useTimeline(s => s.contentHeight)
  16  

packages\timeline\src\components\timeline\LeftBarTrackScale.tsx:
   4  import {
   5: useTimeline
   6  } from "@/hooks"

  15    
  16:   const contentHeight = useTimeline((s) => s.contentHeight)
  17    
  18:   const getCellHeight = useTimeline((s) => s.getCellHeight)
  19:   const theme = useTimeline(s => s.theme)
  20  
  21:   const getVerticalCellPosition = useTimeline((s) => s.getVerticalCellPosition)
  22  
  23:   const tracks = useTimeline(s => s.tracks)
  24:   const toggleTrackVisibility = useTimeline((s) => s.toggleTrackVisibility)
  25  
  26:   const setLeftBarTrackScale = useTimeline(s => s.setLeftBarTrackScale)
  27  

  34          if (r) {
  35:           setLeftBarTrackScale(r)
  36          }

packages\timeline\src\components\timeline\Timeline.tsx:
   1  import { Plane } from "@react-three/drei"
   2: import { useThree } from "@react-three/fiber"
   3  import { useEffect } from "react"

   5  import {
   6:   useTimeline
   7  } from "@/hooks"

  15  export function Timeline({ width, height }: { width: number; height: number }) {
  16:   const { size } = useThree()
  17  
  18:   const setContainerSize = useTimeline(s => s.setContainerSize)
  19    useEffect(() => {
  20:     setContainerSize({ width, height })
  21:   }, [width, height, setContainerSize])
  22  
  23:   const contentHeight = useTimeline(s => s.contentHeight)
  24:   const contentWidth = useTimeline(s => s.contentWidth)
  25  

packages\timeline\src\components\timeline\TopBarTimeScale.tsx:
    1  import React, { useEffect, useMemo, useRef } from "react"
    2: import { useThree } from "@react-three/fiber"
    3  import { Plane, Text } from "@react-three/drei"
    4  
    5: import { useTimeline } from "@/hooks"
    6: import { useTimeScaleGraduations } from "@/hooks/useTimeScaleGraduations"
    7  import { formatTimestamp } from "@/utils/formatTimestamp"

   13  
   14:   const containerWidth = useTimeline(s => s.containerWidth)
   15  
   16:   const { size, camera } = useThree()
   17  
   18:   const jumpAt = useTimeline(s => s.jumpAt)
   19:   const togglePlayback = useTimeline(s => s.togglePlayback)
   20:   const theme = useTimeline(s => s.theme)
   21:   const tracks = useTimeline(s => s.tracks)
   22  

   28    // we should use the non-reactive version
   29:   const cellWidth = useTimeline((s) => s.cellWidth)
   30:   // const cellWidth = useTimeline.getState().horizontalZoomLevel
   31:   const contentWidth = useTimeline((s) => s.contentWidth)
   32  
   33:   const isResizing = useTimeline(s => s.isResizing)
   34  
   35:   const durationInMsPerStep = useTimeline(s => s.durationInMsPerStep)
   36  

   39    // note: recomputing this is expensive and creates a visual delay
   40:   const timeScaleGraduations = useTimeScaleGraduations({
   41      unit

   45  
   46:   const setHorizontalZoomLevel = useTimeline((s) => s.setHorizontalZoomLevel)
   47  

   49  
   50:   const setCursorTimestampAtInMs = useTimeline(s => s.setCursorTimestampAtInMs)
   51:   const setIsDraggingCursor = useTimeline(s => s.setIsDraggingCursor)
   52:   const setTopBarTimeScale = useTimeline(s => s.setTopBarTimeScale)
   53    

   66          canvas
   67:       } = useTimeline.getState()
   68        if (!timelineCursor || !isDraggingCursor || !topBarTimeScale || !timelineCamera || !canvas) { return }

   81          
   82:         setCursorTimestampAtInMs(newCursorTimestampAtInMs)
   83          jumpAt(newCursorTimestampAtInMs)

   86  
   87:         setIsDraggingCursor(false)
   88          if (typeof wasPlayingRef.current === "boolean") {

  125            <meshBasicMaterial
  126:             // we need to set the color here to create a sticky overlay
  127                attach="material"

  249          if (r) {
  250:           setTopBarTimeScale(r)
  251          }

  255        onWheel={(e) => {
  256:         if (isDisabled || e.offsetY > topBarTimeScaleHeight) { return }
  257  

  267  
  268:         setHorizontalZoomLevel(
  269            // Math.round(
  270:             useTimeline.getState().cellWidth + (wheelFactor * e.deltaY)
  271            // )

  278          const cursorX = e.point.x + (size.width / 2)
  279:         const durationInMsPerStep = useTimeline.getState().durationInMsPerStep
  280          const cursorTimestampAtInMs = (cursorX / cellWidth) * durationInMsPerStep

  282          wasPlayingRef.current = wasPlaying
  283:         setCursorTimestampAtInMs(cursorTimestampAtInMs)
  284          jumpAt(cursorTimestampAtInMs)
  285:         setIsDraggingCursor(true)
  286          e.stopPropagation()

  290          if (isDisabled) { return }
  291:         setIsDraggingCursor(false)
  292          if (typeof wasPlayingRef.current === "boolean") {

  307          if (e.pressure > 0) {
  308:           const durationInMsPerStep = useTimeline.getState().durationInMsPerStep
  309            const cursorX = e.point.x + (size.width / 2)
  310            const cursorTimestampAtInMs = (cursorX / cellWidth) * durationInMsPerStep
  311:           setCursorTimestampAtInMs(cursorTimestampAtInMs)
  312            jumpAt(cursorTimestampAtInMs)

packages\timeline\src\compute\computeContentSizeMetrics.ts:
  25  
  26:   // in the future those might be dynamic / coming from settings
  27    const nbMaxShots = NB_MAX_SHOTS

  33    // TODO: compute the exact image ratio instead of using the media orientation,
  34:   // since it might not match the actual assets
  35    const defaultImageRatio =

packages\timeline\src\hooks\index.ts:
  4  export { useHorizontalGridLines } from "./useHorizontalGridLines"
  5: export { useTimeline } from "./useTimeline"
  6  export { useSegmentChanges } from "./useSegmentChanges"

packages\timeline\src\hooks\useAxis.ts:
   3  import * as THREE from "three"
   4: import { useTimeline } from "./useTimeline"
   5  
   6  export const useAxis = () => {
   7:   const [axis, setAxis] = useState([] as THREE.BufferGeometry<THREE.NormalBufferAttributes>[]);
   8  
   9:   const contentHeight = useTimeline(s => s.contentHeight)
  10:   const contentWidth = useTimeline(s => s.contentWidth)
  11  
  12    useEffect(() => {
  13:     const horizontalTop = new THREE.BufferGeometry().setFromPoints([
  14        new THREE.Vector3(0, 0, 1),

  17  
  18:     const vertical = new THREE.BufferGeometry().setFromPoints([
  19        new THREE.Vector3(0, 0, 1),

  23      /*
  24:     const horizontalBottom = new THREE.BufferGeometry().setFromPoints([
  25        new THREE.Vector3(0, -maxHeight, 1),

  28      */
  29:     setAxis([horizontalTop, vertical, 
  30        //horizontalBottom

packages\timeline\src\hooks\useBreakpoints.ts:
  11  export function useBreakpoints(): Breakpoints {
  12:   const [breakpoints, setBreakpoints] = useState<Breakpoints>({
  13      isSm: false,

  22        const width = window.innerWidth
  23:       setBreakpoints({
  24          isSm: width >= 640,

packages\timeline\src\hooks\useCursorGeometry.ts:
   3  
   4: import { useTimeline } from "./useTimeline"
   5  import { leftBarTrackScaleWidth } from "@/constants";

  10  
  11:   const [gridlines, setGridLines] = useState([] as THREE.BufferGeometry<THREE.NormalBufferAttributes>[]);
  12  
  13:   const contentHeight = useTimeline(s => s.contentHeight)
  14   

  26        ];
  27:       const verticalLineGeometry = new THREE.BufferGeometry().setFromPoints(verticalLinePoints);
  28  

  31     
  32:     setGridLines(thisLines);
  33    }, [contentHeight]);

packages\timeline\src\hooks\useDebounce.ts:
  3  export function useDebounce<T>(value: T, delay?: number): T {
  4:   const [debouncedValue, setDebouncedValue] = useState<T>(value)
  5  
  6    useEffect(() => {
  7:     const timer = setTimeout(() => setDebouncedValue(value), delay || 500)
  8  

packages\timeline\src\hooks\useHorizontalGridLines.ts:
   3  
   4: import { useTimeline } from "./useTimeline"
   5  

   7  
   8:   const contentWidth = useTimeline(s => s.contentWidth)
   9:   const getVerticalCellPosition = useTimeline(s => s.getVerticalCellPosition)
  10  
  11:   const tracks = useTimeline(s => s.tracks)
  12  
  13:   const [gridlines, setGridLines] = useState([] as THREE.BufferGeometry<THREE.NormalBufferAttributes>[]);
  14  

  23        ];
  24:       const horizontalLineGeometry = new THREE.BufferGeometry().setFromPoints(horizontalLinePoints);
  25  

  28  
  29:     setGridLines(thisLines);
  30    }, [

packages\timeline\src\hooks\useHorizontalTrackLines.ts:
   3  
   4: import { useTimeline } from "./useTimeline"
   5  import { leftBarTrackScaleWidth } from "@/constants/themes"

   7  export const useHorizontaTrackLines = () => {
   8:   const getVerticalCellPosition = useTimeline(s => s.getVerticalCellPosition)
   9  
  10:   const tracks = useTimeline(s => s.tracks)
  11  
  12:   const [lines, setLines] = useState([] as THREE.BufferGeometry<THREE.NormalBufferAttributes>[]);
  13  

  22        ];
  23:       const horizontalLineGeometry = new THREE.BufferGeometry().setFromPoints(horizontalLinePoints);
  24  

  27  
  28:     setLines(thisLines);
  29    }, [,

packages\timeline\src\hooks\useHoveredSegment.ts:
  1: import { useTimeline } from "./useTimeline"
  2  
  3  export function useHoveredSegment(segmentId: string): boolean {
  4:   const hoveredSegment = useTimeline(s => s.hoveredSegment)
  5    /* deprecateed

packages\timeline\src\hooks\useSegment.ts:
   2  
   3: import { useTimeline } from "./useTimeline"
   4  import { TimelineSegment } from "@/types"

  11  export function useSegment(segmentId: string): TimelineSegment | undefined {
  12:   const [segment, setSegment] = useState<TimelineSegment>()
  13:   const atLeastOneSegmentChanged = useTimeline(s => s.atLeastOneSegmentChanged)
  14  

packages\timeline\src\hooks\useSegmentChanges.ts:
   2  
   3: import { useTimeline } from "./useTimeline"
   4  import { TimelineSegment } from "@/types"

  29      segment.prompt,
  30:     segment.assetUrl.slice(0, 1024),
  31    ]

  46  export function useSegmentChanges(segment: TimelineSegment): number {
  47:   const [changeCounter, setChangeCounter] = useState(0)
  48:   const atLeastOneSegmentChanged = useTimeline(s => s.atLeastOneSegmentChanged)
  49  

  57      if (hashRef.current === newHash) { return }
  58:     setChangeCounter(changesRef.current++)
  59    }, [atLeastOneSegmentChanged])

packages\timeline\src\hooks\useSegmentLoader.ts:
    2  import * as THREE from "three"
    3: import { useThree } from "@react-three/fiber"
    4  

    6  
    7: import { useTimeline } from "./useTimeline"
    8  import { TimelineSegment, TimelineStore } from "@/types"

   21    // however, this doesn't seem to work well
   22:   // const { size: canvasSize, viewport } = useThree()
   23  
   24:   const segments = useTimeline((s) => s.segments)
   25:   const allSegmentsChanged = useTimeline((s) => s.allSegmentsChanged)
   26  
   27:   const loadedSegments = useTimeline((s) => s.loadedSegments)
   28:   const setLoadedSegments = useTimeline((s) => s.setLoadedSegments)
   29  
   30:   const visibleSegments = useTimeline((s) => s.visibleSegments)
   31:   const setVisibleSegments = useTimeline((s) => s.setVisibleSegments)
   32  
   33:   const controls = useThree((state) => state.controls)
   34  
   35    // we do a little trick here, to put the camera zoom inside our Zustand store
   36:   const camera = useThree(({ camera }) => camera)
   37  
   38:   const cellWidth = useTimeline(s => s.cellWidth)
   39:   const getCellHeight = useTimeline(s => s.getCellHeight)
   40:   // const getVerticalCellPosition = useTimeline(s => s.getVerticalCellPosition)
   41    // note: only the average height change will be detected

   44    // TODO: I think we don't need to check over the camera.zoom anymore,
   45:   // since we have set it fixed now
   46    useEffect(() => {
   47:     useTimeline.setState({ currentZoomLevel: camera.zoom })
   48    }, [camera])

   69      // TODO: replace our usage of stateRef.current
   70:     // by useTimeline.getState()
   71      const state = stateRef.current
   72  
   73:     const timeline: TimelineStore = useTimeline.getState() 
   74      const { cellWidth, width, height, durationInMsPerStep } = timeline

  133  
  134:     const { segments } = useTimeline.getState()
  135        

  156  
  157:       setLoadedSegments(loadedSegments)
  158      }

  177        })
  178:       setVisibleSegments(visibleSegments)
  179      }

  202  
  203:       state.timeout = setTimeout(fn, refreshRateInMs) as any
  204      }

packages\timeline\src\hooks\useTimeline.ts:
    16  
    17: export const useTimeline = create<TimelineStore>((set, get) => ({
    18    ...getDefaultState(),
    19  
    20:   setCanvas: (canvas?: HTMLCanvasElement) => {
    21:     set({ canvas })
    22    },

    25      // this re-initialize everything that is related to the current .clap project
    26:     set({
    27        ...getDefaultProjectState()

    30  
    31:   setClap: async (clap?: ClapProject) => {
    32      const { clear } = get()

    36      if (!clap) {
    37:       console.log(`useTimeline: no clap to show`)
    38        return

    40      
    41:     set({ isLoading: true })
    42  

    62  
    63:     let idCollisionDetector = new Set<string>()
    64  

    85      // TODO: compute the exact image ratio instead of using the media orientation,
    86:     // since it might not match the actual assets
    87      const defaultImageRatio = clap ? (

   170            hue: 0,
   171:           occupied: false, // <-- setting this to false is the important part
   172            visible: true,

   192  
   193:     set({
   194        ...meta,

   284    },
   285:   setHorizontalZoomLevel: (newHorizontalZoomLevel: number) => {
   286      const {

   304  
   305:     set({
   306        resizeStartedAt,

   319    
   320:   setSegments: (segments: TimelineSegment[] = []) => {
   321:     set({ segments, loadedSegments: [] })
   322    },
   323:   setLoadedSegments: (loadedSegments: TimelineSegment[] = []) => { set({ loadedSegments }) },
   324:   setVisibleSegments: (visibleSegments: TimelineSegment[] = []) => { set({ visibleSegments }) },
   325  

   340    },
   341:   setHoveredSegment: ({
   342      segment,

   371          segment.isHoveredOnBody = area === SegmentArea.MIDDLE
   372:         set({
   373            hoveredSegment: segment,

   383          previousHoveredSegment.isHoveredOnBody = false
   384:         set({
   385            hoveredSegment: undefined,

   395    },
   396:   setEditedSegment: ({
   397      segment,

   425          segment.editionStatus = status || SegmentEditionStatus.EDITING
   426:         set({
   427            editedSegment: segment,

   434          previousEditedSegment.editionStatus = SegmentEditionStatus.EDITABLE
   435:         set({
   436            editedSegment: undefined,

   444    },
   445:   setSelectedSegment: ({
   446      segment,

   466      /*
   467:     console.log(`setSelectedSegment() called with:`, {
   468        segment,

   477  
   478:     // console.log('`setSelectedSegment(): new value:', newValue)
   479  

   484  
   485:         // console.log('`setSelectedSegment(): nothing to do')
   486      

   495  
   496:         // console.log('`setSelectedSegment(): unselecting all previous segments')
   497      

   503  
   504:       // console.log('`setSelectedSegment(): assigning new value and propagating changes:', newValue)
   505      

   512        }
   513:       set({
   514          selectedSegments: newSelectedSegments,

   520  
   521:       // console.log('`setSelectedSegment(): mass change requested')
   522      

   525        })
   526:       set({
   527          selectedSegments: isSelected ? segments : [],

   541        const pointX = event.point.x
   542:       const offsetX = event.offsetX
   543:       const offsetY = event.offsetY
   544  

   547            pointX: Math.round(e.point.x),
   548:           offsetX: Math.round(e.offsetX),
   549:           offsetY: Math.round(e.offsetY),
   550            isOutOfRange,

   556  
   557:       const { cellWidth, containerWidth, durationInMsPerStep, setSelectedSegment, setHoveredSegment, setEditedSegment } = get()
   558  

   572  
   573:       const isOutOfRange = offsetX < leftBarTrackScaleWidth || offsetY < topBarTimeScaleHeight
   574      
   575        const cursorX = pointX + (containerWidth / 2)
   576:       const cursorTimestampAtInMs = (cursorX / cellWidth) * useTimeline.getState().durationInMsPerStep
   577        

   602        if (eventType === SegmentPointerEvent.DOUBLE_CLICK) {
   603:         setHoveredSegment({
   604            segment,

   606          })
   607:         setSelectedSegment({
   608            segment,

   614          })
   615:         setEditedSegment({
   616            segment,

   623        ) {
   624:         setHoveredSegment({
   625            segment,

   628          if (area === SegmentArea.LEFT) {
   629:           setEditedSegment({
   630              segment,

   633          } else if (area === SegmentArea.RIGHT) {
   634:           setEditedSegment({
   635              segment,

   638          } else if (area === SegmentArea.MIDDLE) {
   639:           setEditedSegment({
   640            segment,

   644        } else if (eventType === SegmentPointerEvent.UP) {
   645:         setHoveredSegment({
   646            segment: undefined,

   648          })
   649:         setEditedSegment({
   650            segment: undefined,

   660      const { silentChangesInSegment, atLeastOneSegmentChanged: previousAtLeastOneSegmentChanged } = get()
   661:     set({
   662        silentChangesInSegment: Object.assign(silentChangesInSegment, {

   673      }
   674:     set({
   675        silentChangesInSegment,

   678    },
   679:   setTimelineTheme: (theme: ClapTimelineTheme) => {
   680:     set({ theme })
   681    },
   682:   setTimelineCamera: (timelineCamera?: TimelineCameraImpl) => {
   683:     set({ timelineCamera })
   684    },
   685:   setTimelineControls: (timelineControls?: TimelineControlsImpl) => {
   686:     set({ timelineControls })
   687    },
   688:   setTopBarTimeScale: (topBarTimeScale?: THREE.Group<THREE.Object3DEventMap>) => {
   689:     set({ topBarTimeScale })
   690    },
   691:   setLeftBarTrackScale: (leftBarTrackScale?: THREE.Group<THREE.Object3DEventMap>) => {
   692:     set({ leftBarTrackScale })
   693    },
   694    // used when we move the full-length scroller
   695:   setScrollX: (scrollX: number) => {
   696:     set({ scrollX })
   697    },

   700      // TODO: compute the limits here, to avoid doing re-renderings for nothing
   701:     set({
   702        scrollX: scrollX + deltaX,

   716  
   717:     set({
   718        ...computeContentSizeMetrics({

   732    },
   733:   setContainerSize: ({ width, height }: { width: number; height: number }) => {
   734      const { containerWidth: previousWidth, containerHeight: previousHeight } = get()

   739  
   740:     set({
   741        containerWidth: width,

   757    },
   758:   setTimelineCursor: (timelineCursor?: TimelineCursorImpl) => {
   759:     set({ timelineCursor })
   760    },
   761:   setIsDraggingCursor: (isDraggingCursor: boolean) => {
   762:     set({ isDraggingCursor })
   763    },
   764:   setCursorTimestampAtInMs: (cursorTimestampAtInMs: number = 0) => {
   765      const { invalidate, cursorTimestampAtInMs: previousCursorTimestampAtInMs } = get()
   766      if (cursorTimestampAtInMs !== previousCursorTimestampAtInMs) {
   767:       set({ cursorTimestampAtInMs })
   768        invalidate()

   770    },
   771:   setJumpAt: (jumpAt: JumpAt) => {
   772:     set({ jumpAt })
   773    },
   774:   setIsPlaying: (isPlaying: IsPlaying) => {
   775:     set({ isPlaying })
   776    },
   777:   setTogglePlayback: (togglePlayback: TogglePlayback) => {
   778:     set({ togglePlayback })
   779    },

   826    },
   827:   setSegmentResolver: (segmentResolver: SegmentResolver) => {
   828:     set({ segmentResolver })
   829    },
   830    resolveSegment: async (segment: TimelineSegment): Promise<TimelineSegment> => {
   831:     const { segmentResolver, fitSegmentToAssetDuration } = get()
   832      if (!segmentResolver) { return segment }

   836      // after a segment has ben resolved, it is possible that the size
   837:     // of its asset changed (eg. a dialogue line longer than the segment's length)
   838      //

   849      if (segment.category === ClapSegmentCategory.DIALOGUE) {
   850:       await fitSegmentToAssetDuration(segment)
   851      } else if (segment.category === ClapSegmentCategory.VIDEO) {
   852:       await fitSegmentToAssetDuration(segment)
   853      }

   925      if (triggerChange) {
   926:       set({
   927          allSegmentsChanged: previousAllSegmentsChanged + 1,

  1024  
  1025:     set({
  1026        segments,

  1052    // resize and move the end of a segment, as well as the segment after it
  1053:   fitSegmentToAssetDuration: async (segment: TimelineSegment, requestedDurationInMs?: number): Promise<void> => {
  1054      

  1072        ? requestedDurationInMs
  1073:       : segment.assetDurationInMs
  1074  

  1085  
  1086:     // let's set some limits eg. at least 1 sec, I think this is reasonable
  1087      const minimumLengthInSteps = 2

  1093  
  1094:     // setup some limits
  1095      const newSegmentDurationInMs = Math.max(

  1192  
  1193:     set({
  1194        segments,

  1216  
  1217:     const deletables = new Set(ids)
  1218  

  1223  
  1224:     set({
  1225        segments: newSegments,

  1251      if (somethingChanged) {
  1252:       set({
  1253          entities: previousEntities,

  1279      if (somethingChanged) {
  1280:       set({
  1281          entities: previousEntities,

  1302      if (idsToDelete.length) {
  1303:       set({
  1304          entities: previousEntities.filter(e => !idsToDelete.includes(e.id)),

  1310  
  1311:   setInvalidate: (invalidate?: Invalidate) => {
  1312:     set({ invalidate: invalidate || (() => {}) })
  1313    }

  1317  if (typeof window !== 'undefined') {
  1318:   (window as any).useTimeline = useTimeline
  1319  }

packages\timeline\src\hooks\useTimeScaleGraduations.ts:
    5  
    6: import { useTimeline } from "./useTimeline"
    7  

   12  // or we implement our own code to do that.. I don't know
   13: export const useTimeScaleGraduations = ({
   14    unit

   17  }) => {
   18:   const containerWidth = useTimeline(s => s.containerWidth)
   19:   const cellWidth = useTimeline(s => s.cellWidth)
   20:   const nbMaxShots = useTimeline(s => s.nbMaxShots)
   21:   const contentWidth = useTimeline((s) => s.contentWidth)
   22  
   23:   const [timeScaleGraduations, setTimeScaleGraduations] = useState([] as THREE.BufferGeometry<THREE.NormalBufferAttributes>[]);
   24  

   48          ];
   49:         const verticalLineGeometry = new THREE.BufferGeometry().setFromPoints(verticalLinePoints);
   50          lines.push(verticalLineGeometry);

   65          ];
   66:         const verticalLineGeometry = new THREE.BufferGeometry().setFromPoints(verticalLinePoints);
   67          lines.push(verticalLineGeometry);

   83          ];
   84:         const verticalLineGeometry = new THREE.BufferGeometry().setFromPoints(verticalLinePoints);
   85  

  102          ];
  103:         const verticalLineGeometry = new THREE.BufferGeometry().setFromPoints(verticalLinePoints);
  104  

  108  
  109:     setTimeScaleGraduations(lines);
  110    }, [cellWidth, nbMaxShots, leftBarTrackScaleWidth, contentWidth]);

packages\timeline\src\hooks\useVerticalGridLines.ts:
   3  
   4: import { useTimeline } from "./useTimeline"
   5  import { NB_MAX_SHOTS } from "@/constants/grid"

   7  export const useVerticalGridLines = () => {
   8:   const cellWidth = useTimeline(s => s.cellWidth)
   9:   const contentHeight = useTimeline(s => s.contentHeight)
  10:   const tracks = useTimeline(s => s.tracks)
  11:   const [gridlines, setGridLines] = useState([] as THREE.BufferGeometry<THREE.NormalBufferAttributes>[]);
  12  
  13:   const nbMaxShots = useTimeline(s => s.nbMaxShots)
  14  

  23        ];
  24:       const verticalLineGeometry = new THREE.BufferGeometry().setFromPoints(verticalLinePoints);
  25  

  28  
  29:     setGridLines(thisLines);
  30    }, [

packages\timeline\src\types\rendering.ts:
   5  
   6:   // render assets when the user asks for it (could be a click or mouse hover)
   7    ON_DEMAND = "ON_DEMAND",
   8  
   9:   // render assets currently visible on screen, never render invisible ones
  10    ON_SCREEN_ONLY = "ON_SCREEN_ONLY",
  11  
  12:   // render assets visible on screen in priority,
  13:   // then pre-render a few of the surrounding assets (but not the whole set)
  14    ON_SCREEN_THEN_SURROUNDING = "ON_SCREEN_THEN_SURROUNDING",

  16  
  17:   // render assets visible on screen in priority,
  18:   // then pre-render *ALL* the remaining project's assets
  19    // so yeah if you have 3000 storyboard images, it will render that many ($$$)
  20:   // (note: there is a setting to cap the number of parallel renderings)
  21    //

packages\timeline\src\types\timeline.ts:
  251     * 
  252:    * Note: there will be no update of this value in case the camera settings have changed
  253     */

  258     * 
  259:    * Note: there will be no update of this value in case the controls settings have changed
  260     */

  281  export type TimelineStoreModifiers = {
  282:   setCanvas: (canvas?: HTMLCanvasElement) => void
  283    clear: () => void
  284:   setClap: (clap?: ClapProject) => Promise<void>
  285    getClap: () => Promise<ClapProject>
  286    getClapMeta: () => ClapMeta
  287:   setHorizontalZoomLevel: (newHorizontalZoomLevel: number) => void
  288:   setSegments: (segments?: TimelineSegment[]) => void
  289:   setLoadedSegments: (loadedSegments?: TimelineSegment[]) => void
  290:   setVisibleSegments: (visibleSegments?: TimelineSegment[]) => void
  291    getCellHeight: (trackNumber?: number) => number
  292    getVerticalCellPosition: (start: number, end: number) => number
  293:   setHoveredSegment: (params?: {
  294      segment?: TimelineSegment

  296    }) => void
  297:   setEditedSegment: ({
  298      segment,

  303    }) => void
  304:   setSelectedSegment: (params?: {
  305      segment?: TimelineSegment

  321  
  322:   setTimelineTheme: (theme: ClapTimelineTheme) => void
  323:   setTimelineCamera: (timelineCamera?: TimelineCameraImpl) => void
  324:   setTimelineControls: (timelineControls?: TimelineControlsImpl) => void
  325:   setTopBarTimeScale: (topBarTimeScale?: THREE.Group<THREE.Object3DEventMap>) => void
  326:   setLeftBarTrackScale: (leftBarTrackScale?: THREE.Group<THREE.Object3DEventMap>) => void
  327:   setScrollX: (scrollX: number) => void
  328    handleMouseWheel: ({ deltaX, deltaY }: { deltaX: number; deltaY: number }) => void
  329    toggleTrackVisibility: (trackId: number) => void
  330:   setContainerSize: ({ width, height }: { width: number; height: number }) => void
  331:   setTimelineCursor: (timelineCursor?: TimelineCursorImpl) => void
  332:   setIsDraggingCursor: (isDraggingCursor: boolean) => void
  333:   setCursorTimestampAtInMs: (cursorTimestampAtInMs?: number) => void
  334:   setJumpAt: (jumpAt: JumpAt) => void
  335:   setIsPlaying: (isPlaying: IsPlaying) => void
  336:   setTogglePlayback: (togglePlayback: TogglePlayback) => void
  337    saveClapAs: (params: {

  351    }) => Promise<number>
  352:   setSegmentResolver: (segmentResolver: SegmentResolver) => void
  353    resolveSegment: (segment: TimelineSegment) => Promise<TimelineSegment>

  390  
  391:   fitSegmentToAssetDuration: (segment: TimelineSegment, durationInMs?: number) => Promise<void>
  392  

  403  
  404:   setInvalidate: (invalidate?: Invalidate) => void
  405  }

packages\timeline\src\utils\clapSegmentToTimelineSegment.ts:
  41        try {
  42:         segment.audioBuffer = await getAudioBuffer(segment.assetUrl)
  43        } catch (err) {

packages\timeline\src\utils\debounceAsync.ts:
   8    return new Promise((resolve) => {
   9:     setTimeout(() => {
  10        resolve(`Results for ${query}`);

  47  
  48:       timeout = setTimeout(async () => {
  49          try {

packages\timeline\src\utils\debounceSync.ts:
  44      let result: R | undefined
  45:     timeout = setTimeout(() => {
  46        result = func(...args)

packages\timeline\src\utils\getDefaultState.ts:
   6  
   7: // those settings WILL change between .clap project reloads
   8  export function getDefaultProjectState(): TimelineStoreProjectState {

  44  
  45:     // @deprecated, we now use a static WebGL camera zoom level set at 1.0
  46      currentZoomLevel: 1.0, 

  72  
  73: // those settings will NOT changes between .clap project reloads
  74  export function getDefaultPreferencesState(): TimelineStorePreferencesState {

packages\timeline\src\utils\getFinalVideo.ts:
  11      s.endTimeInMs === clap.meta.durationInMs &&
  12:     s.assetUrl).at(0)
  13    

packages\timeline\src\utils\getSegmentColorScheme.ts:
  2  import { hslToHex } from "./hslToHex"
  3: import { TimelineSegment, useTimeline } from ".."
  4  

  8  
  9:   const { theme } = useTimeline.getState()
  10  

packages\timeline\src\utils\getTextLength.ts:
   9  
  10: import { useTimeline } from ".."
  11  

  45  
  46:   const cellWidthInPixels = useTimeline.getState().cellWidth
  47  

packages\timeline\src\utils\hslToHex.ts:
  24    }
  25:   toHexCache.set(key, hex);
  26    return hex;

  58    }
  59:   hslToHexCache.set(key, result);
  60    return result;

packages\timeline\src\utils\index.ts:
  20  export { removeFinalVideosAndConvertToTimelineSegments } from "./removeFinalVideosAndConvertToTimelineSegments"
  21: export { setBodyCursor } from "./setBodyCursor"
  22  export { similar } from "./similar"

packages\timeline\src\utils\removeFinalVideosAndConvertToTimelineSegments.ts:
  19      const outputFilePath = await writeBase64ToFile(
  20:       alreadyAnEmbeddedFinalVideo.assetUrl,
  21        join(outputDir, `existing_final_video`)

  41      // but we also don't have the time to compute the visibility yet,
  42:     // so what we do is that we apply some basic rule (since the window and scroll is reset too)
  43      // to only show the first Nth segments (in this case, 200)

packages\timeline\src\utils\setBodyCursor.ts:
  3  
  4: export function setBodyCursor(cursor: CursorName) {
  5    if (cursor !== document.body.style.cursor) {

packages\timeline\src\utils\sleep.ts:
  2    new Promise((resolve) => {
  3:     setTimeout(() => {
  4        resolve(true)

packages\timeline\src\utils\throttle.ts:
  17  
  18:       timeout = window.setTimeout(() => {
  19          wait = false;
